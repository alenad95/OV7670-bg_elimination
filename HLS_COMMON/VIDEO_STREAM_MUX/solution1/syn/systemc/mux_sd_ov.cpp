// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mux_sd_ov.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mux_sd_ov::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mux_sd_ov::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> mux_sd_ov::ap_ST_st1_fsm_0 = "1";
const sc_lv<32> mux_sd_ov::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> mux_sd_ov::ap_const_lv1_1 = "1";
const sc_lv<1> mux_sd_ov::ap_const_lv1_0 = "0";
const int mux_sd_ov::C_S_AXI_DATA_WIDTH = "100000";

mux_sd_ov::mux_sd_ov(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mux_sd_ov_AXILiteS_s_axi_U = new mux_sd_ov_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("mux_sd_ov_AXILiteS_s_axi_U");
    mux_sd_ov_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    mux_sd_ov_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    mux_sd_ov_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    mux_sd_ov_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    mux_sd_ov_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    mux_sd_ov_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    mux_sd_ov_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    mux_sd_ov_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    mux_sd_ov_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    mux_sd_ov_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    mux_sd_ov_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    mux_sd_ov_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    mux_sd_ov_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    mux_sd_ov_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    mux_sd_ov_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    mux_sd_ov_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    mux_sd_ov_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    mux_sd_ov_AXILiteS_s_axi_U->ACLK(ap_clk);
    mux_sd_ov_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    mux_sd_ov_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    mux_sd_ov_AXILiteS_s_axi_U->switch_stream(switch_stream);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( switch_stream_read_read_fu_30_p2 );
    sensitive << ( ap_sig_87 );
    sensitive << ( ap_sig_ioackin_outputStream_V_V_TREADY );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( switch_stream_read_read_fu_30_p2 );
    sensitive << ( ap_sig_87 );
    sensitive << ( ap_sig_ioackin_outputStream_V_V_TREADY );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_100);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_87 );

    SC_METHOD(thread_ap_sig_18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_87);
    sensitive << ( ap_start );
    sensitive << ( data_in_sd_V_V_TVALID );
    sensitive << ( data_in_ov7670_V_V_TVALID );
    sensitive << ( switch_stream_read_read_fu_30_p2 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_18 );

    SC_METHOD(thread_ap_sig_ioackin_outputStream_V_V_TREADY);
    sensitive << ( outputStream_V_V_TREADY );
    sensitive << ( ap_reg_ioackin_outputStream_V_V_TREADY );

    SC_METHOD(thread_data_in_ov7670_V_V_TDATA_blk_n);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( data_in_ov7670_V_V_TVALID );
    sensitive << ( switch_stream_read_read_fu_30_p2 );

    SC_METHOD(thread_data_in_ov7670_V_V_TREADY);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( switch_stream_read_read_fu_30_p2 );
    sensitive << ( ap_sig_87 );
    sensitive << ( ap_sig_ioackin_outputStream_V_V_TREADY );

    SC_METHOD(thread_data_in_sd_V_V_TDATA_blk_n);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( data_in_sd_V_V_TVALID );
    sensitive << ( switch_stream_read_read_fu_30_p2 );

    SC_METHOD(thread_data_in_sd_V_V_TREADY);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( switch_stream_read_read_fu_30_p2 );
    sensitive << ( ap_sig_87 );
    sensitive << ( ap_sig_ioackin_outputStream_V_V_TREADY );

    SC_METHOD(thread_outputStream_V_V_TDATA);
    sensitive << ( data_in_sd_V_V_TDATA );
    sensitive << ( data_in_ov7670_V_V_TDATA );
    sensitive << ( switch_stream_read_read_fu_30_p2 );
    sensitive << ( ap_sig_100 );

    SC_METHOD(thread_outputStream_V_V_TDATA_blk_n);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( outputStream_V_V_TREADY );
    sensitive << ( switch_stream_read_read_fu_30_p2 );

    SC_METHOD(thread_outputStream_V_V_TVALID);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( switch_stream_read_read_fu_30_p2 );
    sensitive << ( ap_sig_87 );
    sensitive << ( ap_reg_ioackin_outputStream_V_V_TREADY );

    SC_METHOD(thread_switch_stream_read_read_fu_30_p2);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( switch_stream );
    sensitive << ( switch_stream_read_read_fu_30_p2 );
    sensitive << ( ap_sig_87 );
    sensitive << ( ap_sig_ioackin_outputStream_V_V_TREADY );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( switch_stream_read_read_fu_30_p2 );
    sensitive << ( ap_sig_87 );
    sensitive << ( ap_sig_ioackin_outputStream_V_V_TREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "1";
    ap_reg_ioackin_outputStream_V_V_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mux_sd_ov_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_in_sd_V_V_TDATA, "(port)data_in_sd_V_V_TDATA");
    sc_trace(mVcdFile, data_in_sd_V_V_TVALID, "(port)data_in_sd_V_V_TVALID");
    sc_trace(mVcdFile, data_in_sd_V_V_TREADY, "(port)data_in_sd_V_V_TREADY");
    sc_trace(mVcdFile, data_in_ov7670_V_V_TDATA, "(port)data_in_ov7670_V_V_TDATA");
    sc_trace(mVcdFile, data_in_ov7670_V_V_TVALID, "(port)data_in_ov7670_V_V_TVALID");
    sc_trace(mVcdFile, data_in_ov7670_V_V_TREADY, "(port)data_in_ov7670_V_V_TREADY");
    sc_trace(mVcdFile, outputStream_V_V_TDATA, "(port)outputStream_V_V_TDATA");
    sc_trace(mVcdFile, outputStream_V_V_TVALID, "(port)outputStream_V_V_TVALID");
    sc_trace(mVcdFile, outputStream_V_V_TREADY, "(port)outputStream_V_V_TREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_18, "ap_sig_18");
    sc_trace(mVcdFile, switch_stream, "switch_stream");
    sc_trace(mVcdFile, data_in_sd_V_V_TDATA_blk_n, "data_in_sd_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, switch_stream_read_read_fu_30_p2, "switch_stream_read_read_fu_30_p2");
    sc_trace(mVcdFile, data_in_ov7670_V_V_TDATA_blk_n, "data_in_ov7670_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, outputStream_V_V_TDATA_blk_n, "outputStream_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_sig_87, "ap_sig_87");
    sc_trace(mVcdFile, ap_sig_ioackin_outputStream_V_V_TREADY, "ap_sig_ioackin_outputStream_V_V_TREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_outputStream_V_V_TREADY, "ap_reg_ioackin_outputStream_V_V_TREADY");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_100, "ap_sig_100");
#endif

    }
    mHdltvinHandle.open("mux_sd_ov.hdltvin.dat");
    mHdltvoutHandle.open("mux_sd_ov.hdltvout.dat");
}

mux_sd_ov::~mux_sd_ov() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mux_sd_ov_AXILiteS_s_axi_U;
}

void mux_sd_ov::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mux_sd_ov::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_outputStream_V_V_TREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
              esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
              !(ap_sig_87.read() || (esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outputStream_V_V_TREADY.read())) || (!esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outputStream_V_V_TREADY.read())))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
              !esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
              !(ap_sig_87.read() || (esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outputStream_V_V_TREADY.read())) || (!esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outputStream_V_V_TREADY.read())))))) {
            ap_reg_ioackin_outputStream_V_V_TREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                     esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
                     !ap_sig_87.read() && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_V_TREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                     !esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
                     !ap_sig_87.read() && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_V_TREADY.read())))) {
            ap_reg_ioackin_outputStream_V_V_TREADY = ap_const_logic_1;
        }
    }
}

void mux_sd_ov::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !(ap_sig_87.read() || (esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outputStream_V_V_TREADY.read())) || (!esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outputStream_V_V_TREADY.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mux_sd_ov::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mux_sd_ov::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !(ap_sig_87.read() || (esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outputStream_V_V_TREADY.read())) || (!esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outputStream_V_V_TREADY.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mux_sd_ov::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mux_sd_ov::thread_ap_sig_100() {
    ap_sig_100 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !ap_sig_87.read());
}

void mux_sd_ov::thread_ap_sig_18() {
    ap_sig_18 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void mux_sd_ov::thread_ap_sig_87() {
    ap_sig_87 = ((esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(data_in_ov7670_V_V_TVALID.read(), ap_const_logic_0)) || (!esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(data_in_sd_V_V_TVALID.read(), ap_const_logic_0)) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0));
}

void mux_sd_ov::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_18.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void mux_sd_ov::thread_ap_sig_ioackin_outputStream_V_V_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_outputStream_V_V_TREADY.read())) {
        ap_sig_ioackin_outputStream_V_V_TREADY = outputStream_V_V_TREADY.read();
    } else {
        ap_sig_ioackin_outputStream_V_V_TREADY = ap_const_logic_1;
    }
}

void mux_sd_ov::thread_data_in_ov7670_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0))) {
        data_in_ov7670_V_V_TDATA_blk_n = data_in_ov7670_V_V_TVALID.read();
    } else {
        data_in_ov7670_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void mux_sd_ov::thread_data_in_ov7670_V_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
         !(ap_sig_87.read() || (esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outputStream_V_V_TREADY.read())) || (!esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outputStream_V_V_TREADY.read()))))) {
        data_in_ov7670_V_V_TREADY = ap_const_logic_1;
    } else {
        data_in_ov7670_V_V_TREADY = ap_const_logic_0;
    }
}

void mux_sd_ov::thread_data_in_sd_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0))) {
        data_in_sd_V_V_TDATA_blk_n = data_in_sd_V_V_TVALID.read();
    } else {
        data_in_sd_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void mux_sd_ov::thread_data_in_sd_V_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
         !(ap_sig_87.read() || (esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outputStream_V_V_TREADY.read())) || (!esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outputStream_V_V_TREADY.read()))))) {
        data_in_sd_V_V_TREADY = ap_const_logic_1;
    } else {
        data_in_sd_V_V_TREADY = ap_const_logic_0;
    }
}

void mux_sd_ov::thread_outputStream_V_V_TDATA() {
    if (ap_sig_100.read()) {
        if (!esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0)) {
            outputStream_V_V_TDATA = data_in_sd_V_V_TDATA.read();
        } else if (esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0)) {
            outputStream_V_V_TDATA = data_in_ov7670_V_V_TDATA.read();
        } else {
            outputStream_V_V_TDATA = "XXXXXXXX";
        }
    } else {
        outputStream_V_V_TDATA = "XXXXXXXX";
    }
}

void mux_sd_ov::thread_outputStream_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0)))) {
        outputStream_V_V_TDATA_blk_n = outputStream_V_V_TREADY.read();
    } else {
        outputStream_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void mux_sd_ov::thread_outputStream_V_V_TVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
          !ap_sig_87.read() && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_outputStream_V_V_TREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(switch_stream_read_read_fu_30_p2.read(), ap_const_lv1_0) && 
          !ap_sig_87.read() && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_outputStream_V_V_TREADY.read())))) {
        outputStream_V_V_TVALID = ap_const_logic_1;
    } else {
        outputStream_V_V_TVALID = ap_const_logic_0;
    }
}

void mux_sd_ov::thread_switch_stream_read_read_fu_30_p2() {
    switch_stream_read_read_fu_30_p2 =  (sc_lv<1>) (switch_stream.read());
}

void mux_sd_ov::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void mux_sd_ov::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_sd_V_V_TDATA\" :  \"" << data_in_sd_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_sd_V_V_TVALID\" :  \"" << data_in_sd_V_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_sd_V_V_TREADY\" :  \"" << data_in_sd_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_ov7670_V_V_TDATA\" :  \"" << data_in_ov7670_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_ov7670_V_V_TVALID\" :  \"" << data_in_ov7670_V_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_ov7670_V_V_TREADY\" :  \"" << data_in_ov7670_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outputStream_V_V_TDATA\" :  \"" << outputStream_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outputStream_V_V_TVALID\" :  \"" << outputStream_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outputStream_V_V_TREADY\" :  \"" << outputStream_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

