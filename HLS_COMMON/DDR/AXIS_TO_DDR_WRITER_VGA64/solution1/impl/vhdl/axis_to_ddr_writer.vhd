-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axis_to_ddr_writer is
generic (
    C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BASE_DDR_ADDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_BASE_DDR_ADDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputStream_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    inputStream_V_TVALID : IN STD_LOGIC;
    inputStream_V_TREADY : OUT STD_LOGIC;
    m_axi_base_ddr_addr_AWVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_AWREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_base_ddr_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_WREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH/8-1 downto 0);
    m_axi_base_ddr_addr_WLAST : OUT STD_LOGIC;
    m_axi_base_ddr_addr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_ARREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_base_ddr_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RVALID : IN STD_LOGIC;
    m_axi_base_ddr_addr_RREADY : OUT STD_LOGIC;
    m_axi_base_ddr_addr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RLAST : IN STD_LOGIC;
    m_axi_base_ddr_addr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_BVALID : IN STD_LOGIC;
    m_axi_base_ddr_addr_BREADY : OUT STD_LOGIC;
    m_axi_base_ddr_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH-1 downto 0);
    frame_index_V : OUT STD_LOGIC_VECTOR (2 downto 0);
    frame_count : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of axis_to_ddr_writer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axis_to_ddr_writer,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=346351,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=745,HLS_SYN_LUT=857}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_pp1_stg0_fsm_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_st8_fsm_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_st9_fsm_6 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_st10_fsm_7 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_st11_fsm_8 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_st12_fsm_9 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv22_4B000 : STD_LOGIC_VECTOR (21 downto 0) := "0001001011000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv7_4B : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv19_200 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_28 : BOOLEAN;
    signal inner_index_V : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal frame_count_inner : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal base_ddr_addr_AWVALID : STD_LOGIC;
    signal base_ddr_addr_AWREADY : STD_LOGIC;
    signal base_ddr_addr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal base_ddr_addr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal base_ddr_addr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal base_ddr_addr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal base_ddr_addr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal base_ddr_addr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal base_ddr_addr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal base_ddr_addr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_WVALID : STD_LOGIC;
    signal base_ddr_addr_WREADY : STD_LOGIC;
    signal base_ddr_addr_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal base_ddr_addr_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal base_ddr_addr_WLAST : STD_LOGIC;
    signal base_ddr_addr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_ARVALID : STD_LOGIC;
    signal base_ddr_addr_ARREADY : STD_LOGIC;
    signal base_ddr_addr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal base_ddr_addr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal base_ddr_addr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal base_ddr_addr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal base_ddr_addr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal base_ddr_addr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal base_ddr_addr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal base_ddr_addr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_RVALID : STD_LOGIC;
    signal base_ddr_addr_RREADY : STD_LOGIC;
    signal base_ddr_addr_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal base_ddr_addr_RLAST : STD_LOGIC;
    signal base_ddr_addr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_BVALID : STD_LOGIC;
    signal base_ddr_addr_BREADY : STD_LOGIC;
    signal base_ddr_addr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal indvar_reg_194 : STD_LOGIC_VECTOR (9 downto 0);
    signal inner_index_V_load_reg_316 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_189 : BOOLEAN;
    signal idx_1_fu_236_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx_1_reg_330 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_fu_276_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_200 : BOOLEAN;
    signal exitcond_flatten_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_207 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_217 : BOOLEAN;
    signal ap_sig_ioackin_base_ddr_addr_AWREADY : STD_LOGIC;
    signal exitcond3_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_230 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond3_reg_348_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_base_ddr_addr_WREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal indvar_next_fu_299_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_load_reg_362 : STD_LOGIC_VECTOR (63 downto 0);
    signal offset_fu_310_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal offset_reg_367 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_266 : BOOLEAN;
    signal buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal offset1_reg_162 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_285 : BOOLEAN;
    signal idx_reg_172 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_reg_183 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_9_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_base_ddr_addr_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_base_ddr_addr_WREADY : STD_LOGIC := '0';
    signal tmp_4_fu_242_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_index_V_preg : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal tmp_1_fu_214_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_214_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_214_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_sig_bdd_317 : BOOLEAN;

    component axis_to_ddr_writer_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component axis_to_ddr_writer_base_ddr_addr_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    axis_to_ddr_writer_base_ddr_addr_m_axi_U : component axis_to_ddr_writer_base_ddr_addr_m_axi
    generic map (
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_BASE_DDR_ADDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_BASE_DDR_ADDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BASE_DDR_ADDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_base_ddr_addr_AWVALID,
        AWREADY => m_axi_base_ddr_addr_AWREADY,
        AWADDR => m_axi_base_ddr_addr_AWADDR,
        AWID => m_axi_base_ddr_addr_AWID,
        AWLEN => m_axi_base_ddr_addr_AWLEN,
        AWSIZE => m_axi_base_ddr_addr_AWSIZE,
        AWBURST => m_axi_base_ddr_addr_AWBURST,
        AWLOCK => m_axi_base_ddr_addr_AWLOCK,
        AWCACHE => m_axi_base_ddr_addr_AWCACHE,
        AWPROT => m_axi_base_ddr_addr_AWPROT,
        AWQOS => m_axi_base_ddr_addr_AWQOS,
        AWREGION => m_axi_base_ddr_addr_AWREGION,
        AWUSER => m_axi_base_ddr_addr_AWUSER,
        WVALID => m_axi_base_ddr_addr_WVALID,
        WREADY => m_axi_base_ddr_addr_WREADY,
        WDATA => m_axi_base_ddr_addr_WDATA,
        WSTRB => m_axi_base_ddr_addr_WSTRB,
        WLAST => m_axi_base_ddr_addr_WLAST,
        WID => m_axi_base_ddr_addr_WID,
        WUSER => m_axi_base_ddr_addr_WUSER,
        ARVALID => m_axi_base_ddr_addr_ARVALID,
        ARREADY => m_axi_base_ddr_addr_ARREADY,
        ARADDR => m_axi_base_ddr_addr_ARADDR,
        ARID => m_axi_base_ddr_addr_ARID,
        ARLEN => m_axi_base_ddr_addr_ARLEN,
        ARSIZE => m_axi_base_ddr_addr_ARSIZE,
        ARBURST => m_axi_base_ddr_addr_ARBURST,
        ARLOCK => m_axi_base_ddr_addr_ARLOCK,
        ARCACHE => m_axi_base_ddr_addr_ARCACHE,
        ARPROT => m_axi_base_ddr_addr_ARPROT,
        ARQOS => m_axi_base_ddr_addr_ARQOS,
        ARREGION => m_axi_base_ddr_addr_ARREGION,
        ARUSER => m_axi_base_ddr_addr_ARUSER,
        RVALID => m_axi_base_ddr_addr_RVALID,
        RREADY => m_axi_base_ddr_addr_RREADY,
        RDATA => m_axi_base_ddr_addr_RDATA,
        RLAST => m_axi_base_ddr_addr_RLAST,
        RID => m_axi_base_ddr_addr_RID,
        RUSER => m_axi_base_ddr_addr_RUSER,
        RRESP => m_axi_base_ddr_addr_RRESP,
        BVALID => m_axi_base_ddr_addr_BVALID,
        BREADY => m_axi_base_ddr_addr_BREADY,
        BRESP => m_axi_base_ddr_addr_BRESP,
        BID => m_axi_base_ddr_addr_BID,
        BUSER => m_axi_base_ddr_addr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce,
        I_ARVALID => base_ddr_addr_ARVALID,
        I_ARREADY => base_ddr_addr_ARREADY,
        I_ARADDR => base_ddr_addr_ARADDR,
        I_ARID => base_ddr_addr_ARID,
        I_ARLEN => base_ddr_addr_ARLEN,
        I_ARSIZE => base_ddr_addr_ARSIZE,
        I_ARLOCK => base_ddr_addr_ARLOCK,
        I_ARCACHE => base_ddr_addr_ARCACHE,
        I_ARQOS => base_ddr_addr_ARQOS,
        I_ARPROT => base_ddr_addr_ARPROT,
        I_ARUSER => base_ddr_addr_ARUSER,
        I_ARBURST => base_ddr_addr_ARBURST,
        I_ARREGION => base_ddr_addr_ARREGION,
        I_RVALID => base_ddr_addr_RVALID,
        I_RREADY => base_ddr_addr_RREADY,
        I_RDATA => base_ddr_addr_RDATA,
        I_RID => base_ddr_addr_RID,
        I_RUSER => base_ddr_addr_RUSER,
        I_RRESP => base_ddr_addr_RRESP,
        I_RLAST => base_ddr_addr_RLAST,
        I_AWVALID => base_ddr_addr_AWVALID,
        I_AWREADY => base_ddr_addr_AWREADY,
        I_AWADDR => base_ddr_addr_AWADDR,
        I_AWID => base_ddr_addr_AWID,
        I_AWLEN => base_ddr_addr_AWLEN,
        I_AWSIZE => base_ddr_addr_AWSIZE,
        I_AWLOCK => base_ddr_addr_AWLOCK,
        I_AWCACHE => base_ddr_addr_AWCACHE,
        I_AWQOS => base_ddr_addr_AWQOS,
        I_AWPROT => base_ddr_addr_AWPROT,
        I_AWUSER => base_ddr_addr_AWUSER,
        I_AWBURST => base_ddr_addr_AWBURST,
        I_AWREGION => base_ddr_addr_AWREGION,
        I_WVALID => base_ddr_addr_WVALID,
        I_WREADY => base_ddr_addr_WREADY,
        I_WDATA => base_ddr_addr_WDATA,
        I_WID => base_ddr_addr_WID,
        I_WUSER => base_ddr_addr_WUSER,
        I_WLAST => base_ddr_addr_WLAST,
        I_WSTRB => base_ddr_addr_WSTRB,
        I_BVALID => base_ddr_addr_BVALID,
        I_BREADY => base_ddr_addr_BREADY,
        I_BRESP => base_ddr_addr_BRESP,
        I_BID => base_ddr_addr_BID,
        I_BUSER => base_ddr_addr_BUSER);

    buffer_U : component axis_to_ddr_writer_buffer
    generic map (
        DataWidth => 64,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        q0 => buffer_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_base_ddr_addr_AWREADY assign process. --
    ap_reg_ioackin_base_ddr_addr_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_base_ddr_addr_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_AWREADY))) then 
                        ap_reg_ioackin_base_ddr_addr_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = base_ddr_addr_AWREADY)) then 
                        ap_reg_ioackin_base_ddr_addr_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_base_ddr_addr_WREADY assign process. --
    ap_reg_ioackin_base_ddr_addr_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_base_ddr_addr_WREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_317) then
                    if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))) then 
                        ap_reg_ioackin_base_ddr_addr_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = base_ddr_addr_WREADY)) then 
                        ap_reg_ioackin_base_ddr_addr_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond3_fu_293_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_AWREADY)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond3_fu_293_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_AWREADY))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond3_fu_293_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_AWREADY)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- frame_count_inner assign process. --
    frame_count_inner_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                frame_count_inner <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_230_p2 = ap_const_lv1_0)))) then 
                    frame_count_inner <= tmp_5_fu_257_p2;
                end if; 
            end if;
        end if;
    end process;


    -- frame_index_V_preg assign process. --
    frame_index_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                frame_index_V_preg <= ap_const_lv3_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    frame_index_V_preg <= inner_index_V;
                end if; 
            end if;
        end if;
    end process;


    -- inner_index_V assign process. --
    inner_index_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inner_index_V <= ap_const_lv3_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_230_p2 = ap_const_lv1_0)))) then 
                    inner_index_V <= tmp_4_fu_242_p2;
                end if; 
            end if;
        end if;
    end process;


    -- idx_reg_172 assign process. --
    idx_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and not((base_ddr_addr_BVALID = ap_const_logic_0)))) then 
                idx_reg_172 <= idx_1_reg_330;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                idx_reg_172 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_183 assign process. --
    indvar_flatten_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_230_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_183 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_flatten_fu_270_p2 = ap_const_lv1_0) and not(ap_sig_bdd_207))) then 
                indvar_flatten_reg_183 <= indvar_flatten_next_fu_276_p2;
            end if; 
        end if;
    end process;

    -- indvar_reg_194 assign process. --
    indvar_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_AWREADY)))) then 
                indvar_reg_194 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond3_fu_293_p2))) then 
                indvar_reg_194 <= indvar_next_fu_299_p2;
            end if; 
        end if;
    end process;

    -- offset1_reg_162 assign process. --
    offset1_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and not((base_ddr_addr_BVALID = ap_const_logic_0)))) then 
                offset1_reg_162 <= offset_reg_367;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                offset1_reg_162 <= tmp_1_fu_214_p2(21 downto 3);
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))))) then
                ap_reg_ppstg_exitcond3_reg_348_pp1_it1 <= exitcond3_reg_348;
                exitcond3_reg_348 <= exitcond3_fu_293_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond3_reg_348))) then
                buffer_load_reg_362 <= buffer_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                idx_1_reg_330 <= idx_1_fu_236_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                inner_index_V_load_reg_316 <= inner_index_V;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5)) then
                offset_reg_367 <= offset_fu_310_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, base_ddr_addr_BVALID, exitcond1_fu_230_p2, exitcond_flatten_fu_270_p2, ap_sig_bdd_207, ap_sig_ioackin_base_ddr_addr_AWREADY, exitcond3_fu_293_p2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppstg_exitcond3_reg_348_pp1_it1, ap_sig_ioackin_base_ddr_addr_WREADY, ap_reg_ppiten_pp1_it2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_230_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (((exitcond_flatten_fu_270_p2 = ap_const_lv1_0) and not(ap_sig_bdd_207))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif ((not(ap_sig_bdd_207) and not((exitcond_flatten_fu_270_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_AWREADY))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_pp1_stg0_fsm_4 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond3_fu_293_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond3_fu_293_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_st8_fsm_5 => 
                ap_NS_fsm <= ap_ST_st9_fsm_6;
            when ap_ST_st9_fsm_6 => 
                ap_NS_fsm <= ap_ST_st10_fsm_7;
            when ap_ST_st10_fsm_7 => 
                ap_NS_fsm <= ap_ST_st11_fsm_8;
            when ap_ST_st11_fsm_8 => 
                ap_NS_fsm <= ap_ST_st12_fsm_9;
            when ap_ST_st12_fsm_9 => 
                if (not((base_ddr_addr_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(exitcond1_fu_230_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_230_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond1_fu_230_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_230_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_189 assign process. --
    ap_sig_bdd_189_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_189 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_200 assign process. --
    ap_sig_bdd_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_200 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_207 assign process. --
    ap_sig_bdd_207_assign_proc : process(inputStream_V_TVALID, exitcond_flatten_fu_270_p2)
    begin
                ap_sig_bdd_207 <= ((inputStream_V_TVALID = ap_const_logic_0) and (exitcond_flatten_fu_270_p2 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_217 assign process. --
    ap_sig_bdd_217_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_217 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_230 assign process. --
    ap_sig_bdd_230_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_230 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_266 assign process. --
    ap_sig_bdd_266_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_266 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_28 assign process. --
    ap_sig_bdd_28_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_28 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_285 assign process. --
    ap_sig_bdd_285_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_285 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_317 assign process. --
    ap_sig_bdd_317_assign_proc : process(ap_reg_ppstg_exitcond3_reg_348_pp1_it1, ap_reg_ppiten_pp1_it2)
    begin
                ap_sig_bdd_317 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2));
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_4_assign_proc : process(ap_sig_bdd_230)
    begin
        if (ap_sig_bdd_230) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_9 assign process. --
    ap_sig_cseq_ST_st12_fsm_9_assign_proc : process(ap_sig_bdd_285)
    begin
        if (ap_sig_bdd_285) then 
            ap_sig_cseq_ST_st12_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_28)
    begin
        if (ap_sig_bdd_28) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_189)
    begin
        if (ap_sig_bdd_189) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_200)
    begin
        if (ap_sig_bdd_200) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_217)
    begin
        if (ap_sig_bdd_217) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_5 assign process. --
    ap_sig_cseq_ST_st8_fsm_5_assign_proc : process(ap_sig_bdd_266)
    begin
        if (ap_sig_bdd_266) then 
            ap_sig_cseq_ST_st8_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_base_ddr_addr_AWREADY assign process. --
    ap_sig_ioackin_base_ddr_addr_AWREADY_assign_proc : process(base_ddr_addr_AWREADY, ap_reg_ioackin_base_ddr_addr_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_base_ddr_addr_AWREADY)) then 
            ap_sig_ioackin_base_ddr_addr_AWREADY <= base_ddr_addr_AWREADY;
        else 
            ap_sig_ioackin_base_ddr_addr_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_base_ddr_addr_WREADY assign process. --
    ap_sig_ioackin_base_ddr_addr_WREADY_assign_proc : process(base_ddr_addr_WREADY, ap_reg_ioackin_base_ddr_addr_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_base_ddr_addr_WREADY)) then 
            ap_sig_ioackin_base_ddr_addr_WREADY <= base_ddr_addr_WREADY;
        else 
            ap_sig_ioackin_base_ddr_addr_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    base_ddr_addr_ARADDR <= ap_const_lv32_0;
    base_ddr_addr_ARBURST <= ap_const_lv2_0;
    base_ddr_addr_ARCACHE <= ap_const_lv4_0;
    base_ddr_addr_ARID <= ap_const_lv1_0;
    base_ddr_addr_ARLEN <= ap_const_lv32_0;
    base_ddr_addr_ARLOCK <= ap_const_lv2_0;
    base_ddr_addr_ARPROT <= ap_const_lv3_0;
    base_ddr_addr_ARQOS <= ap_const_lv4_0;
    base_ddr_addr_ARREGION <= ap_const_lv4_0;
    base_ddr_addr_ARSIZE <= ap_const_lv3_0;
    base_ddr_addr_ARUSER <= ap_const_lv1_0;
    base_ddr_addr_ARVALID <= ap_const_logic_0;
    base_ddr_addr_AWADDR <= tmp_fu_282_p1(32 - 1 downto 0);
    base_ddr_addr_AWBURST <= ap_const_lv2_0;
    base_ddr_addr_AWCACHE <= ap_const_lv4_0;
    base_ddr_addr_AWID <= ap_const_lv1_0;
    base_ddr_addr_AWLEN <= ap_const_lv32_200;
    base_ddr_addr_AWLOCK <= ap_const_lv2_0;
    base_ddr_addr_AWPROT <= ap_const_lv3_0;
    base_ddr_addr_AWQOS <= ap_const_lv4_0;
    base_ddr_addr_AWREGION <= ap_const_lv4_0;
    base_ddr_addr_AWSIZE <= ap_const_lv3_0;
    base_ddr_addr_AWUSER <= ap_const_lv1_0;

    -- base_ddr_addr_AWVALID assign process. --
    base_ddr_addr_AWVALID_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_reg_ioackin_base_ddr_addr_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_logic_0 = ap_reg_ioackin_base_ddr_addr_AWREADY))) then 
            base_ddr_addr_AWVALID <= ap_const_logic_1;
        else 
            base_ddr_addr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- base_ddr_addr_BREADY assign process. --
    base_ddr_addr_BREADY_assign_proc : process(base_ddr_addr_BVALID, ap_sig_cseq_ST_st12_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and not((base_ddr_addr_BVALID = ap_const_logic_0)))) then 
            base_ddr_addr_BREADY <= ap_const_logic_1;
        else 
            base_ddr_addr_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    base_ddr_addr_RREADY <= ap_const_logic_0;
    base_ddr_addr_WDATA <= buffer_load_reg_362;
    base_ddr_addr_WID <= ap_const_lv1_0;
    base_ddr_addr_WLAST <= ap_const_logic_0;
    base_ddr_addr_WSTRB <= ap_const_lv8_FF;
    base_ddr_addr_WUSER <= ap_const_lv1_0;

    -- base_ddr_addr_WVALID assign process. --
    base_ddr_addr_WVALID_assign_proc : process(ap_reg_ppstg_exitcond3_reg_348_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ioackin_base_ddr_addr_WREADY)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and (ap_const_logic_0 = ap_reg_ioackin_base_ddr_addr_WREADY))) then 
            base_ddr_addr_WVALID <= ap_const_logic_1;
        else 
            base_ddr_addr_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    buffer_address0 <= tmp_9_fu_305_p1(9 - 1 downto 0);

    -- buffer_ce0 assign process. --
    buffer_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it0, ap_reg_ppstg_exitcond3_reg_348_pp1_it1, ap_sig_ioackin_base_ddr_addr_WREADY, ap_reg_ppiten_pp1_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_348_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))))) then 
            buffer_ce0 <= ap_const_logic_1;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_230_p2 <= "1" when (idx_reg_172 = ap_const_lv7_4B) else "0";
    exitcond3_fu_293_p2 <= "1" when (indvar_reg_194 = ap_const_lv10_200) else "0";
    exitcond_flatten_fu_270_p2 <= "1" when (indvar_flatten_reg_183 = ap_const_lv13_1000) else "0";
    frame_count <= std_logic_vector(unsigned(frame_count_inner) + unsigned(ap_const_lv32_1));

    -- frame_index_V assign process. --
    frame_index_V_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, inner_index_V, frame_index_V_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            frame_index_V <= inner_index_V;
        else 
            frame_index_V <= frame_index_V_preg;
        end if; 
    end process;

    idx_1_fu_236_p2 <= std_logic_vector(unsigned(idx_reg_172) + unsigned(ap_const_lv7_1));
    indvar_flatten_next_fu_276_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_183) + unsigned(ap_const_lv13_1));
    indvar_next_fu_299_p2 <= std_logic_vector(unsigned(indvar_reg_194) + unsigned(ap_const_lv10_1));

    -- inputStream_V_TREADY assign process. --
    inputStream_V_TREADY_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond_flatten_fu_270_p2, ap_sig_bdd_207)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_flatten_fu_270_p2 = ap_const_lv1_0) and not(ap_sig_bdd_207))) then 
            inputStream_V_TREADY <= ap_const_logic_1;
        else 
            inputStream_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    offset_fu_310_p2 <= std_logic_vector(unsigned(offset1_reg_162) + unsigned(ap_const_lv19_200));
    tmp_1_fu_214_p0 <= tmp_1_fu_214_p00(3 - 1 downto 0);
    tmp_1_fu_214_p00 <= std_logic_vector(resize(unsigned(inner_index_V),22));
    tmp_1_fu_214_p2 <= std_logic_vector(resize(unsigned(tmp_1_fu_214_p0) * unsigned(ap_const_lv22_4B000), 22));
    tmp_4_fu_242_p2 <= std_logic_vector(unsigned(inner_index_V_load_reg_316) + unsigned(ap_const_lv3_1));
    tmp_5_fu_257_p2 <= std_logic_vector(unsigned(frame_count_inner) + unsigned(ap_const_lv32_1));
    tmp_9_fu_305_p1 <= std_logic_vector(resize(unsigned(indvar_reg_194),64));
    tmp_fu_282_p1 <= std_logic_vector(resize(unsigned(offset1_reg_162),64));
end behav;
