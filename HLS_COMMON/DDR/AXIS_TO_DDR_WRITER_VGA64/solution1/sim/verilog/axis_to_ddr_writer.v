// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axis_to_ddr_writer,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=185,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=847,HLS_SYN_LUT=1074}" *)

module axis_to_ddr_writer (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inputStream_V_TDATA,
        inputStream_V_TVALID,
        inputStream_V_TREADY,
        m_axi_base_ddr_addr_AWVALID,
        m_axi_base_ddr_addr_AWREADY,
        m_axi_base_ddr_addr_AWADDR,
        m_axi_base_ddr_addr_AWID,
        m_axi_base_ddr_addr_AWLEN,
        m_axi_base_ddr_addr_AWSIZE,
        m_axi_base_ddr_addr_AWBURST,
        m_axi_base_ddr_addr_AWLOCK,
        m_axi_base_ddr_addr_AWCACHE,
        m_axi_base_ddr_addr_AWPROT,
        m_axi_base_ddr_addr_AWQOS,
        m_axi_base_ddr_addr_AWREGION,
        m_axi_base_ddr_addr_AWUSER,
        m_axi_base_ddr_addr_WVALID,
        m_axi_base_ddr_addr_WREADY,
        m_axi_base_ddr_addr_WDATA,
        m_axi_base_ddr_addr_WSTRB,
        m_axi_base_ddr_addr_WLAST,
        m_axi_base_ddr_addr_WID,
        m_axi_base_ddr_addr_WUSER,
        m_axi_base_ddr_addr_ARVALID,
        m_axi_base_ddr_addr_ARREADY,
        m_axi_base_ddr_addr_ARADDR,
        m_axi_base_ddr_addr_ARID,
        m_axi_base_ddr_addr_ARLEN,
        m_axi_base_ddr_addr_ARSIZE,
        m_axi_base_ddr_addr_ARBURST,
        m_axi_base_ddr_addr_ARLOCK,
        m_axi_base_ddr_addr_ARCACHE,
        m_axi_base_ddr_addr_ARPROT,
        m_axi_base_ddr_addr_ARQOS,
        m_axi_base_ddr_addr_ARREGION,
        m_axi_base_ddr_addr_ARUSER,
        m_axi_base_ddr_addr_RVALID,
        m_axi_base_ddr_addr_RREADY,
        m_axi_base_ddr_addr_RDATA,
        m_axi_base_ddr_addr_RLAST,
        m_axi_base_ddr_addr_RID,
        m_axi_base_ddr_addr_RUSER,
        m_axi_base_ddr_addr_RRESP,
        m_axi_base_ddr_addr_BVALID,
        m_axi_base_ddr_addr_BREADY,
        m_axi_base_ddr_addr_BRESP,
        m_axi_base_ddr_addr_BID,
        m_axi_base_ddr_addr_BUSER,
        frame_index_V,
        frame_count
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 10'b1;
parameter    ap_ST_st2_fsm_1 = 10'b10;
parameter    ap_ST_pp0_stg0_fsm_2 = 10'b100;
parameter    ap_ST_st5_fsm_3 = 10'b1000;
parameter    ap_ST_pp1_stg0_fsm_4 = 10'b10000;
parameter    ap_ST_st9_fsm_5 = 10'b100000;
parameter    ap_ST_st10_fsm_6 = 10'b1000000;
parameter    ap_ST_st11_fsm_7 = 10'b10000000;
parameter    ap_ST_st12_fsm_8 = 10'b100000000;
parameter    ap_ST_st13_fsm_9 = 10'b1000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    C_M_AXI_BASE_DDR_ADDR_ID_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH = 64;
parameter    ap_const_int64_8 = 8;
parameter    C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_USER_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_PROT_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE = 3;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv56_0 = 56'b00000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv8_4 = 8'b100;
parameter    ap_true = 1'b1;
parameter    C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH = (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH / ap_const_int64_8);
parameter    C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] inputStream_V_TDATA;
input   inputStream_V_TVALID;
output   inputStream_V_TREADY;
output   m_axi_base_ddr_addr_AWVALID;
input   m_axi_base_ddr_addr_AWREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1 : 0] m_axi_base_ddr_addr_AWADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_AWID;
output  [7:0] m_axi_base_ddr_addr_AWLEN;
output  [2:0] m_axi_base_ddr_addr_AWSIZE;
output  [1:0] m_axi_base_ddr_addr_AWBURST;
output  [1:0] m_axi_base_ddr_addr_AWLOCK;
output  [3:0] m_axi_base_ddr_addr_AWCACHE;
output  [2:0] m_axi_base_ddr_addr_AWPROT;
output  [3:0] m_axi_base_ddr_addr_AWQOS;
output  [3:0] m_axi_base_ddr_addr_AWREGION;
output  [C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_AWUSER;
output   m_axi_base_ddr_addr_WVALID;
input   m_axi_base_ddr_addr_WREADY;
output  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1 : 0] m_axi_base_ddr_addr_WDATA;
output  [C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH - 1 : 0] m_axi_base_ddr_addr_WSTRB;
output   m_axi_base_ddr_addr_WLAST;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_WID;
output  [C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_WUSER;
output   m_axi_base_ddr_addr_ARVALID;
input   m_axi_base_ddr_addr_ARREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1 : 0] m_axi_base_ddr_addr_ARADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_ARID;
output  [7:0] m_axi_base_ddr_addr_ARLEN;
output  [2:0] m_axi_base_ddr_addr_ARSIZE;
output  [1:0] m_axi_base_ddr_addr_ARBURST;
output  [1:0] m_axi_base_ddr_addr_ARLOCK;
output  [3:0] m_axi_base_ddr_addr_ARCACHE;
output  [2:0] m_axi_base_ddr_addr_ARPROT;
output  [3:0] m_axi_base_ddr_addr_ARQOS;
output  [3:0] m_axi_base_ddr_addr_ARREGION;
output  [C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_ARUSER;
input   m_axi_base_ddr_addr_RVALID;
output   m_axi_base_ddr_addr_RREADY;
input  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1 : 0] m_axi_base_ddr_addr_RDATA;
input   m_axi_base_ddr_addr_RLAST;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_RID;
input  [C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_RUSER;
input  [1:0] m_axi_base_ddr_addr_RRESP;
input   m_axi_base_ddr_addr_BVALID;
output   m_axi_base_ddr_addr_BREADY;
input  [1:0] m_axi_base_ddr_addr_BRESP;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_BID;
input  [C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_BUSER;
output  [2:0] frame_index_V;
output  [31:0] frame_count;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inputStream_V_TREADY;
reg[2:0] frame_index_V;
reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm = 10'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_28;
reg   [2:0] inner_index_V = 3'b000;
reg   [31:0] frame_count_inner = 32'b00000000000000000000000000000000;
reg    base_ddr_addr_AWVALID;
wire    base_ddr_addr_AWREADY;
wire   [31:0] base_ddr_addr_AWADDR;
wire   [0:0] base_ddr_addr_AWID;
wire   [31:0] base_ddr_addr_AWLEN;
wire   [2:0] base_ddr_addr_AWSIZE;
wire   [1:0] base_ddr_addr_AWBURST;
wire   [1:0] base_ddr_addr_AWLOCK;
wire   [3:0] base_ddr_addr_AWCACHE;
wire   [2:0] base_ddr_addr_AWPROT;
wire   [3:0] base_ddr_addr_AWQOS;
wire   [3:0] base_ddr_addr_AWREGION;
wire   [0:0] base_ddr_addr_AWUSER;
reg    base_ddr_addr_WVALID;
wire    base_ddr_addr_WREADY;
wire   [63:0] base_ddr_addr_WDATA;
wire   [7:0] base_ddr_addr_WSTRB;
wire    base_ddr_addr_WLAST;
wire   [0:0] base_ddr_addr_WID;
wire   [0:0] base_ddr_addr_WUSER;
wire    base_ddr_addr_ARVALID;
wire    base_ddr_addr_ARREADY;
wire   [31:0] base_ddr_addr_ARADDR;
wire   [0:0] base_ddr_addr_ARID;
wire   [31:0] base_ddr_addr_ARLEN;
wire   [2:0] base_ddr_addr_ARSIZE;
wire   [1:0] base_ddr_addr_ARBURST;
wire   [1:0] base_ddr_addr_ARLOCK;
wire   [3:0] base_ddr_addr_ARCACHE;
wire   [2:0] base_ddr_addr_ARPROT;
wire   [3:0] base_ddr_addr_ARQOS;
wire   [3:0] base_ddr_addr_ARREGION;
wire   [0:0] base_ddr_addr_ARUSER;
wire    base_ddr_addr_RVALID;
wire    base_ddr_addr_RREADY;
wire   [63:0] base_ddr_addr_RDATA;
wire    base_ddr_addr_RLAST;
wire   [0:0] base_ddr_addr_RID;
wire   [0:0] base_ddr_addr_RUSER;
wire   [1:0] base_ddr_addr_RRESP;
wire    base_ddr_addr_BVALID;
reg    base_ddr_addr_BREADY;
wire   [1:0] base_ddr_addr_BRESP;
wire   [0:0] base_ddr_addr_BID;
wire   [0:0] base_ddr_addr_BUSER;
wire    axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce;
reg   [5:0] indvar_flatten_reg_193;
reg   [2:0] j_reg_204;
reg   [63:0] temp_reg_215;
reg   [3:0] i_reg_226;
reg   [2:0] indvar_reg_237;
reg   [2:0] inner_index_V_load_reg_431;
wire   [7:0] offset_cast_fu_261_p1;
wire   [0:0] exitcond1_fu_265_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_197;
wire   [2:0] idx_1_fu_271_p2;
reg   [2:0] idx_1_reg_445;
wire   [0:0] exitcond_flatten_fu_305_p2;
reg   [0:0] exitcond_flatten_reg_450;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_2;
reg    ap_sig_bdd_208;
reg    ap_sig_bdd_214;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [5:0] indvar_flatten_next_fu_311_p2;
wire   [2:0] j_mid2_fu_329_p3;
reg   [2:0] j_mid2_reg_459;
wire   [63:0] temp_2_fu_367_p2;
reg   [63:0] temp_2_reg_465;
wire   [3:0] i_1_fu_379_p3;
reg   [3:0] i_1_reg_471;
wire   [0:0] ifzero_fu_387_p2;
reg   [0:0] ifzero_reg_476;
reg    ap_sig_cseq_ST_st5_fsm_3;
reg    ap_sig_bdd_243;
reg    ap_sig_ioackin_base_ddr_addr_AWREADY;
wire   [0:0] exitcond3_fu_408_p2;
reg   [0:0] exitcond3_reg_485;
reg    ap_sig_cseq_ST_pp1_stg0_fsm_4;
reg    ap_sig_bdd_256;
reg    ap_reg_ppiten_pp1_it0 = 1'b0;
reg    ap_reg_ppiten_pp1_it1 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond3_reg_485_pp1_it1;
reg    ap_sig_ioackin_base_ddr_addr_WREADY;
reg    ap_reg_ppiten_pp1_it2 = 1'b0;
wire   [2:0] indvar_next_fu_414_p2;
wire   [63:0] buffer_q0;
reg   [63:0] buffer_load_reg_499;
wire   [7:0] offset_1_fu_425_p2;
reg   [7:0] offset_1_reg_504;
reg    ap_sig_cseq_ST_st9_fsm_5;
reg    ap_sig_bdd_294;
wire   [1:0] buffer_address0;
reg    buffer_ce0;
wire   [1:0] buffer_address1;
reg    buffer_ce1;
reg    buffer_we1;
wire   [63:0] buffer_d1;
reg   [7:0] offset1_reg_172;
reg    ap_sig_cseq_ST_st13_fsm_9;
reg    ap_sig_bdd_322;
reg   [2:0] idx_reg_182;
reg   [2:0] j_phi_fu_208_p4;
reg   [63:0] temp_phi_fu_219_p4;
reg   [3:0] i_phi_fu_230_p4;
wire   [63:0] tmp_9_fu_393_p1;
wire   [63:0] tmp_7_fu_420_p1;
wire   [63:0] tmp_fu_397_p1;
reg    ap_reg_ioackin_base_ddr_addr_AWREADY = 1'b0;
reg    ap_reg_ioackin_base_ddr_addr_WREADY = 1'b0;
wire   [2:0] tmp_3_fu_277_p2;
wire   [31:0] tmp_4_fu_292_p2;
reg   [2:0] frame_index_V_preg = 3'b000;
wire   [6:0] offset_fu_253_p3;
wire   [0:0] exitcond6_fu_323_p2;
wire   [2:0] j_s_fu_317_p2;
wire   [55:0] tmp_1_fu_345_p4;
wire   [55:0] tmp_5_fu_355_p3;
wire   [63:0] data_fu_337_p3;
wire  signed [63:0] temp_1_fu_363_p1;
wire   [3:0] i_op_fu_373_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_sig_bdd_361;


axis_to_ddr_writer_base_ddr_addr_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BASE_DDR_ADDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_BASE_DDR_ADDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BASE_DDR_ADDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE ))
axis_to_ddr_writer_base_ddr_addr_m_axi_U(
    .AWVALID( m_axi_base_ddr_addr_AWVALID ),
    .AWREADY( m_axi_base_ddr_addr_AWREADY ),
    .AWADDR( m_axi_base_ddr_addr_AWADDR ),
    .AWID( m_axi_base_ddr_addr_AWID ),
    .AWLEN( m_axi_base_ddr_addr_AWLEN ),
    .AWSIZE( m_axi_base_ddr_addr_AWSIZE ),
    .AWBURST( m_axi_base_ddr_addr_AWBURST ),
    .AWLOCK( m_axi_base_ddr_addr_AWLOCK ),
    .AWCACHE( m_axi_base_ddr_addr_AWCACHE ),
    .AWPROT( m_axi_base_ddr_addr_AWPROT ),
    .AWQOS( m_axi_base_ddr_addr_AWQOS ),
    .AWREGION( m_axi_base_ddr_addr_AWREGION ),
    .AWUSER( m_axi_base_ddr_addr_AWUSER ),
    .WVALID( m_axi_base_ddr_addr_WVALID ),
    .WREADY( m_axi_base_ddr_addr_WREADY ),
    .WDATA( m_axi_base_ddr_addr_WDATA ),
    .WSTRB( m_axi_base_ddr_addr_WSTRB ),
    .WLAST( m_axi_base_ddr_addr_WLAST ),
    .WID( m_axi_base_ddr_addr_WID ),
    .WUSER( m_axi_base_ddr_addr_WUSER ),
    .ARVALID( m_axi_base_ddr_addr_ARVALID ),
    .ARREADY( m_axi_base_ddr_addr_ARREADY ),
    .ARADDR( m_axi_base_ddr_addr_ARADDR ),
    .ARID( m_axi_base_ddr_addr_ARID ),
    .ARLEN( m_axi_base_ddr_addr_ARLEN ),
    .ARSIZE( m_axi_base_ddr_addr_ARSIZE ),
    .ARBURST( m_axi_base_ddr_addr_ARBURST ),
    .ARLOCK( m_axi_base_ddr_addr_ARLOCK ),
    .ARCACHE( m_axi_base_ddr_addr_ARCACHE ),
    .ARPROT( m_axi_base_ddr_addr_ARPROT ),
    .ARQOS( m_axi_base_ddr_addr_ARQOS ),
    .ARREGION( m_axi_base_ddr_addr_ARREGION ),
    .ARUSER( m_axi_base_ddr_addr_ARUSER ),
    .RVALID( m_axi_base_ddr_addr_RVALID ),
    .RREADY( m_axi_base_ddr_addr_RREADY ),
    .RDATA( m_axi_base_ddr_addr_RDATA ),
    .RLAST( m_axi_base_ddr_addr_RLAST ),
    .RID( m_axi_base_ddr_addr_RID ),
    .RUSER( m_axi_base_ddr_addr_RUSER ),
    .RRESP( m_axi_base_ddr_addr_RRESP ),
    .BVALID( m_axi_base_ddr_addr_BVALID ),
    .BREADY( m_axi_base_ddr_addr_BREADY ),
    .BRESP( m_axi_base_ddr_addr_BRESP ),
    .BID( m_axi_base_ddr_addr_BID ),
    .BUSER( m_axi_base_ddr_addr_BUSER ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce ),
    .I_ARVALID( base_ddr_addr_ARVALID ),
    .I_ARREADY( base_ddr_addr_ARREADY ),
    .I_ARADDR( base_ddr_addr_ARADDR ),
    .I_ARID( base_ddr_addr_ARID ),
    .I_ARLEN( base_ddr_addr_ARLEN ),
    .I_ARSIZE( base_ddr_addr_ARSIZE ),
    .I_ARLOCK( base_ddr_addr_ARLOCK ),
    .I_ARCACHE( base_ddr_addr_ARCACHE ),
    .I_ARQOS( base_ddr_addr_ARQOS ),
    .I_ARPROT( base_ddr_addr_ARPROT ),
    .I_ARUSER( base_ddr_addr_ARUSER ),
    .I_ARBURST( base_ddr_addr_ARBURST ),
    .I_ARREGION( base_ddr_addr_ARREGION ),
    .I_RVALID( base_ddr_addr_RVALID ),
    .I_RREADY( base_ddr_addr_RREADY ),
    .I_RDATA( base_ddr_addr_RDATA ),
    .I_RID( base_ddr_addr_RID ),
    .I_RUSER( base_ddr_addr_RUSER ),
    .I_RRESP( base_ddr_addr_RRESP ),
    .I_RLAST( base_ddr_addr_RLAST ),
    .I_AWVALID( base_ddr_addr_AWVALID ),
    .I_AWREADY( base_ddr_addr_AWREADY ),
    .I_AWADDR( base_ddr_addr_AWADDR ),
    .I_AWID( base_ddr_addr_AWID ),
    .I_AWLEN( base_ddr_addr_AWLEN ),
    .I_AWSIZE( base_ddr_addr_AWSIZE ),
    .I_AWLOCK( base_ddr_addr_AWLOCK ),
    .I_AWCACHE( base_ddr_addr_AWCACHE ),
    .I_AWQOS( base_ddr_addr_AWQOS ),
    .I_AWPROT( base_ddr_addr_AWPROT ),
    .I_AWUSER( base_ddr_addr_AWUSER ),
    .I_AWBURST( base_ddr_addr_AWBURST ),
    .I_AWREGION( base_ddr_addr_AWREGION ),
    .I_WVALID( base_ddr_addr_WVALID ),
    .I_WREADY( base_ddr_addr_WREADY ),
    .I_WDATA( base_ddr_addr_WDATA ),
    .I_WID( base_ddr_addr_WID ),
    .I_WUSER( base_ddr_addr_WUSER ),
    .I_WLAST( base_ddr_addr_WLAST ),
    .I_WSTRB( base_ddr_addr_WSTRB ),
    .I_BVALID( base_ddr_addr_BVALID ),
    .I_BREADY( base_ddr_addr_BREADY ),
    .I_BRESP( base_ddr_addr_BRESP ),
    .I_BID( base_ddr_addr_BID ),
    .I_BUSER( base_ddr_addr_BUSER )
);

axis_to_ddr_writer_buffer #(
    .DataWidth( 64 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
buffer_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .address0( buffer_address0 ),
    .ce0( buffer_ce0 ),
    .q0( buffer_q0 ),
    .address1( buffer_address1 ),
    .ce1( buffer_ce1 ),
    .we1( buffer_we1 ),
    .d1( buffer_d1 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_base_ddr_addr_AWREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_base_ddr_addr_AWREADY <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_3)) begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_AWREADY)) begin
                ap_reg_ioackin_base_ddr_addr_AWREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == base_ddr_addr_AWREADY)) begin
                ap_reg_ioackin_base_ddr_addr_AWREADY <= ap_const_logic_1;
            end
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_base_ddr_addr_WREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_base_ddr_addr_WREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_361) begin
            if (~((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2))) begin
                ap_reg_ioackin_base_ddr_addr_WREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == base_ddr_addr_WREADY)) begin
                ap_reg_ioackin_base_ddr_addr_WREADY <= ap_const_logic_1;
            end
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & ~(exitcond_flatten_fu_305_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_265_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_fu_305_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_265_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & ~(exitcond_flatten_fu_305_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond3_fu_408_p2))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_3) & ~(ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_AWREADY))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & (ap_const_lv1_0 == exitcond3_fu_408_p2))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_3) & ~(ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_AWREADY)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond3_fu_408_p2)))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
    end else begin
        if (~((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2))) begin
            ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_3) & ~(ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_AWREADY))) begin
            ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_frame_count_inner
    if (ap_rst_n_inv == 1'b1) begin
        frame_count_inner <= ap_const_lv32_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_265_p2 == ap_const_lv1_0))) begin
            frame_count_inner <= tmp_4_fu_292_p2;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_frame_index_V_preg
    if (ap_rst_n_inv == 1'b1) begin
        frame_index_V_preg <= ap_const_lv3_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            frame_index_V_preg <= inner_index_V;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_inner_index_V
    if (ap_rst_n_inv == 1'b1) begin
        inner_index_V <= ap_const_lv3_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_265_p2 == ap_const_lv1_0))) begin
            inner_index_V <= tmp_3_fu_277_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_265_p2 == ap_const_lv1_0))) begin
        i_reg_226 <= ap_const_lv4_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & (exitcond_flatten_reg_450 == ap_const_lv1_0))) begin
        i_reg_226 <= i_1_reg_471;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_9) & ~(base_ddr_addr_BVALID == ap_const_logic_0))) begin
        idx_reg_182 <= idx_1_reg_445;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        idx_reg_182 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_265_p2 == ap_const_lv1_0))) begin
        indvar_flatten_reg_193 <= ap_const_lv6_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_fu_305_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)))) begin
        indvar_flatten_reg_193 <= indvar_flatten_next_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_3) & ~(ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_AWREADY))) begin
        indvar_reg_237 <= ap_const_lv3_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & (ap_const_lv1_0 == exitcond3_fu_408_p2))) begin
        indvar_reg_237 <= indvar_next_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_265_p2 == ap_const_lv1_0))) begin
        j_reg_204 <= ap_const_lv3_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & (exitcond_flatten_reg_450 == ap_const_lv1_0))) begin
        j_reg_204 <= j_mid2_reg_459;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_9) & ~(base_ddr_addr_BVALID == ap_const_logic_0))) begin
        offset1_reg_172 <= offset_1_reg_504;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        offset1_reg_172 <= offset_cast_fu_261_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_265_p2 == ap_const_lv1_0))) begin
        temp_reg_215 <= ap_const_lv64_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & (exitcond_flatten_reg_450 == ap_const_lv1_0))) begin
        temp_reg_215 <= temp_2_reg_465;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)))) begin
        ap_reg_ppstg_exitcond3_reg_485_pp1_it1 <= exitcond3_reg_485;
        exitcond3_reg_485 <= exitcond3_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & (ap_const_lv1_0 == exitcond3_reg_485))) begin
        buffer_load_reg_499 <= buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)))) begin
        exitcond_flatten_reg_450 <= exitcond_flatten_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_fu_305_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)))) begin
        i_1_reg_471 <= i_1_fu_379_p3;
        j_mid2_reg_459 <= j_mid2_fu_329_p3;
        temp_2_reg_465 <= temp_2_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        idx_1_reg_445 <= idx_1_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_fu_305_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)))) begin
        ifzero_reg_476 <= ifzero_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        inner_index_V_load_reg_431 <= inner_index_V;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_5)) begin
        offset_1_reg_504 <= offset_1_fu_425_p2;
    end
end

always @ (exitcond1_fu_265_p2 or ap_sig_cseq_ST_st2_fsm_1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_265_p2 == ap_const_lv1_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (exitcond1_fu_265_p2 or ap_sig_cseq_ST_st2_fsm_1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_265_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_208) begin
    if (ap_sig_bdd_208) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_256) begin
    if (ap_sig_bdd_256) begin
        ap_sig_cseq_ST_pp1_stg0_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp1_stg0_fsm_4 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_322) begin
    if (ap_sig_bdd_322) begin
        ap_sig_cseq_ST_st13_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_9 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_28) begin
    if (ap_sig_bdd_28) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_197) begin
    if (ap_sig_bdd_197) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_243) begin
    if (ap_sig_bdd_243) begin
        ap_sig_cseq_ST_st5_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_294) begin
    if (ap_sig_bdd_294) begin
        ap_sig_cseq_ST_st9_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_5 = ap_const_logic_0;
    end
end

always @ (base_ddr_addr_AWREADY or ap_reg_ioackin_base_ddr_addr_AWREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_base_ddr_addr_AWREADY)) begin
        ap_sig_ioackin_base_ddr_addr_AWREADY = base_ddr_addr_AWREADY;
    end else begin
        ap_sig_ioackin_base_ddr_addr_AWREADY = ap_const_logic_1;
    end
end

always @ (base_ddr_addr_WREADY or ap_reg_ioackin_base_ddr_addr_WREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_base_ddr_addr_WREADY)) begin
        ap_sig_ioackin_base_ddr_addr_WREADY = base_ddr_addr_WREADY;
    end else begin
        ap_sig_ioackin_base_ddr_addr_WREADY = ap_const_logic_1;
    end
end

always @ (ap_sig_cseq_ST_st5_fsm_3 or ap_reg_ioackin_base_ddr_addr_AWREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_3) & (ap_const_logic_0 == ap_reg_ioackin_base_ddr_addr_AWREADY))) begin
        base_ddr_addr_AWVALID = ap_const_logic_1;
    end else begin
        base_ddr_addr_AWVALID = ap_const_logic_0;
    end
end

always @ (base_ddr_addr_BVALID or ap_sig_cseq_ST_st13_fsm_9) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_9) & ~(base_ddr_addr_BVALID == ap_const_logic_0))) begin
        base_ddr_addr_BREADY = ap_const_logic_1;
    end else begin
        base_ddr_addr_BREADY = ap_const_logic_0;
    end
end

always @ (ap_reg_ppstg_exitcond3_reg_485_pp1_it1 or ap_reg_ppiten_pp1_it2 or ap_reg_ioackin_base_ddr_addr_WREADY) begin
    if (((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & (ap_const_logic_0 == ap_reg_ioackin_base_ddr_addr_WREADY))) begin
        base_ddr_addr_WVALID = ap_const_logic_1;
    end else begin
        base_ddr_addr_WVALID = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp1_stg0_fsm_4 or ap_reg_ppiten_pp1_it0 or ap_reg_ppstg_exitcond3_reg_485_pp1_it1 or ap_sig_ioackin_base_ddr_addr_WREADY or ap_reg_ppiten_pp1_it2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)))) begin
        buffer_ce0 = ap_const_logic_1;
    end else begin
        buffer_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_sig_bdd_214 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)))) begin
        buffer_ce1 = ap_const_logic_1;
    end else begin
        buffer_ce1 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_sig_bdd_214 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ifzero_reg_476) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & ~(ap_const_lv1_0 == ifzero_reg_476))) begin
        buffer_we1 = ap_const_logic_1;
    end else begin
        buffer_we1 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or inner_index_V or frame_index_V_preg) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        frame_index_V = inner_index_V;
    end else begin
        frame_index_V = frame_index_V_preg;
    end
end

always @ (i_reg_226 or exitcond_flatten_reg_450 or ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it1 or i_1_reg_471) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_450 == ap_const_lv1_0))) begin
        i_phi_fu_230_p4 = i_1_reg_471;
    end else begin
        i_phi_fu_230_p4 = i_reg_226;
    end
end

always @ (exitcond_flatten_fu_305_p2 or ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_sig_bdd_214 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_fu_305_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)))) begin
        inputStream_V_TREADY = ap_const_logic_1;
    end else begin
        inputStream_V_TREADY = ap_const_logic_0;
    end
end

always @ (j_reg_204 or exitcond_flatten_reg_450 or ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it1 or j_mid2_reg_459) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_450 == ap_const_lv1_0))) begin
        j_phi_fu_208_p4 = j_mid2_reg_459;
    end else begin
        j_phi_fu_208_p4 = j_reg_204;
    end
end

always @ (temp_reg_215 or exitcond_flatten_reg_450 or ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it1 or temp_2_reg_465) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_450 == ap_const_lv1_0))) begin
        temp_phi_fu_219_p4 = temp_2_reg_465;
    end else begin
        temp_phi_fu_219_p4 = temp_reg_215;
    end
end
always @ (ap_start or ap_CS_fsm or base_ddr_addr_BVALID or exitcond1_fu_265_p2 or exitcond_flatten_fu_305_p2 or ap_sig_bdd_214 or ap_reg_ppiten_pp0_it0 or ap_sig_ioackin_base_ddr_addr_AWREADY or exitcond3_fu_408_p2 or ap_reg_ppiten_pp1_it0 or ap_reg_ppiten_pp1_it1 or ap_reg_ppstg_exitcond3_reg_485_pp1_it1 or ap_sig_ioackin_base_ddr_addr_WREADY or ap_reg_ppiten_pp1_it2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond1_fu_265_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        end
        ap_ST_pp0_stg0_fsm_2 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & ~(exitcond_flatten_fu_305_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_214 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & ~(exitcond_flatten_fu_305_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st5_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        end
        ap_ST_st5_fsm_3 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_AWREADY)) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_3;
            end
        end
        ap_ST_pp1_stg0_fsm_4 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond3_fu_408_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_4;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond3_fu_408_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_st9_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_4;
            end
        end
        ap_ST_st9_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_6;
        end
        ap_ST_st10_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_7;
        end
        ap_ST_st11_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_8;
        end
        ap_ST_st12_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_9;
        end
        ap_ST_st13_fsm_9 : 
        begin
            if (~(base_ddr_addr_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st13_fsm_9;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_197 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_208 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (inputStream_V_TVALID or exitcond_flatten_fu_305_p2) begin
    ap_sig_bdd_214 = ((inputStream_V_TVALID == ap_const_logic_0) & (exitcond_flatten_fu_305_p2 == ap_const_lv1_0));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_243 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_256 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_28 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_294 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_322 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end


always @ (ap_reg_ppstg_exitcond3_reg_485_pp1_it1 or ap_reg_ppiten_pp1_it2) begin
    ap_sig_bdd_361 = ((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_485_pp1_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2));
end

assign axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce = ap_const_logic_1;

assign base_ddr_addr_ARADDR = ap_const_lv32_0;

assign base_ddr_addr_ARBURST = ap_const_lv2_0;

assign base_ddr_addr_ARCACHE = ap_const_lv4_0;

assign base_ddr_addr_ARID = ap_const_lv1_0;

assign base_ddr_addr_ARLEN = ap_const_lv32_0;

assign base_ddr_addr_ARLOCK = ap_const_lv2_0;

assign base_ddr_addr_ARPROT = ap_const_lv3_0;

assign base_ddr_addr_ARQOS = ap_const_lv4_0;

assign base_ddr_addr_ARREGION = ap_const_lv4_0;

assign base_ddr_addr_ARSIZE = ap_const_lv3_0;

assign base_ddr_addr_ARUSER = ap_const_lv1_0;

assign base_ddr_addr_ARVALID = ap_const_logic_0;

assign base_ddr_addr_AWADDR = tmp_fu_397_p1;

assign base_ddr_addr_AWBURST = ap_const_lv2_0;

assign base_ddr_addr_AWCACHE = ap_const_lv4_0;

assign base_ddr_addr_AWID = ap_const_lv1_0;

assign base_ddr_addr_AWLEN = ap_const_lv32_4;

assign base_ddr_addr_AWLOCK = ap_const_lv2_0;

assign base_ddr_addr_AWPROT = ap_const_lv3_0;

assign base_ddr_addr_AWQOS = ap_const_lv4_0;

assign base_ddr_addr_AWREGION = ap_const_lv4_0;

assign base_ddr_addr_AWSIZE = ap_const_lv3_0;

assign base_ddr_addr_AWUSER = ap_const_lv1_0;

assign base_ddr_addr_RREADY = ap_const_logic_0;

assign base_ddr_addr_WDATA = buffer_load_reg_499;

assign base_ddr_addr_WID = ap_const_lv1_0;

assign base_ddr_addr_WLAST = ap_const_logic_0;

assign base_ddr_addr_WSTRB = ap_const_lv8_FF;

assign base_ddr_addr_WUSER = ap_const_lv1_0;

assign buffer_address0 = tmp_7_fu_420_p1;

assign buffer_address1 = tmp_9_fu_393_p1;

assign buffer_d1 = temp_2_reg_465;

assign data_fu_337_p3 = {{inputStream_V_TDATA}, {ap_const_lv56_0}};

assign exitcond1_fu_265_p2 = (idx_reg_182 == ap_const_lv3_4? 1'b1: 1'b0);

assign exitcond3_fu_408_p2 = (indvar_reg_237 == ap_const_lv3_4? 1'b1: 1'b0);

assign exitcond6_fu_323_p2 = (i_phi_fu_230_p4 == ap_const_lv4_8? 1'b1: 1'b0);

assign exitcond_flatten_fu_305_p2 = (indvar_flatten_reg_193 == ap_const_lv6_20? 1'b1: 1'b0);

assign frame_count = (frame_count_inner + ap_const_lv32_1);

assign i_1_fu_379_p3 = ((exitcond6_fu_323_p2[0:0] === 1'b1) ? ap_const_lv4_1 : i_op_fu_373_p2);

assign i_op_fu_373_p2 = (i_phi_fu_230_p4 + ap_const_lv4_1);

assign idx_1_fu_271_p2 = (idx_reg_182 + ap_const_lv3_1);

assign ifzero_fu_387_p2 = (i_1_fu_379_p3 == ap_const_lv4_8? 1'b1: 1'b0);

assign indvar_flatten_next_fu_311_p2 = (indvar_flatten_reg_193 + ap_const_lv6_1);

assign indvar_next_fu_414_p2 = (indvar_reg_237 + ap_const_lv3_1);

assign j_mid2_fu_329_p3 = ((exitcond6_fu_323_p2[0:0] === 1'b1) ? j_s_fu_317_p2 : j_phi_fu_208_p4);

assign j_s_fu_317_p2 = (j_phi_fu_208_p4 + ap_const_lv3_1);

assign offset_1_fu_425_p2 = (offset1_reg_172 + ap_const_lv8_4);

assign offset_cast_fu_261_p1 = offset_fu_253_p3;

assign offset_fu_253_p3 = {{inner_index_V}, {ap_const_lv4_0}};

assign temp_1_fu_363_p1 = $signed(tmp_5_fu_355_p3);

assign temp_2_fu_367_p2 = ($signed(data_fu_337_p3) + $signed(temp_1_fu_363_p1));

assign tmp_1_fu_345_p4 = {{temp_phi_fu_219_p4[ap_const_lv32_3F : ap_const_lv32_8]}};

assign tmp_3_fu_277_p2 = (inner_index_V_load_reg_431 + ap_const_lv3_1);

assign tmp_4_fu_292_p2 = (frame_count_inner + ap_const_lv32_1);

assign tmp_5_fu_355_p3 = ((exitcond6_fu_323_p2[0:0] === 1'b1) ? ap_const_lv56_0 : tmp_1_fu_345_p4);

assign tmp_7_fu_420_p1 = indvar_reg_237;

assign tmp_9_fu_393_p1 = j_mid2_reg_459;

assign tmp_fu_397_p1 = offset1_reg_172;


endmodule //axis_to_ddr_writer

