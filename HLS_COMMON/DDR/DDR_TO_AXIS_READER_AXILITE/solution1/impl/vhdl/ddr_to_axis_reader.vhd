-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ddr_to_axis_reader is
generic (
    C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BASE_DDR_ADDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_BASE_DDR_ADDR_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    outStream_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_V_TVALID : OUT STD_LOGIC;
    outStream_V_TREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_AWVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_AWREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_base_ddr_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_WREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH/8-1 downto 0);
    m_axi_base_ddr_addr_WLAST : OUT STD_LOGIC;
    m_axi_base_ddr_addr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_ARREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_base_ddr_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RVALID : IN STD_LOGIC;
    m_axi_base_ddr_addr_RREADY : OUT STD_LOGIC;
    m_axi_base_ddr_addr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RLAST : IN STD_LOGIC;
    m_axi_base_ddr_addr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_BVALID : IN STD_LOGIC;
    m_axi_base_ddr_addr_BREADY : OUT STD_LOGIC;
    m_axi_base_ddr_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH-1 downto 0);
    frame_index_V : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of ddr_to_axis_reader is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ddr_to_axis_reader,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=1226,HLS_SYN_LUT=1898}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_pp0_stg0_fsm_12 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_pp1_stg0_fsm_13 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_st19_fsm_14 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_33 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal base_address : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_dim : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_number : STD_LOGIC_VECTOR (7 downto 0);
    signal update_intr : STD_LOGIC;
    signal FRAME_OFFSET : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001001011000000000000";
    signal FRAME_BUFFER_NUMBER_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    signal BASE_ADDRESS_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    signal FRAME_BUFFER_DIM_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001001011000000000000";
    signal ddr_to_axis_reader_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal base_ddr_addr_AWVALID : STD_LOGIC;
    signal base_ddr_addr_AWREADY : STD_LOGIC;
    signal base_ddr_addr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal base_ddr_addr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal base_ddr_addr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal base_ddr_addr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal base_ddr_addr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal base_ddr_addr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal base_ddr_addr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal base_ddr_addr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_WVALID : STD_LOGIC;
    signal base_ddr_addr_WREADY : STD_LOGIC;
    signal base_ddr_addr_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal base_ddr_addr_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal base_ddr_addr_WLAST : STD_LOGIC;
    signal base_ddr_addr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_ARVALID : STD_LOGIC;
    signal base_ddr_addr_ARREADY : STD_LOGIC;
    signal base_ddr_addr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal base_ddr_addr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal base_ddr_addr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal base_ddr_addr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal base_ddr_addr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal base_ddr_addr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal base_ddr_addr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal base_ddr_addr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_RVALID : STD_LOGIC;
    signal base_ddr_addr_RREADY : STD_LOGIC;
    signal base_ddr_addr_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal base_ddr_addr_RLAST : STD_LOGIC;
    signal base_ddr_addr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_BVALID : STD_LOGIC;
    signal base_ddr_addr_BREADY : STD_LOGIC;
    signal base_ddr_addr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_to_axis_reader_base_ddr_addr_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal indvar_reg_275 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_ppstg_indvar_reg_275_pp0_it1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_228 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond1_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_237 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal j_reg_287 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal update_intr_read_read_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inner_index_V_1_fu_372_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal inner_index_V_1_reg_637 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_271 : BOOLEAN;
    signal tmp_s_reg_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_282 : BOOLEAN;
    signal offset_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_291 : BOOLEAN;
    signal i_1_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_300 : BOOLEAN;
    signal tmp_7_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_base_ddr_addr_ARREADY : STD_LOGIC;
    signal exitcond1_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_676_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_453_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_next_reg_680 : STD_LOGIC_VECTOR (9 downto 0);
    signal base_ddr_addr_addr_read_reg_685 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_330 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_690_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_outStream_V_TREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal j_1_fu_470_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_12_fu_476_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_reg_699 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_20_fu_550_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_reg_709 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_fu_558_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_reg_714 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_566_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_reg_719 : STD_LOGIC_VECTOR (6 downto 0);
    signal offset_1_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_372 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_379 : BOOLEAN;
    signal buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_ce1 : STD_LOGIC;
    signal buffer_we1 : STD_LOGIC;
    signal buffer_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_phi_fu_229_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_1_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset1_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_phi_fu_279_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2_cast_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_base_ddr_addr_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_outStream_V_TREADY : STD_LOGIC := '0';
    signal tmp_2_fu_334_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_360_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_fu_364_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_385_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_385_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_6_fu_410_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_8_fu_420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gepindex_cast_fu_480_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal start_pos_fu_495_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal end_pos_fu_502_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_514_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_fu_518_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_532_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_544_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_fu_522_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_538_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_574_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_586_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_591_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_597_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_385_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_385_p00 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_385_p10 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_sig_bdd_434 : BOOLEAN;
    signal ap_sig_bdd_455 : BOOLEAN;
    signal ap_sig_bdd_252 : BOOLEAN;

    component ddr_to_axis_reader_mul_8ns_32ns_40_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component ddr_to_axis_reader_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ddr_to_axis_reader_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        base_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer_dim : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer_number : OUT STD_LOGIC_VECTOR (7 downto 0);
        update_intr : OUT STD_LOGIC );
    end component;


    component ddr_to_axis_reader_base_ddr_addr_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ddr_to_axis_reader_AXILiteS_s_axi_U : component ddr_to_axis_reader_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ddr_to_axis_reader_AXILiteS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        base_address => base_address,
        frame_buffer_dim => frame_buffer_dim,
        frame_buffer_offset => frame_buffer_offset,
        frame_buffer_number => frame_buffer_number,
        update_intr => update_intr);

    ddr_to_axis_reader_base_ddr_addr_m_axi_U : component ddr_to_axis_reader_base_ddr_addr_m_axi
    generic map (
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_BASE_DDR_ADDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_BASE_DDR_ADDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BASE_DDR_ADDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_base_ddr_addr_AWVALID,
        AWREADY => m_axi_base_ddr_addr_AWREADY,
        AWADDR => m_axi_base_ddr_addr_AWADDR,
        AWID => m_axi_base_ddr_addr_AWID,
        AWLEN => m_axi_base_ddr_addr_AWLEN,
        AWSIZE => m_axi_base_ddr_addr_AWSIZE,
        AWBURST => m_axi_base_ddr_addr_AWBURST,
        AWLOCK => m_axi_base_ddr_addr_AWLOCK,
        AWCACHE => m_axi_base_ddr_addr_AWCACHE,
        AWPROT => m_axi_base_ddr_addr_AWPROT,
        AWQOS => m_axi_base_ddr_addr_AWQOS,
        AWREGION => m_axi_base_ddr_addr_AWREGION,
        AWUSER => m_axi_base_ddr_addr_AWUSER,
        WVALID => m_axi_base_ddr_addr_WVALID,
        WREADY => m_axi_base_ddr_addr_WREADY,
        WDATA => m_axi_base_ddr_addr_WDATA,
        WSTRB => m_axi_base_ddr_addr_WSTRB,
        WLAST => m_axi_base_ddr_addr_WLAST,
        WID => m_axi_base_ddr_addr_WID,
        WUSER => m_axi_base_ddr_addr_WUSER,
        ARVALID => m_axi_base_ddr_addr_ARVALID,
        ARREADY => m_axi_base_ddr_addr_ARREADY,
        ARADDR => m_axi_base_ddr_addr_ARADDR,
        ARID => m_axi_base_ddr_addr_ARID,
        ARLEN => m_axi_base_ddr_addr_ARLEN,
        ARSIZE => m_axi_base_ddr_addr_ARSIZE,
        ARBURST => m_axi_base_ddr_addr_ARBURST,
        ARLOCK => m_axi_base_ddr_addr_ARLOCK,
        ARCACHE => m_axi_base_ddr_addr_ARCACHE,
        ARPROT => m_axi_base_ddr_addr_ARPROT,
        ARQOS => m_axi_base_ddr_addr_ARQOS,
        ARREGION => m_axi_base_ddr_addr_ARREGION,
        ARUSER => m_axi_base_ddr_addr_ARUSER,
        RVALID => m_axi_base_ddr_addr_RVALID,
        RREADY => m_axi_base_ddr_addr_RREADY,
        RDATA => m_axi_base_ddr_addr_RDATA,
        RLAST => m_axi_base_ddr_addr_RLAST,
        RID => m_axi_base_ddr_addr_RID,
        RUSER => m_axi_base_ddr_addr_RUSER,
        RRESP => m_axi_base_ddr_addr_RRESP,
        BVALID => m_axi_base_ddr_addr_BVALID,
        BREADY => m_axi_base_ddr_addr_BREADY,
        BRESP => m_axi_base_ddr_addr_BRESP,
        BID => m_axi_base_ddr_addr_BID,
        BUSER => m_axi_base_ddr_addr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ddr_to_axis_reader_base_ddr_addr_m_axi_U_ap_dummy_ce,
        I_ARVALID => base_ddr_addr_ARVALID,
        I_ARREADY => base_ddr_addr_ARREADY,
        I_ARADDR => base_ddr_addr_ARADDR,
        I_ARID => base_ddr_addr_ARID,
        I_ARLEN => base_ddr_addr_ARLEN,
        I_ARSIZE => base_ddr_addr_ARSIZE,
        I_ARLOCK => base_ddr_addr_ARLOCK,
        I_ARCACHE => base_ddr_addr_ARCACHE,
        I_ARQOS => base_ddr_addr_ARQOS,
        I_ARPROT => base_ddr_addr_ARPROT,
        I_ARUSER => base_ddr_addr_ARUSER,
        I_ARBURST => base_ddr_addr_ARBURST,
        I_ARREGION => base_ddr_addr_ARREGION,
        I_RVALID => base_ddr_addr_RVALID,
        I_RREADY => base_ddr_addr_RREADY,
        I_RDATA => base_ddr_addr_RDATA,
        I_RID => base_ddr_addr_RID,
        I_RUSER => base_ddr_addr_RUSER,
        I_RRESP => base_ddr_addr_RRESP,
        I_RLAST => base_ddr_addr_RLAST,
        I_AWVALID => base_ddr_addr_AWVALID,
        I_AWREADY => base_ddr_addr_AWREADY,
        I_AWADDR => base_ddr_addr_AWADDR,
        I_AWID => base_ddr_addr_AWID,
        I_AWLEN => base_ddr_addr_AWLEN,
        I_AWSIZE => base_ddr_addr_AWSIZE,
        I_AWLOCK => base_ddr_addr_AWLOCK,
        I_AWCACHE => base_ddr_addr_AWCACHE,
        I_AWQOS => base_ddr_addr_AWQOS,
        I_AWPROT => base_ddr_addr_AWPROT,
        I_AWUSER => base_ddr_addr_AWUSER,
        I_AWBURST => base_ddr_addr_AWBURST,
        I_AWREGION => base_ddr_addr_AWREGION,
        I_WVALID => base_ddr_addr_WVALID,
        I_WREADY => base_ddr_addr_WREADY,
        I_WDATA => base_ddr_addr_WDATA,
        I_WID => base_ddr_addr_WID,
        I_WUSER => base_ddr_addr_WUSER,
        I_WLAST => base_ddr_addr_WLAST,
        I_WSTRB => base_ddr_addr_WSTRB,
        I_BVALID => base_ddr_addr_BVALID,
        I_BREADY => base_ddr_addr_BREADY,
        I_BRESP => base_ddr_addr_BRESP,
        I_BID => base_ddr_addr_BID,
        I_BUSER => base_ddr_addr_BUSER);

    buffer_U : component ddr_to_axis_reader_buffer
    generic map (
        DataWidth => 64,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        q0 => buffer_q0,
        address1 => buffer_address1,
        ce1 => buffer_ce1,
        we1 => buffer_we1,
        d1 => buffer_d1);

    ddr_to_axis_reader_mul_8ns_32ns_40_3_U0 : component ddr_to_axis_reader_mul_8ns_32ns_40_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_385_p0,
        din1 => grp_fu_385_p1,
        ce => grp_fu_385_ce,
        dout => grp_fu_385_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_base_ddr_addr_ARREADY assign process. --
    ap_reg_ioackin_base_ddr_addr_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_434) then
                    if (not((not((ap_const_lv1_0 = tmp_7_fu_424_p2)) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_ARREADY)))) then 
                        ap_reg_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = base_ddr_addr_ARREADY)) then 
                        ap_reg_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_outStream_V_TREADY assign process. --
    ap_reg_ioackin_outStream_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_outStream_V_TREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_455) then
                    if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_outStream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))) then 
                        ap_reg_ioackin_outStream_V_TREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = outStream_V_TREADY)) then 
                        ap_reg_ioackin_outStream_V_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_12) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_447_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_12) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond1_fu_447_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_12) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_447_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_outStream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond_fu_464_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_12) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_447_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_outStream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond_fu_464_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_12) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_447_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_outStream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond_fu_464_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_outStream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_12) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_447_p2)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_op_assign_1_reg_244 assign process. --
    i_op_assign_1_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_252) then
                if ((ap_const_lv1_0 = update_intr_read_read_fu_150_p2)) then 
                                        i_op_assign_1_reg_244(28 downto 0) <= BASE_ADDRESS_r(28 downto 0);
                elsif (not((ap_const_lv1_0 = update_intr_read_read_fu_150_p2))) then 
                                        i_op_assign_1_reg_244(28 downto 0) <= tmp_5_fu_344_p1(28 downto 0);
                end if;
            end if; 
        end if;
    end process;

    -- i_op_assign_reg_235 assign process. --
    i_op_assign_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_252) then
                if ((ap_const_lv1_0 = update_intr_read_read_fu_150_p2)) then 
                    i_op_assign_reg_235 <= FRAME_OFFSET;
                elsif (not((ap_const_lv1_0 = update_intr_read_read_fu_150_p2))) then 
                    i_op_assign_reg_235 <= frame_buffer_offset;
                end if;
            end if; 
        end if;
    end process;

    -- i_reg_264 assign process. --
    i_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_14)) then 
                i_reg_264 <= i_1_reg_665;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                i_reg_264 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- indvar_reg_275 assign process. --
    indvar_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                indvar_reg_275 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_12) and (exitcond1_reg_676 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                indvar_reg_275 <= indvar_next_reg_680;
            end if; 
        end if;
    end process;

    -- j_reg_287 assign process. --
    j_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_12) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_447_p2)))) then 
                j_reg_287 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_outStream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond_fu_464_p2))) then 
                j_reg_287 <= j_1_fu_470_p2;
            end if; 
        end if;
    end process;

    -- offset1_reg_254 assign process. --
    offset1_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_14)) then 
                offset1_reg_254 <= offset_1_fu_608_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                offset1_reg_254 <= offset_fu_401_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = update_intr_read_read_fu_150_p2)))) then
                    BASE_ADDRESS_r(28 downto 0) <= tmp_5_fu_344_p1(28 downto 0);
                FRAME_BUFFER_DIM_r <= frame_buffer_dim;
                    FRAME_BUFFER_NUMBER_r(7 downto 0) <= tmp_1_fu_298_p1(7 downto 0);
                FRAME_OFFSET <= frame_buffer_offset;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_12) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond1_reg_676_pp0_it1 <= exitcond1_reg_676;
                ap_reg_ppstg_indvar_reg_275_pp0_it1 <= indvar_reg_275;
                exitcond1_reg_676 <= exitcond1_fu_447_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_outStream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))))) then
                ap_reg_ppstg_exitcond_reg_690_pp1_it1 <= exitcond_reg_690;
                exitcond_reg_690 <= exitcond_fu_464_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_12) and (exitcond1_reg_676 = ap_const_lv1_0) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                base_ddr_addr_addr_read_reg_685 <= base_ddr_addr_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((not((ap_const_lv1_0 = tmp_7_fu_424_p2)) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_ARREADY))))) then
                i_1_reg_665 <= i_1_fu_430_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_12) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                indvar_next_reg_680 <= indvar_next_fu_453_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                inner_index_V_1_reg_637 <= inner_index_V_1_fu_372_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_outStream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond_fu_464_p2))) then
                tmp_12_reg_699 <= tmp_12_fu_476_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_outStream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond_reg_690))) then
                    tmp_20_reg_709(6 downto 1) <= tmp_20_fu_550_p3(6 downto 1);
                tmp_21_reg_714 <= tmp_21_fu_558_p3;
                tmp_22_reg_719 <= tmp_22_fu_566_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_s_reg_652 <= grp_fu_385_p2(34 downto 3);
            end if;
        end if;
    end process;
    FRAME_BUFFER_NUMBER_r(31 downto 8) <= "000000000000000000000000";
    BASE_ADDRESS_r(31 downto 29) <= "000";
    tmp_20_reg_709(0) <= '1';
    i_op_assign_1_reg_244(31 downto 29) <= "000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_sig_bdd_237, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, tmp_7_fu_424_p2, ap_sig_ioackin_base_ddr_addr_ARREADY, exitcond1_fu_447_p2, exitcond_fu_464_p2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppstg_exitcond_reg_690_pp1_it1, ap_sig_ioackin_outStream_V_TREADY, ap_reg_ppiten_pp1_it2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (((ap_const_lv1_0 = tmp_7_fu_424_p2) and not((not((ap_const_lv1_0 = tmp_7_fu_424_p2)) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif ((not((ap_const_lv1_0 = tmp_7_fu_424_p2)) and not((not((ap_const_lv1_0 = tmp_7_fu_424_p2)) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_12;
            when ap_ST_pp0_stg0_fsm_12 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_447_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_12;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_447_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_12;
                end if;
            when ap_ST_pp1_stg0_fsm_13 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_outStream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_outStream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond_fu_464_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_13;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_outStream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_outStream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond_fu_464_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_13;
                end if;
            when ap_ST_st19_fsm_14 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, tmp_7_fu_424_p2, ap_sig_ioackin_base_ddr_addr_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_7_fu_424_p2) and not((not((ap_const_lv1_0 = tmp_7_fu_424_p2)) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_ARREADY))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, tmp_7_fu_424_p2, ap_sig_ioackin_base_ddr_addr_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_7_fu_424_p2) and not((not((ap_const_lv1_0 = tmp_7_fu_424_p2)) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_ARREADY))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_228 assign process. --
    ap_sig_bdd_228_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_228 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_237 assign process. --
    ap_sig_bdd_237_assign_proc : process(base_ddr_addr_RVALID, exitcond1_reg_676)
    begin
                ap_sig_bdd_237 <= ((base_ddr_addr_RVALID = ap_const_logic_0) and (exitcond1_reg_676 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_252 assign process. --
    ap_sig_bdd_252_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
                ap_sig_bdd_252 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_271 assign process. --
    ap_sig_bdd_271_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_271 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_282 assign process. --
    ap_sig_bdd_282_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_282 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_291 assign process. --
    ap_sig_bdd_291_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_291 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_300 assign process. --
    ap_sig_bdd_300_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_300 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_33 assign process. --
    ap_sig_bdd_33_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_33 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_330 assign process. --
    ap_sig_bdd_330_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_330 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_372 assign process. --
    ap_sig_bdd_372_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_372 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_379 assign process. --
    ap_sig_bdd_379_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_379 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_434 assign process. --
    ap_sig_bdd_434_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, tmp_7_fu_424_p2)
    begin
                ap_sig_bdd_434 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_7_fu_424_p2)));
    end process;


    -- ap_sig_bdd_455 assign process. --
    ap_sig_bdd_455_assign_proc : process(ap_reg_ppstg_exitcond_reg_690_pp1_it1, ap_reg_ppiten_pp1_it2)
    begin
                ap_sig_bdd_455 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_12 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_12_assign_proc : process(ap_sig_bdd_228)
    begin
        if (ap_sig_bdd_228) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_13 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_13_assign_proc : process(ap_sig_bdd_330)
    begin
        if (ap_sig_bdd_330) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_379)
    begin
        if (ap_sig_bdd_379) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_14 assign process. --
    ap_sig_cseq_ST_st19_fsm_14_assign_proc : process(ap_sig_bdd_372)
    begin
        if (ap_sig_bdd_372) then 
            ap_sig_cseq_ST_st19_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_33)
    begin
        if (ap_sig_bdd_33) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_271)
    begin
        if (ap_sig_bdd_271) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_282)
    begin
        if (ap_sig_bdd_282) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_291)
    begin
        if (ap_sig_bdd_291) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_300)
    begin
        if (ap_sig_bdd_300) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_base_ddr_addr_ARREADY assign process. --
    ap_sig_ioackin_base_ddr_addr_ARREADY_assign_proc : process(base_ddr_addr_ARREADY, ap_reg_ioackin_base_ddr_addr_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_base_ddr_addr_ARREADY)) then 
            ap_sig_ioackin_base_ddr_addr_ARREADY <= base_ddr_addr_ARREADY;
        else 
            ap_sig_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_outStream_V_TREADY assign process. --
    ap_sig_ioackin_outStream_V_TREADY_assign_proc : process(outStream_V_TREADY, ap_reg_ioackin_outStream_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_outStream_V_TREADY)) then 
            ap_sig_ioackin_outStream_V_TREADY <= outStream_V_TREADY;
        else 
            ap_sig_ioackin_outStream_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    base_ddr_addr_ARADDR <= tmp_10_fu_436_p1(32 - 1 downto 0);
    base_ddr_addr_ARBURST <= ap_const_lv2_0;
    base_ddr_addr_ARCACHE <= ap_const_lv4_0;
    base_ddr_addr_ARID <= ap_const_lv1_0;
    base_ddr_addr_ARLEN <= ap_const_lv32_200;
    base_ddr_addr_ARLOCK <= ap_const_lv2_0;
    base_ddr_addr_ARPROT <= ap_const_lv3_0;
    base_ddr_addr_ARQOS <= ap_const_lv4_0;
    base_ddr_addr_ARREGION <= ap_const_lv4_0;
    base_ddr_addr_ARSIZE <= ap_const_lv3_0;
    base_ddr_addr_ARUSER <= ap_const_lv1_0;

    -- base_ddr_addr_ARVALID assign process. --
    base_ddr_addr_ARVALID_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, tmp_7_fu_424_p2, ap_reg_ioackin_base_ddr_addr_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_7_fu_424_p2)) and (ap_const_logic_0 = ap_reg_ioackin_base_ddr_addr_ARREADY))) then 
            base_ddr_addr_ARVALID <= ap_const_logic_1;
        else 
            base_ddr_addr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    base_ddr_addr_AWADDR <= ap_const_lv32_0;
    base_ddr_addr_AWBURST <= ap_const_lv2_0;
    base_ddr_addr_AWCACHE <= ap_const_lv4_0;
    base_ddr_addr_AWID <= ap_const_lv1_0;
    base_ddr_addr_AWLEN <= ap_const_lv32_0;
    base_ddr_addr_AWLOCK <= ap_const_lv2_0;
    base_ddr_addr_AWPROT <= ap_const_lv3_0;
    base_ddr_addr_AWQOS <= ap_const_lv4_0;
    base_ddr_addr_AWREGION <= ap_const_lv4_0;
    base_ddr_addr_AWSIZE <= ap_const_lv3_0;
    base_ddr_addr_AWUSER <= ap_const_lv1_0;
    base_ddr_addr_AWVALID <= ap_const_logic_0;
    base_ddr_addr_BREADY <= ap_const_logic_0;

    -- base_ddr_addr_RREADY assign process. --
    base_ddr_addr_RREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_12, exitcond1_reg_676, ap_sig_bdd_237, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_12) and (exitcond1_reg_676 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            base_ddr_addr_RREADY <= ap_const_logic_1;
        else 
            base_ddr_addr_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    base_ddr_addr_WDATA <= ap_const_lv64_0;
    base_ddr_addr_WID <= ap_const_lv1_0;
    base_ddr_addr_WLAST <= ap_const_logic_0;
    base_ddr_addr_WSTRB <= ap_const_lv8_0;
    base_ddr_addr_WUSER <= ap_const_lv1_0;
    base_ddr_addr_WVALID <= ap_const_logic_0;
    buffer_address0 <= gepindex2_cast_fu_490_p1(9 - 1 downto 0);
    buffer_address1 <= tmp_9_fu_459_p1(9 - 1 downto 0);

    -- buffer_ce0 assign process. --
    buffer_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_13, ap_reg_ppiten_pp1_it0, ap_reg_ppstg_exitcond_reg_690_pp1_it1, ap_sig_ioackin_outStream_V_TREADY, ap_reg_ppiten_pp1_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_13) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_outStream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))))) then 
            buffer_ce0 <= ap_const_logic_1;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buffer_ce1 assign process. --
    buffer_ce1_assign_proc : process(ap_sig_bdd_237, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            buffer_ce1 <= ap_const_logic_1;
        else 
            buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_d1 <= base_ddr_addr_addr_read_reg_685;

    -- buffer_we1 assign process. --
    buffer_we1_assign_proc : process(ap_sig_bdd_237, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond1_reg_676_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_237 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_676_pp0_it1)))) then 
            buffer_we1 <= ap_const_logic_1;
        else 
            buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ddr_to_axis_reader_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    ddr_to_axis_reader_base_ddr_addr_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    end_pos_fu_502_p2 <= (start_pos_fu_495_p3 or ap_const_lv6_7);
    exitcond1_fu_447_p2 <= "1" when (indvar_phi_fu_279_p4 = ap_const_lv10_200) else "0";
    exitcond_fu_464_p2 <= "1" when (j_reg_287 = ap_const_lv13_1000) else "0";
    gepindex2_cast_fu_490_p1 <= std_logic_vector(resize(unsigned(gepindex_cast_fu_480_p4),64));
    gepindex_cast_fu_480_p4 <= j_reg_287(11 downto 3);
    grp_fu_385_ce <= ap_const_logic_1;
    grp_fu_385_p0 <= grp_fu_385_p00(8 - 1 downto 0);
    grp_fu_385_p00 <= std_logic_vector(resize(unsigned(inner_index_V_1_reg_637),40));
    grp_fu_385_p1 <= grp_fu_385_p10(32 - 1 downto 0);
    grp_fu_385_p10 <= std_logic_vector(resize(unsigned(i_op_assign_reg_235),40));
    i_1_fu_430_p2 <= std_logic_vector(unsigned(i_reg_264) + unsigned(ap_const_lv32_1));
    indvar_next_fu_453_p2 <= std_logic_vector(unsigned(indvar_phi_fu_279_p4) + unsigned(ap_const_lv10_1));

    -- indvar_phi_fu_279_p4 assign process. --
    indvar_phi_fu_279_p4_assign_proc : process(indvar_reg_275, ap_sig_cseq_ST_pp0_stg0_fsm_12, exitcond1_reg_676, ap_reg_ppiten_pp0_it1, indvar_next_reg_680)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_12) and (exitcond1_reg_676 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            indvar_phi_fu_279_p4 <= indvar_next_reg_680;
        else 
            indvar_phi_fu_279_p4 <= indvar_reg_275;
        end if; 
    end process;

    inner_index_V_1_fu_372_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(t_V_fu_364_p3));
    j_1_fu_470_p2 <= std_logic_vector(unsigned(j_reg_287) + unsigned(ap_const_lv13_1));
    offset_1_fu_608_p2 <= std_logic_vector(unsigned(offset1_reg_254) + unsigned(ap_const_lv32_200));
    offset_fu_401_p2 <= std_logic_vector(unsigned(i_op_assign_1_reg_244) + unsigned(tmp_s_reg_652));
    outStream_V_TDATA <= tmp_28_fu_597_p2(8 - 1 downto 0);

    -- outStream_V_TVALID assign process. --
    outStream_V_TVALID_assign_proc : process(ap_reg_ppstg_exitcond_reg_690_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ioackin_outStream_V_TREADY)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_690_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and (ap_const_logic_0 = ap_reg_ioackin_outStream_V_TREADY))) then 
            outStream_V_TVALID <= ap_const_logic_1;
        else 
            outStream_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    start_pos_fu_495_p3 <= (tmp_12_reg_699 & ap_const_lv3_0);
    t_V_fu_364_p3 <= 
        tmp_fu_360_p1 when (tmp_4_fu_354_p2(0) = '1') else 
        frame_index_V;
        tmp_10_fu_436_p1 <= std_logic_vector(resize(signed(offset1_reg_254),64));

    tmp_12_fu_476_p1 <= j_reg_287(3 - 1 downto 0);
    tmp_13_fu_508_p2 <= "1" when (unsigned(start_pos_fu_495_p3) > unsigned(end_pos_fu_502_p2)) else "0";
    tmp_14_fu_514_p1 <= std_logic_vector(resize(unsigned(start_pos_fu_495_p3),7));
    tmp_15_fu_518_p1 <= std_logic_vector(resize(unsigned(end_pos_fu_502_p2),7));
    
    tmp_16_fu_522_p4_proc : process(buffer_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_16_fu_522_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := buffer_q0;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_16_fu_522_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_16_fu_522_p4_i) := buffer_q0(64-1-tmp_16_fu_522_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_16_fu_522_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_17_fu_532_p2 <= std_logic_vector(unsigned(tmp_14_fu_514_p1) - unsigned(tmp_15_fu_518_p1));
    tmp_18_fu_538_p2 <= (tmp_14_fu_514_p1 xor ap_const_lv7_3F);
    tmp_19_fu_544_p2 <= std_logic_vector(unsigned(tmp_15_fu_518_p1) - unsigned(tmp_14_fu_514_p1));
    tmp_1_fu_298_p1 <= std_logic_vector(resize(unsigned(frame_buffer_number),32));
    tmp_20_fu_550_p3 <= 
        tmp_17_fu_532_p2 when (tmp_13_fu_508_p2(0) = '1') else 
        tmp_19_fu_544_p2;
    tmp_21_fu_558_p3 <= 
        tmp_16_fu_522_p4 when (tmp_13_fu_508_p2(0) = '1') else 
        buffer_q0;
    tmp_22_fu_566_p3 <= 
        tmp_18_fu_538_p2 when (tmp_13_fu_508_p2(0) = '1') else 
        tmp_14_fu_514_p1;
    tmp_23_fu_574_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_20_reg_709));
    tmp_24_fu_579_p1 <= std_logic_vector(resize(unsigned(tmp_22_reg_719),64));
    tmp_25_fu_582_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_574_p2),64));
    tmp_26_fu_586_p2 <= std_logic_vector(shift_right(unsigned(tmp_21_reg_714),to_integer(unsigned('0' & tmp_24_fu_579_p1(31-1 downto 0)))));
    tmp_27_fu_591_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_25_fu_582_p1(31-1 downto 0)))));
    tmp_28_fu_597_p2 <= (tmp_26_fu_586_p2 and tmp_27_fu_591_p2);
    tmp_2_fu_334_p4 <= base_address(31 downto 3);

    -- tmp_3_phi_fu_229_p4 assign process. --
    tmp_3_phi_fu_229_p4_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, FRAME_BUFFER_NUMBER_r, update_intr_read_read_fu_150_p2, tmp_1_fu_298_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
            if ((ap_const_lv1_0 = update_intr_read_read_fu_150_p2)) then 
                tmp_3_phi_fu_229_p4 <= FRAME_BUFFER_NUMBER_r;
            elsif (not((ap_const_lv1_0 = update_intr_read_read_fu_150_p2))) then 
                tmp_3_phi_fu_229_p4 <= tmp_1_fu_298_p1;
            else 
                tmp_3_phi_fu_229_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            tmp_3_phi_fu_229_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    tmp_4_fu_354_p2 <= "1" when (frame_index_V = ap_const_lv8_0) else "0";
    tmp_5_fu_344_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_334_p4),32));
    tmp_6_fu_410_p4 <= FRAME_BUFFER_DIM_r(31 downto 12);
    tmp_7_fu_424_p2 <= "1" when (unsigned(i_reg_264) < unsigned(tmp_8_fu_420_p1)) else "0";
    tmp_8_fu_420_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_410_p4),32));
    tmp_9_fu_459_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_275_pp0_it1),64));
    tmp_fu_360_p1 <= tmp_3_phi_fu_229_p4(8 - 1 downto 0);
    update_intr_read_read_fu_150_p2 <= (0=>update_intr, others=>'-');
end behav;
