// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ddr_to_axis_reader,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=2,HLS_SYN_FF=1184,HLS_SYN_LUT=1947}" *)

module ddr_to_axis_reader (
        ap_clk,
        ap_rst_n,
        outStream_V_TDATA,
        outStream_V_TVALID,
        outStream_V_TREADY,
        m_axi_base_ddr_addr_AWVALID,
        m_axi_base_ddr_addr_AWREADY,
        m_axi_base_ddr_addr_AWADDR,
        m_axi_base_ddr_addr_AWID,
        m_axi_base_ddr_addr_AWLEN,
        m_axi_base_ddr_addr_AWSIZE,
        m_axi_base_ddr_addr_AWBURST,
        m_axi_base_ddr_addr_AWLOCK,
        m_axi_base_ddr_addr_AWCACHE,
        m_axi_base_ddr_addr_AWPROT,
        m_axi_base_ddr_addr_AWQOS,
        m_axi_base_ddr_addr_AWREGION,
        m_axi_base_ddr_addr_AWUSER,
        m_axi_base_ddr_addr_WVALID,
        m_axi_base_ddr_addr_WREADY,
        m_axi_base_ddr_addr_WDATA,
        m_axi_base_ddr_addr_WSTRB,
        m_axi_base_ddr_addr_WLAST,
        m_axi_base_ddr_addr_WID,
        m_axi_base_ddr_addr_WUSER,
        m_axi_base_ddr_addr_ARVALID,
        m_axi_base_ddr_addr_ARREADY,
        m_axi_base_ddr_addr_ARADDR,
        m_axi_base_ddr_addr_ARID,
        m_axi_base_ddr_addr_ARLEN,
        m_axi_base_ddr_addr_ARSIZE,
        m_axi_base_ddr_addr_ARBURST,
        m_axi_base_ddr_addr_ARLOCK,
        m_axi_base_ddr_addr_ARCACHE,
        m_axi_base_ddr_addr_ARPROT,
        m_axi_base_ddr_addr_ARQOS,
        m_axi_base_ddr_addr_ARREGION,
        m_axi_base_ddr_addr_ARUSER,
        m_axi_base_ddr_addr_RVALID,
        m_axi_base_ddr_addr_RREADY,
        m_axi_base_ddr_addr_RDATA,
        m_axi_base_ddr_addr_RLAST,
        m_axi_base_ddr_addr_RID,
        m_axi_base_ddr_addr_RUSER,
        m_axi_base_ddr_addr_RRESP,
        m_axi_base_ddr_addr_BVALID,
        m_axi_base_ddr_addr_BREADY,
        m_axi_base_ddr_addr_BRESP,
        m_axi_base_ddr_addr_BID,
        m_axi_base_ddr_addr_BUSER,
        frame_index_V,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_st1_fsm_0 = 15'b1;
parameter    ap_ST_st2_fsm_1 = 15'b10;
parameter    ap_ST_st3_fsm_2 = 15'b100;
parameter    ap_ST_st4_fsm_3 = 15'b1000;
parameter    ap_ST_st5_fsm_4 = 15'b10000;
parameter    ap_ST_st6_fsm_5 = 15'b100000;
parameter    ap_ST_st7_fsm_6 = 15'b1000000;
parameter    ap_ST_st8_fsm_7 = 15'b10000000;
parameter    ap_ST_st9_fsm_8 = 15'b100000000;
parameter    ap_ST_st10_fsm_9 = 15'b1000000000;
parameter    ap_ST_st11_fsm_10 = 15'b10000000000;
parameter    ap_ST_st12_fsm_11 = 15'b100000000000;
parameter    ap_ST_pp0_stg0_fsm_12 = 15'b1000000000000;
parameter    ap_ST_pp1_stg0_fsm_13 = 15'b10000000000000;
parameter    ap_ST_st19_fsm_14 = 15'b100000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_C = 32'b1100;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_ID_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH = 64;
parameter    C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_USER_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_PROT_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE = 3;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv32_200 = 32'b1000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_8000000 = 32'b1000000000000000000000000000;
parameter    ap_const_lv10_200 = 10'b1000000000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv13_1000 = 13'b1000000000000;
parameter    ap_const_lv13_1 = 13'b1;
parameter    ap_const_lv6_7 = 6'b111;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv7_3F = 7'b111111;
parameter    ap_const_lv64_FFFFFFFFFFFFFFFF = 64'b1111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH = (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output  [7:0] outStream_V_TDATA;
output   outStream_V_TVALID;
input   outStream_V_TREADY;
output   m_axi_base_ddr_addr_AWVALID;
input   m_axi_base_ddr_addr_AWREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1 : 0] m_axi_base_ddr_addr_AWADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_AWID;
output  [7:0] m_axi_base_ddr_addr_AWLEN;
output  [2:0] m_axi_base_ddr_addr_AWSIZE;
output  [1:0] m_axi_base_ddr_addr_AWBURST;
output  [1:0] m_axi_base_ddr_addr_AWLOCK;
output  [3:0] m_axi_base_ddr_addr_AWCACHE;
output  [2:0] m_axi_base_ddr_addr_AWPROT;
output  [3:0] m_axi_base_ddr_addr_AWQOS;
output  [3:0] m_axi_base_ddr_addr_AWREGION;
output  [C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_AWUSER;
output   m_axi_base_ddr_addr_WVALID;
input   m_axi_base_ddr_addr_WREADY;
output  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1 : 0] m_axi_base_ddr_addr_WDATA;
output  [C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH - 1 : 0] m_axi_base_ddr_addr_WSTRB;
output   m_axi_base_ddr_addr_WLAST;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_WID;
output  [C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_WUSER;
output   m_axi_base_ddr_addr_ARVALID;
input   m_axi_base_ddr_addr_ARREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1 : 0] m_axi_base_ddr_addr_ARADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_ARID;
output  [7:0] m_axi_base_ddr_addr_ARLEN;
output  [2:0] m_axi_base_ddr_addr_ARSIZE;
output  [1:0] m_axi_base_ddr_addr_ARBURST;
output  [1:0] m_axi_base_ddr_addr_ARLOCK;
output  [3:0] m_axi_base_ddr_addr_ARCACHE;
output  [2:0] m_axi_base_ddr_addr_ARPROT;
output  [3:0] m_axi_base_ddr_addr_ARQOS;
output  [3:0] m_axi_base_ddr_addr_ARREGION;
output  [C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_ARUSER;
input   m_axi_base_ddr_addr_RVALID;
output   m_axi_base_ddr_addr_RREADY;
input  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1 : 0] m_axi_base_ddr_addr_RDATA;
input   m_axi_base_ddr_addr_RLAST;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_RID;
input  [C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_RUSER;
input  [1:0] m_axi_base_ddr_addr_RRESP;
input   m_axi_base_ddr_addr_BVALID;
output   m_axi_base_ddr_addr_BREADY;
input  [1:0] m_axi_base_ddr_addr_BRESP;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_BID;
input  [C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_BUSER;
input  [7:0] frame_index_V;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg outStream_V_TVALID;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_32;
reg    ap_ready;
wire   [31:0] base_address;
wire   [31:0] frame_buffer_dim;
wire   [31:0] frame_buffer_offset;
wire   [7:0] frame_buffer_number;
wire    update_intr;
reg   [31:0] FRAME_OFFSET;
reg   [31:0] FRAME_BUFFER_NUMBER_r;
reg   [31:0] FRAME_BUFFER_DIM_r;
reg    outStream_V_TDATA_blk_n;
reg    ap_reg_ppiten_pp1_it2;
reg    ap_reg_ppiten_pp1_it0;
reg    ap_reg_ppiten_pp1_it1;
reg   [0:0] exitcond_reg_671;
reg   [0:0] ap_reg_ppstg_exitcond_reg_671_pp1_iter1;
reg    base_ddr_addr_blk_n_AR;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_122;
wire   [0:0] tmp_7_fu_414_p2;
reg    base_ddr_addr_blk_n_R;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_12;
reg    ap_sig_134;
reg    ap_reg_ppiten_pp0_it1;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it2;
reg   [0:0] exitcond1_reg_657;
wire    base_ddr_addr_AWREADY;
wire    base_ddr_addr_WREADY;
reg    base_ddr_addr_ARVALID;
wire    base_ddr_addr_ARREADY;
wire   [31:0] base_ddr_addr_ARADDR;
wire    base_ddr_addr_RVALID;
reg    base_ddr_addr_RREADY;
wire   [63:0] base_ddr_addr_RDATA;
wire    base_ddr_addr_RLAST;
wire   [0:0] base_ddr_addr_RID;
wire   [0:0] base_ddr_addr_RUSER;
wire   [1:0] base_ddr_addr_RRESP;
wire    base_ddr_addr_BVALID;
wire   [1:0] base_ddr_addr_BRESP;
wire   [0:0] base_ddr_addr_BID;
wire   [0:0] base_ddr_addr_BUSER;
reg   [9:0] indvar_reg_269;
reg   [9:0] ap_reg_ppstg_indvar_reg_269_pp0_iter1;
reg    ap_sig_265;
reg   [12:0] j_reg_281;
wire   [7:0] inner_index_V_1_fu_362_p2;
reg   [7:0] inner_index_V_1_reg_618;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_287;
reg   [31:0] tmp_s_reg_633;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_298;
wire   [31:0] offset_fu_391_p2;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_307;
wire   [31:0] i_1_fu_420_p2;
reg   [31:0] i_1_reg_646;
reg    ap_sig_ioackin_base_ddr_addr_ARREADY;
wire   [0:0] exitcond1_fu_437_p2;
reg   [0:0] ap_reg_ppstg_exitcond1_reg_657_pp0_iter1;
wire   [9:0] indvar_next_fu_443_p2;
reg   [9:0] indvar_next_reg_661;
reg   [63:0] base_ddr_addr_addr_read_reg_666;
wire   [0:0] exitcond_fu_454_p2;
reg    ap_sig_cseq_ST_pp1_stg0_fsm_13;
reg    ap_sig_335;
reg    ap_sig_ioackin_outStream_V_TREADY;
wire   [12:0] j_1_fu_460_p2;
wire   [2:0] tmp_12_fu_466_p1;
reg   [2:0] tmp_12_reg_680;
wire   [6:0] tmp_23_fu_564_p2;
reg   [6:0] tmp_23_reg_690;
wire   [63:0] tmp_26_fu_574_p2;
reg   [63:0] tmp_26_reg_695;
wire   [31:0] offset_1_fu_599_p2;
reg    ap_sig_cseq_ST_st19_fsm_14;
reg    ap_sig_367;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_374;
wire   [8:0] buffer_address0;
reg    buffer_ce0;
wire   [63:0] buffer_q0;
wire   [8:0] buffer_address1;
reg    buffer_ce1;
reg    buffer_we1;
wire   [31:0] tmp_1_fu_292_p1;
reg   [31:0] tmp_3_phi_fu_233_p4;
wire   [0:0] update_intr_read_read_fu_154_p2;
reg   [31:0] i_op_assign_reg_239;
reg   [31:0] offset1_reg_248;
reg   [31:0] i_reg_258;
reg   [9:0] indvar_phi_fu_273_p4;
wire   [63:0] tmp_10_fu_449_p1;
wire   [63:0] gepindex2_cast_fu_480_p1;
wire  signed [63:0] tmp_8_fu_426_p1;
reg    ap_reg_ioackin_base_ddr_addr_ARREADY;
reg    ap_reg_ioackin_outStream_V_TREADY;
wire   [0:0] tmp_4_fu_344_p2;
wire   [7:0] tmp_fu_350_p1;
wire   [7:0] t_V_fu_354_p3;
wire   [7:0] grp_fu_375_p0;
wire   [31:0] grp_fu_375_p1;
wire   [39:0] grp_fu_375_p2;
wire   [19:0] tmp_6_fu_400_p4;
wire   [31:0] tmp_9_fu_410_p1;
wire   [8:0] gepindex_cast_fu_470_p4;
wire   [5:0] start_pos_fu_485_p3;
wire   [5:0] end_pos_fu_492_p2;
wire   [6:0] tmp_14_fu_504_p1;
wire   [6:0] tmp_15_fu_508_p1;
wire   [0:0] tmp_13_fu_498_p2;
wire   [6:0] tmp_17_fu_522_p2;
wire   [6:0] tmp_19_fu_534_p2;
reg   [63:0] tmp_16_fu_512_p4;
wire   [6:0] tmp_18_fu_528_p2;
wire   [6:0] tmp_20_fu_540_p3;
wire   [6:0] tmp_22_fu_556_p3;
wire   [63:0] tmp_21_fu_548_p3;
wire   [63:0] tmp_24_fu_570_p1;
wire   [63:0] tmp_25_fu_580_p1;
wire   [63:0] tmp_27_fu_583_p2;
wire   [63:0] tmp_28_fu_589_p2;
reg   [14:0] ap_NS_fsm;
wire   [39:0] grp_fu_375_p00;
wire   [39:0] grp_fu_375_p10;
reg    ap_sig_128;
reg    ap_sig_116;
reg    ap_sig_276;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'b1;
#0 FRAME_OFFSET = 32'b1001011000000000000;
#0 FRAME_BUFFER_NUMBER_r = 32'b1000;
#0 FRAME_BUFFER_DIM_r = 32'b1001011000000000000;
#0 ap_reg_ppiten_pp1_it2 = 1'b0;
#0 ap_reg_ppiten_pp1_it0 = 1'b0;
#0 ap_reg_ppiten_pp1_it1 = 1'b0;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
#0 ap_reg_ppiten_pp0_it0 = 1'b0;
#0 ap_reg_ppiten_pp0_it2 = 1'b0;
#0 ap_reg_ioackin_base_ddr_addr_ARREADY = 1'b0;
#0 ap_reg_ioackin_outStream_V_TREADY = 1'b0;
end

ddr_to_axis_reader_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
ddr_to_axis_reader_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .base_address(base_address),
    .frame_buffer_dim(frame_buffer_dim),
    .frame_buffer_offset(frame_buffer_offset),
    .frame_buffer_number(frame_buffer_number),
    .update_intr(update_intr)
);

ddr_to_axis_reader_base_ddr_addr_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BASE_DDR_ADDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_BASE_DDR_ADDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BASE_DDR_ADDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE ))
ddr_to_axis_reader_base_ddr_addr_m_axi_U(
    .AWVALID(m_axi_base_ddr_addr_AWVALID),
    .AWREADY(m_axi_base_ddr_addr_AWREADY),
    .AWADDR(m_axi_base_ddr_addr_AWADDR),
    .AWID(m_axi_base_ddr_addr_AWID),
    .AWLEN(m_axi_base_ddr_addr_AWLEN),
    .AWSIZE(m_axi_base_ddr_addr_AWSIZE),
    .AWBURST(m_axi_base_ddr_addr_AWBURST),
    .AWLOCK(m_axi_base_ddr_addr_AWLOCK),
    .AWCACHE(m_axi_base_ddr_addr_AWCACHE),
    .AWPROT(m_axi_base_ddr_addr_AWPROT),
    .AWQOS(m_axi_base_ddr_addr_AWQOS),
    .AWREGION(m_axi_base_ddr_addr_AWREGION),
    .AWUSER(m_axi_base_ddr_addr_AWUSER),
    .WVALID(m_axi_base_ddr_addr_WVALID),
    .WREADY(m_axi_base_ddr_addr_WREADY),
    .WDATA(m_axi_base_ddr_addr_WDATA),
    .WSTRB(m_axi_base_ddr_addr_WSTRB),
    .WLAST(m_axi_base_ddr_addr_WLAST),
    .WID(m_axi_base_ddr_addr_WID),
    .WUSER(m_axi_base_ddr_addr_WUSER),
    .ARVALID(m_axi_base_ddr_addr_ARVALID),
    .ARREADY(m_axi_base_ddr_addr_ARREADY),
    .ARADDR(m_axi_base_ddr_addr_ARADDR),
    .ARID(m_axi_base_ddr_addr_ARID),
    .ARLEN(m_axi_base_ddr_addr_ARLEN),
    .ARSIZE(m_axi_base_ddr_addr_ARSIZE),
    .ARBURST(m_axi_base_ddr_addr_ARBURST),
    .ARLOCK(m_axi_base_ddr_addr_ARLOCK),
    .ARCACHE(m_axi_base_ddr_addr_ARCACHE),
    .ARPROT(m_axi_base_ddr_addr_ARPROT),
    .ARQOS(m_axi_base_ddr_addr_ARQOS),
    .ARREGION(m_axi_base_ddr_addr_ARREGION),
    .ARUSER(m_axi_base_ddr_addr_ARUSER),
    .RVALID(m_axi_base_ddr_addr_RVALID),
    .RREADY(m_axi_base_ddr_addr_RREADY),
    .RDATA(m_axi_base_ddr_addr_RDATA),
    .RLAST(m_axi_base_ddr_addr_RLAST),
    .RID(m_axi_base_ddr_addr_RID),
    .RUSER(m_axi_base_ddr_addr_RUSER),
    .RRESP(m_axi_base_ddr_addr_RRESP),
    .BVALID(m_axi_base_ddr_addr_BVALID),
    .BREADY(m_axi_base_ddr_addr_BREADY),
    .BRESP(m_axi_base_ddr_addr_BRESP),
    .BID(m_axi_base_ddr_addr_BID),
    .BUSER(m_axi_base_ddr_addr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(base_ddr_addr_ARVALID),
    .I_ARREADY(base_ddr_addr_ARREADY),
    .I_ARADDR(base_ddr_addr_ARADDR),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_200),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(base_ddr_addr_RVALID),
    .I_RREADY(base_ddr_addr_RREADY),
    .I_RDATA(base_ddr_addr_RDATA),
    .I_RID(base_ddr_addr_RID),
    .I_RUSER(base_ddr_addr_RUSER),
    .I_RRESP(base_ddr_addr_RRESP),
    .I_RLAST(base_ddr_addr_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(base_ddr_addr_AWREADY),
    .I_AWADDR(ap_const_lv32_0),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_0),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(1'b0),
    .I_WREADY(base_ddr_addr_WREADY),
    .I_WDATA(ap_const_lv64_0),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv8_0),
    .I_BVALID(base_ddr_addr_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(base_ddr_addr_BRESP),
    .I_BID(base_ddr_addr_BID),
    .I_BUSER(base_ddr_addr_BUSER)
);

ddr_to_axis_reader_buffer #(
    .DataWidth( 64 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .q0(buffer_q0),
    .address1(buffer_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(base_ddr_addr_addr_read_reg_666)
);

ddr_to_axis_reader_mul_8ns_32ns_40_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
ddr_to_axis_reader_mul_8ns_32ns_40_3_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_375_p0),
    .din1(grp_fu_375_p1),
    .ce(1'b1),
    .dout(grp_fu_375_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_base_ddr_addr_ARREADY <= 1'b0;
    end else begin
        if (ap_sig_128) begin
            if (~(~(1'b0 == tmp_7_fu_414_p2) & (1'b0 == ap_sig_ioackin_base_ddr_addr_ARREADY))) begin
                ap_reg_ioackin_base_ddr_addr_ARREADY <= 1'b0;
            end else if ((1'b1 == base_ddr_addr_ARREADY)) begin
                ap_reg_ioackin_base_ddr_addr_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_outStream_V_TREADY <= 1'b0;
    end else begin
        if (ap_sig_116) begin
            if (~((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_sig_ioackin_outStream_V_TREADY))) begin
                ap_reg_ioackin_outStream_V_TREADY <= 1'b0;
            end else if ((1'b1 == outStream_V_TREADY)) begin
                ap_reg_ioackin_outStream_V_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_12) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265) & ~(1'b0 == exitcond1_fu_437_p2))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b0;
        end else if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
            ap_reg_ppiten_pp0_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_12) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265) & (1'b0 == exitcond1_fu_437_p2))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b1;
        end else if (((1'b1 == ap_sig_cseq_ST_st12_fsm_11) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_12) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265) & ~(1'b0 == exitcond1_fu_437_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265)) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
            ap_reg_ppiten_pp0_it2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_13) & ~((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_sig_ioackin_outStream_V_TREADY)) & ~(1'b0 == exitcond_fu_454_p2))) begin
            ap_reg_ppiten_pp1_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_12) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265) & ~(1'b0 == exitcond1_fu_437_p2))) begin
            ap_reg_ppiten_pp1_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_13) & ~((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_sig_ioackin_outStream_V_TREADY)) & (1'b0 == exitcond_fu_454_p2))) begin
            ap_reg_ppiten_pp1_it1 <= 1'b1;
        end else if ((((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_12) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265) & ~(1'b0 == exitcond1_fu_437_p2)) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_13) & ~((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_sig_ioackin_outStream_V_TREADY)) & ~(1'b0 == exitcond_fu_454_p2)))) begin
            ap_reg_ppiten_pp1_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_sig_ioackin_outStream_V_TREADY))) begin
            ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
        end else if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_12) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265) & ~(1'b0 == exitcond1_fu_437_p2))) begin
            ap_reg_ppiten_pp1_it2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_sig_276) begin
        if ((1'b0 == update_intr_read_read_fu_154_p2)) begin
            i_op_assign_reg_239 <= FRAME_OFFSET;
        end else if (~(1'b0 == update_intr_read_read_fu_154_p2)) begin
            i_op_assign_reg_239 <= frame_buffer_offset;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st19_fsm_14)) begin
        i_reg_258 <= i_1_reg_646;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        i_reg_258 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_12) & (1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == exitcond1_reg_657) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265))) begin
        indvar_reg_269 <= indvar_next_reg_661;
    end else if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        indvar_reg_269 <= ap_const_lv10_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_12) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265) & ~(1'b0 == exitcond1_fu_437_p2))) begin
        j_reg_281 <= ap_const_lv13_0;
    end else if (((1'b1 == ap_reg_ppiten_pp1_it0) & (1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_13) & ~((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_sig_ioackin_outStream_V_TREADY)) & (1'b0 == exitcond_fu_454_p2))) begin
        j_reg_281 <= j_1_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st19_fsm_14)) begin
        offset1_reg_248 <= offset_1_fu_599_p2;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        offset1_reg_248 <= offset_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(1'b0 == update_intr_read_read_fu_154_p2))) begin
        FRAME_BUFFER_DIM_r <= frame_buffer_dim;
        FRAME_BUFFER_NUMBER_r[7 : 0] <= tmp_1_fu_292_p1[7 : 0];
        FRAME_OFFSET <= frame_buffer_offset;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_12) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265))) begin
        ap_reg_ppstg_exitcond1_reg_657_pp0_iter1 <= exitcond1_reg_657;
        ap_reg_ppstg_indvar_reg_269_pp0_iter1 <= indvar_reg_269;
        exitcond1_reg_657 <= exitcond1_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_13) & ~((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_sig_ioackin_outStream_V_TREADY)))) begin
        ap_reg_ppstg_exitcond_reg_671_pp1_iter1 <= exitcond_reg_671;
        exitcond_reg_671 <= exitcond_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_12) & (1'b0 == exitcond1_reg_657) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265))) begin
        base_ddr_addr_addr_read_reg_666 <= base_ddr_addr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(~(1'b0 == tmp_7_fu_414_p2) & (1'b0 == ap_sig_ioackin_base_ddr_addr_ARREADY)))) begin
        i_1_reg_646 <= i_1_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_12) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265))) begin
        indvar_next_reg_661 <= indvar_next_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        inner_index_V_1_reg_618 <= inner_index_V_1_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_13) & ~((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_sig_ioackin_outStream_V_TREADY)) & (1'b0 == exitcond_fu_454_p2))) begin
        tmp_12_reg_680 <= tmp_12_fu_466_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_13) & ~((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_sig_ioackin_outStream_V_TREADY)) & (exitcond_reg_671 == 1'b0))) begin
        tmp_23_reg_690[6 : 1] <= tmp_23_fu_564_p2[6 : 1];
        tmp_26_reg_695 <= tmp_26_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        tmp_s_reg_633 <= {{grp_fu_375_p2[ap_const_lv32_22 : ap_const_lv32_3]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == tmp_7_fu_414_p2) & ~(~(1'b0 == tmp_7_fu_414_p2) & (1'b0 == ap_sig_ioackin_base_ddr_addr_ARREADY)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == tmp_7_fu_414_p2) & ~(~(1'b0 == tmp_7_fu_414_p2) & (1'b0 == ap_sig_ioackin_base_ddr_addr_ARREADY)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_134) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_12 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_12 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_335) begin
        ap_sig_cseq_ST_pp1_stg0_fsm_13 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp1_stg0_fsm_13 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_374) begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_367) begin
        ap_sig_cseq_ST_st19_fsm_14 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_14 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_32) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_287) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_298) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_307) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_122) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_base_ddr_addr_ARREADY)) begin
        ap_sig_ioackin_base_ddr_addr_ARREADY = base_ddr_addr_ARREADY;
    end else begin
        ap_sig_ioackin_base_ddr_addr_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_outStream_V_TREADY)) begin
        ap_sig_ioackin_outStream_V_TREADY = outStream_V_TREADY;
    end else begin
        ap_sig_ioackin_outStream_V_TREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == tmp_7_fu_414_p2) & (1'b0 == ap_reg_ioackin_base_ddr_addr_ARREADY))) begin
        base_ddr_addr_ARVALID = 1'b1;
    end else begin
        base_ddr_addr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_12) & (1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == exitcond1_reg_657) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265))) begin
        base_ddr_addr_RREADY = 1'b1;
    end else begin
        base_ddr_addr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == tmp_7_fu_414_p2))) begin
        base_ddr_addr_blk_n_AR = m_axi_base_ddr_addr_ARREADY;
    end else begin
        base_ddr_addr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_12) & (1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == exitcond1_reg_657))) begin
        base_ddr_addr_blk_n_R = m_axi_base_ddr_addr_RVALID;
    end else begin
        base_ddr_addr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp1_it0) & (1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_13) & ~((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_sig_ioackin_outStream_V_TREADY)))) begin
        buffer_ce0 = 1'b1;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265))) begin
        buffer_ce1 = 1'b1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265) & (1'b0 == ap_reg_ppstg_exitcond1_reg_657_pp0_iter1))) begin
        buffer_we1 = 1'b1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_12) & (1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == exitcond1_reg_657))) begin
        indvar_phi_fu_273_p4 = indvar_next_reg_661;
    end else begin
        indvar_phi_fu_273_p4 = indvar_reg_269;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0))) begin
        outStream_V_TDATA_blk_n = outStream_V_TREADY;
    end else begin
        outStream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_reg_ioackin_outStream_V_TREADY))) begin
        outStream_V_TVALID = 1'b1;
    end else begin
        outStream_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        if ((1'b0 == update_intr_read_read_fu_154_p2)) begin
            tmp_3_phi_fu_233_p4 = FRAME_BUFFER_NUMBER_r;
        end else if (~(1'b0 == update_intr_read_read_fu_154_p2)) begin
            tmp_3_phi_fu_233_p4 = tmp_1_fu_292_p1;
        end else begin
            tmp_3_phi_fu_233_p4 = 'bx;
        end
    end else begin
        tmp_3_phi_fu_233_p4 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            if (((1'b0 == tmp_7_fu_414_p2) & ~(~(1'b0 == tmp_7_fu_414_p2) & (1'b0 == ap_sig_ioackin_base_ddr_addr_ARREADY)))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if ((~(1'b0 == tmp_7_fu_414_p2) & ~(~(1'b0 == tmp_7_fu_414_p2) & (1'b0 == ap_sig_ioackin_base_ddr_addr_ARREADY)))) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_12;
        end
        ap_ST_pp0_stg0_fsm_12 : begin
            if ((~((1'b1 == ap_reg_ppiten_pp0_it2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265) & ~(1'b1 == ap_reg_ppiten_pp0_it1)) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265) & ~(1'b0 == exitcond1_fu_437_p2) & ~(1'b1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_12;
            end else if ((((1'b1 == ap_reg_ppiten_pp0_it2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265) & ~(1'b1 == ap_reg_ppiten_pp0_it1)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_265) & ~(1'b0 == exitcond1_fu_437_p2) & ~(1'b1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_13;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_12;
            end
        end
        ap_ST_pp1_stg0_fsm_13 : begin
            if ((~((1'b1 == ap_reg_ppiten_pp1_it2) & ~((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_sig_ioackin_outStream_V_TREADY)) & ~(1'b1 == ap_reg_ppiten_pp1_it1)) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ~((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_sig_ioackin_outStream_V_TREADY)) & ~(1'b0 == exitcond_fu_454_p2) & ~(1'b1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_13;
            end else if ((((1'b1 == ap_reg_ppiten_pp1_it2) & ~((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_sig_ioackin_outStream_V_TREADY)) & ~(1'b1 == ap_reg_ppiten_pp1_it1)) | ((1'b1 == ap_reg_ppiten_pp1_it0) & ~((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0) & (1'b0 == ap_sig_ioackin_outStream_V_TREADY)) & ~(1'b0 == exitcond_fu_454_p2) & ~(1'b1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_st19_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_13;
            end
        end
        ap_ST_st19_fsm_14 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_116 = ((1'b1 == ap_reg_ppiten_pp1_it2) & (ap_reg_ppstg_exitcond_reg_671_pp1_iter1 == 1'b0));
end

always @ (*) begin
    ap_sig_122 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_128 = ((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == tmp_7_fu_414_p2));
end

always @ (*) begin
    ap_sig_134 = (1'b1 == ap_CS_fsm[ap_const_lv32_C]);
end

always @ (*) begin
    ap_sig_265 = ((1'b0 == exitcond1_reg_657) & (base_ddr_addr_RVALID == 1'b0));
end

always @ (*) begin
    ap_sig_276 = ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0));
end

always @ (*) begin
    ap_sig_287 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_298 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_307 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_32 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_335 = (1'b1 == ap_CS_fsm[ap_const_lv32_D]);
end

always @ (*) begin
    ap_sig_367 = (1'b1 == ap_CS_fsm[ap_const_lv32_E]);
end

always @ (*) begin
    ap_sig_374 = (1'b1 == ap_CS_fsm[ap_const_lv32_B]);
end

assign base_ddr_addr_ARADDR = tmp_8_fu_426_p1;

assign buffer_address0 = gepindex2_cast_fu_480_p1;

assign buffer_address1 = tmp_10_fu_449_p1;

assign end_pos_fu_492_p2 = (start_pos_fu_485_p3 | ap_const_lv6_7);

assign exitcond1_fu_437_p2 = ((indvar_phi_fu_273_p4 == ap_const_lv10_200) ? 1'b1 : 1'b0);

assign exitcond_fu_454_p2 = ((j_reg_281 == ap_const_lv13_1000) ? 1'b1 : 1'b0);

assign gepindex2_cast_fu_480_p1 = gepindex_cast_fu_470_p4;

assign gepindex_cast_fu_470_p4 = {{j_reg_281[ap_const_lv32_B : ap_const_lv32_3]}};

assign grp_fu_375_p0 = grp_fu_375_p00;

assign grp_fu_375_p00 = inner_index_V_1_reg_618;

assign grp_fu_375_p1 = grp_fu_375_p10;

assign grp_fu_375_p10 = i_op_assign_reg_239;

assign i_1_fu_420_p2 = (i_reg_258 + ap_const_lv32_1);

assign indvar_next_fu_443_p2 = (indvar_phi_fu_273_p4 + ap_const_lv10_1);

assign inner_index_V_1_fu_362_p2 = ($signed(ap_const_lv8_FF) + $signed(t_V_fu_354_p3));

assign j_1_fu_460_p2 = (j_reg_281 + ap_const_lv13_1);

assign offset_1_fu_599_p2 = (offset1_reg_248 + ap_const_lv32_200);

assign offset_fu_391_p2 = (ap_const_lv32_8000000 + tmp_s_reg_633);

assign outStream_V_TDATA = tmp_28_fu_589_p2[7:0];

assign start_pos_fu_485_p3 = {{tmp_12_reg_680}, {ap_const_lv3_0}};

assign t_V_fu_354_p3 = ((tmp_4_fu_344_p2[0:0] === 1'b1) ? tmp_fu_350_p1 : frame_index_V);

assign tmp_10_fu_449_p1 = ap_reg_ppstg_indvar_reg_269_pp0_iter1;

assign tmp_12_fu_466_p1 = j_reg_281[2:0];

assign tmp_13_fu_498_p2 = ((start_pos_fu_485_p3 > end_pos_fu_492_p2) ? 1'b1 : 1'b0);

assign tmp_14_fu_504_p1 = start_pos_fu_485_p3;

assign tmp_15_fu_508_p1 = end_pos_fu_492_p2;

integer ap_tvar_int_0;

always @ (buffer_q0) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > ap_const_lv32_3F - ap_const_lv32_0) begin
            tmp_16_fu_512_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_16_fu_512_p4[ap_tvar_int_0] = buffer_q0[ap_const_lv32_3F - ap_tvar_int_0];
        end
    end
end

assign tmp_17_fu_522_p2 = (tmp_14_fu_504_p1 - tmp_15_fu_508_p1);

assign tmp_18_fu_528_p2 = (tmp_14_fu_504_p1 ^ ap_const_lv7_3F);

assign tmp_19_fu_534_p2 = (tmp_15_fu_508_p1 - tmp_14_fu_504_p1);

assign tmp_1_fu_292_p1 = frame_buffer_number;

assign tmp_20_fu_540_p3 = ((tmp_13_fu_498_p2[0:0] === 1'b1) ? tmp_17_fu_522_p2 : tmp_19_fu_534_p2);

assign tmp_21_fu_548_p3 = ((tmp_13_fu_498_p2[0:0] === 1'b1) ? tmp_16_fu_512_p4 : buffer_q0);

assign tmp_22_fu_556_p3 = ((tmp_13_fu_498_p2[0:0] === 1'b1) ? tmp_18_fu_528_p2 : tmp_14_fu_504_p1);

assign tmp_23_fu_564_p2 = (ap_const_lv7_3F - tmp_20_fu_540_p3);

assign tmp_24_fu_570_p1 = tmp_22_fu_556_p3;

assign tmp_25_fu_580_p1 = tmp_23_reg_690;

assign tmp_26_fu_574_p2 = tmp_21_fu_548_p3 >> tmp_24_fu_570_p1;

assign tmp_27_fu_583_p2 = ap_const_lv64_FFFFFFFFFFFFFFFF >> tmp_25_fu_580_p1;

assign tmp_28_fu_589_p2 = (tmp_26_reg_695 & tmp_27_fu_583_p2);

assign tmp_4_fu_344_p2 = ((frame_index_V == ap_const_lv8_0) ? 1'b1 : 1'b0);

assign tmp_6_fu_400_p4 = {{FRAME_BUFFER_DIM_r[ap_const_lv32_1F : ap_const_lv32_C]}};

assign tmp_7_fu_414_p2 = ((i_reg_258 < tmp_9_fu_410_p1) ? 1'b1 : 1'b0);

assign tmp_8_fu_426_p1 = $signed(offset1_reg_248);

assign tmp_9_fu_410_p1 = tmp_6_fu_400_p4;

assign tmp_fu_350_p1 = tmp_3_phi_fu_233_p4[7:0];

assign update_intr_read_read_fu_154_p2 = update_intr;

always @ (posedge ap_clk) begin
    FRAME_BUFFER_NUMBER_r[31:8] <= 24'b000000000000000000000000;
    tmp_23_reg_690[0] <= 1'b0;
end

endmodule //ddr_to_axis_reader
