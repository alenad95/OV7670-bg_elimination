

================================================================
== Vivado HLS Report for 'axis_to_ddr_writer'
================================================================
* Date:           Mon Mar  8 17:40:10 2021

* Version:        2019.1 (Build 2552052 on Fri May 24 15:28:33 MDT 2019)
* Project:        AXIS_TO_DDR_WRITER_AXILITE
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   8.00|     7.000|        1.00|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +------------------------------------+------+------+----------+-----------+-----------+------+----------+
        |                                    |   Latency   | Iteration|  Initiation Interval  | Trip |          |
        |              Loop Name             |  min |  max |  Latency |  achieved |   target  | Count| Pipelined|
        +------------------------------------+------+------+----------+-----------+-----------+------+----------+
        |- Loop 1                            |     ?|     ?|      4618|          -|          -|     ?|    no    |
        | + Loop 1.1                         |  4096|  4096|         1|          1|          1|  4096|    yes   |
        | + memcpy.base_ddr_addr.buffer.gep  |   513|   513|         3|          1|          1|   512|    yes   |
        +------------------------------------+------+------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 1
  * Pipeline-1: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 15
* Pipeline : 2
  Pipeline-0 : II = 1, D = 1, States = { 6 }
  Pipeline-1 : II = 1, D = 3, States = { 8 9 10 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 6 
7 --> 8 
8 --> 11 9 
9 --> 10 
10 --> 8 
11 --> 12 
12 --> 13 
13 --> 14 
14 --> 15 
15 --> 5 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %inputStream_V), !map !66"   --->   Operation 16 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i64* %base_ddr_addr), !map !72"   --->   Operation 17 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %frame_index_V), !map !78"   --->   Operation 18 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %frame_count), !map !82"   --->   Operation 19 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 %base_address), !map !86"   --->   Operation 20 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 %frame_buffer_dim), !map !92"   --->   Operation 21 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 %frame_buffer_offset), !map !96"   --->   Operation 22 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8 %frame_buffer_number), !map !100"   --->   Operation 23 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %update_intr), !map !104"   --->   Operation 24 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([19 x i8]* @axis_to_ddr_writer_s) nounwind"   --->   Operation 25 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (1.00ns)   --->   "%update_intr_read = call i1 @_ssdm_op_Read.s_axilite.i1(i1 %update_intr)"   --->   Operation 26 'read' 'update_intr_read' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 27 [1/1] (1.00ns)   --->   "%frame_buffer_number_s = call i8 @_ssdm_op_Read.s_axilite.i8(i8 %frame_buffer_number)"   --->   Operation 27 'read' 'frame_buffer_number_s' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 28 [1/1] (1.00ns)   --->   "%frame_buffer_offset_s = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %frame_buffer_offset)"   --->   Operation 28 'read' 'frame_buffer_offset_s' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 29 [1/1] (1.00ns)   --->   "%frame_buffer_dim_rea = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %frame_buffer_dim)"   --->   Operation 29 'read' 'frame_buffer_dim_rea' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 30 [1/1] (1.00ns)   --->   "%base_address_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %base_address)"   --->   Operation 30 'read' 'base_address_read' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%buffer = alloca [512 x i64], align 16" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:47]   --->   Operation 31 'alloca' 'buffer' <Predicate = true> <Delay = 0.00> <Core = "RAM_2P_BRAM">   --->   Core 42 'RAM_2P_BRAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 64> <Depth = 512> <RAM>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 %base_address, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:9]   --->   Operation 32 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:10]   --->   Operation 33 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %update_intr, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:11]   --->   Operation 34 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 %frame_buffer_offset, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:12]   --->   Operation 35 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 %frame_buffer_dim, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:13]   --->   Operation 36 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i8 %frame_buffer_number, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:14]   --->   Operation 37 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i64* %base_ddr_addr, [6 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 32, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:24]   --->   Operation 38 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i8* %inputStream_V, [5 x i8]* @p_str3, i32 1, i32 1, [5 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:25]   --->   Operation 39 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %frame_count, [8 x i8]* @p_str5, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:26]   --->   Operation 40 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i8* %frame_index_V, [8 x i8]* @p_str5, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:27]   --->   Operation 41 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecMemCore([512 x i64]* %buffer, [1 x i8]* @p_str1, [12 x i8]* @p_str6, [1 x i8]* @p_str1, i32 -1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:48]   --->   Operation 42 'specmemcore' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecReset(i8* @inner_index_V, i32 1, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:53]   --->   Operation 43 'specreset' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecReset(i32* @frame_count_inner, i32 1, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:56]   --->   Operation 44 'specreset' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%t_V = load i8* @inner_index_V, align 1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:59]   --->   Operation 45 'load' 't_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_none.volatile.i8P(i8* %frame_index_V, i8 %t_V)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:59]   --->   Operation 46 'write' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 47 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecReset(i32* @FRAME_BUFFER_DIM_r, i32 0, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:62]   --->   Operation 47 'specreset' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecReset(i32* @FRAME_OFFSET, i32 0, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:64]   --->   Operation 48 'specreset' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecReset(i8* @FRAME_BUFFER_NUMBER_r, i32 0, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:66]   --->   Operation 49 'specreset' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecReset(i29* @BASE_ADDRESS_r, i32 0, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:68]   --->   Operation 50 'specreset' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (0.00ns)   --->   "br i1 %update_intr_read, label %0, label %._crit_edge138" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:73]   --->   Operation 51 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "store i32 %frame_buffer_dim_rea, i32* @FRAME_BUFFER_DIM_r, align 4" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:76]   --->   Operation 52 'store' <Predicate = (update_intr_read)> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.00ns)   --->   "store i8 %frame_buffer_number_s, i8* @FRAME_BUFFER_NUMBER_r, align 1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:77]   --->   Operation 53 'store' <Predicate = (update_intr_read)> <Delay = 0.00>
ST_1 : Operation 54 [1/1] (0.00ns)   --->   "store i32 %frame_buffer_offset_s, i32* @FRAME_OFFSET, align 4" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:78]   --->   Operation 54 'store' <Predicate = (update_intr_read)> <Delay = 0.00>
ST_1 : Operation 55 [1/1] (0.00ns)   --->   "%trunc_ln = call i29 @_ssdm_op_PartSelect.i29.i32.i32.i32(i32 %base_address_read, i32 3, i32 31)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:79]   --->   Operation 55 'partselect' 'trunc_ln' <Predicate = (update_intr_read)> <Delay = 0.00>
ST_1 : Operation 56 [1/1] (0.00ns)   --->   "store i29 %trunc_ln, i29* @BASE_ADDRESS_r, align 4" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:79]   --->   Operation 56 'store' <Predicate = (update_intr_read)> <Delay = 0.00>
ST_1 : Operation 57 [1/1] (0.00ns)   --->   "br label %._crit_edge138" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:80]   --->   Operation 57 'br' <Predicate = (update_intr_read)> <Delay = 0.00>

State 2 <SV = 1> <Delay = 6.91>
ST_2 : Operation 58 [1/1] (0.00ns)   --->   "%FRAME_OFFSET_load = load i32* @FRAME_OFFSET, align 4" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:84]   --->   Operation 58 'load' 'FRAME_OFFSET_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 59 [1/1] (0.00ns)   --->   "%zext_ln215 = zext i8 %t_V to i35" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:84]   --->   Operation 59 'zext' 'zext_ln215' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 60 [1/1] (0.00ns)   --->   "%zext_ln215_1 = zext i32 %FRAME_OFFSET_load to i35" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:84]   --->   Operation 60 'zext' 'zext_ln215_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 61 [2/2] (6.91ns)   --->   "%ret_V = mul i35 %zext_ln215_1, %zext_ln215" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:84]   --->   Operation 61 'mul' 'ret_V' <Predicate = true> <Delay = 6.91> <Core = "MulnS">   --->   Core 17 'MulnS' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 3 <SV = 2> <Delay = 6.91>
ST_3 : Operation 62 [1/2] (6.91ns)   --->   "%ret_V = mul i35 %zext_ln215_1, %zext_ln215" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:84]   --->   Operation 62 'mul' 'ret_V' <Predicate = true> <Delay = 6.91> <Core = "MulnS">   --->   Core 17 'MulnS' <Latency = 1> <II = 1> <Delay = 6.91> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 63 [1/1] (0.00ns)   --->   "%trunc_ln1 = call i32 @_ssdm_op_PartSelect.i32.i35.i32.i32(i35 %ret_V, i32 3, i32 34)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:84]   --->   Operation 63 'partselect' 'trunc_ln1' <Predicate = true> <Delay = 0.00>

State 4 <SV = 3> <Delay = 2.55>
ST_4 : Operation 64 [1/1] (0.00ns)   --->   "%BASE_ADDRESS_load = load i29* @BASE_ADDRESS_r, align 4" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:84]   --->   Operation 64 'load' 'BASE_ADDRESS_load' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 65 [1/1] (0.00ns)   --->   "%zext_ln84 = zext i29 %BASE_ADDRESS_load to i32" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:84]   --->   Operation 65 'zext' 'zext_ln84' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 66 [1/1] (2.55ns)   --->   "%offset = add i32 %zext_ln84, %trunc_ln1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:84]   --->   Operation 66 'add' 'offset' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 67 [1/1] (1.76ns)   --->   "br label %1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:91]   --->   Operation 67 'br' <Predicate = true> <Delay = 1.76>

State 5 <SV = 4> <Delay = 4.82>
ST_5 : Operation 68 [1/1] (0.00ns)   --->   "%offset_0 = phi i32 [ %offset, %._crit_edge138 ], [ %offset_1, %memcpy.tail ]"   --->   Operation 68 'phi' 'offset_0' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 69 [1/1] (0.00ns)   --->   "%idx_0 = phi i32 [ 0, %._crit_edge138 ], [ %idx, %memcpy.tail ]"   --->   Operation 69 'phi' 'idx_0' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 70 [1/1] (0.00ns)   --->   "%FRAME_BUFFER_DIM_loa = load i32* @FRAME_BUFFER_DIM_r, align 4" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:91]   --->   Operation 70 'load' 'FRAME_BUFFER_DIM_loa' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 71 [1/1] (0.00ns)   --->   "%lshr_ln = call i20 @_ssdm_op_PartSelect.i20.i32.i32.i32(i32 %FRAME_BUFFER_DIM_loa, i32 12, i32 31)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:91]   --->   Operation 71 'partselect' 'lshr_ln' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 72 [1/1] (0.00ns)   --->   "%zext_ln91 = zext i20 %lshr_ln to i32" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:91]   --->   Operation 72 'zext' 'zext_ln91' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 73 [1/1] (2.47ns)   --->   "%icmp_ln91 = icmp ult i32 %idx_0, %zext_ln91" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:91]   --->   Operation 73 'icmp' 'icmp_ln91' <Predicate = true> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.66> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 74 [1/1] (2.55ns)   --->   "%idx = add nsw i32 %idx_0, 1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:91]   --->   Operation 74 'add' 'idx' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 75 [1/1] (0.00ns)   --->   "br i1 %icmp_ln91, label %.preheader.preheader, label %._crit_edge139" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:91]   --->   Operation 75 'br' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 76 [1/1] (1.76ns)   --->   "br label %.preheader" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:98]   --->   Operation 76 'br' <Predicate = (icmp_ln91)> <Delay = 1.76>
ST_5 : Operation 77 [1/1] (0.00ns)   --->   "%FRAME_BUFFER_NUMBER_s = load i8* @FRAME_BUFFER_NUMBER_r, align 1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:145]   --->   Operation 77 'load' 'FRAME_BUFFER_NUMBER_s' <Predicate = (!icmp_ln91)> <Delay = 0.00>
ST_5 : Operation 78 [1/1] (0.00ns)   --->   "%zext_ln145 = zext i8 %FRAME_BUFFER_NUMBER_s to i9" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:145]   --->   Operation 78 'zext' 'zext_ln145' <Predicate = (!icmp_ln91)> <Delay = 0.00>
ST_5 : Operation 79 [1/1] (1.91ns)   --->   "%add_ln145 = add i9 %zext_ln145, -1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:145]   --->   Operation 79 'add' 'add_ln145' <Predicate = (!icmp_ln91)> <Delay = 1.91> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 80 [1/1] (0.00ns)   --->   "%zext_ln879 = zext i8 %t_V to i9" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:145]   --->   Operation 80 'zext' 'zext_ln879' <Predicate = (!icmp_ln91)> <Delay = 0.00>
ST_5 : Operation 81 [1/1] (1.66ns)   --->   "%icmp_ln879 = icmp eq i9 %zext_ln879, %add_ln145" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:145]   --->   Operation 81 'icmp' 'icmp_ln879' <Predicate = (!icmp_ln91)> <Delay = 1.66> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.66> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 82 [1/1] (1.91ns)   --->   "%add_ln700 = add i8 %t_V, 1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:151]   --->   Operation 82 'add' 'add_ln700' <Predicate = (!icmp_ln91)> <Delay = 1.91> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 83 [1/1] (1.24ns)   --->   "%select_ln145 = select i1 %icmp_ln879, i8 0, i8 %add_ln700" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:145]   --->   Operation 83 'select' 'select_ln145' <Predicate = (!icmp_ln91)> <Delay = 1.24> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 84 [1/1] (0.00ns)   --->   "store i8 %select_ln145, i8* @inner_index_V, align 1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:147]   --->   Operation 84 'store' <Predicate = (!icmp_ln91)> <Delay = 0.00>
ST_5 : Operation 85 [1/1] (0.00ns)   --->   "%frame_count_inner_lo = load i32* @frame_count_inner, align 4" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:159]   --->   Operation 85 'load' 'frame_count_inner_lo' <Predicate = (!icmp_ln91)> <Delay = 0.00>
ST_5 : Operation 86 [1/1] (2.55ns)   --->   "%add_ln159 = add nsw i32 %frame_count_inner_lo, 1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:159]   --->   Operation 86 'add' 'add_ln159' <Predicate = (!icmp_ln91)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 87 [1/1] (0.00ns)   --->   "store i32 %add_ln159, i32* @frame_count_inner, align 4" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:159]   --->   Operation 87 'store' <Predicate = (!icmp_ln91)> <Delay = 0.00>
ST_5 : Operation 88 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_none.i32P(i32* %frame_count, i32 %add_ln159)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:160]   --->   Operation 88 'write' <Predicate = (!icmp_ln91)> <Delay = 0.00>
ST_5 : Operation 89 [1/1] (0.00ns)   --->   "ret void" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:162]   --->   Operation 89 'ret' <Predicate = (!icmp_ln91)> <Delay = 0.00>

State 6 <SV = 5> <Delay = 5.67>
ST_6 : Operation 90 [1/1] (0.00ns)   --->   "%indvar_flatten = phi i13 [ %add_ln98, %ifFalse ], [ 0, %.preheader.preheader ]" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:98]   --->   Operation 90 'phi' 'indvar_flatten' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 91 [1/1] (0.00ns)   --->   "%j_0 = phi i10 [ %select_ln98, %ifFalse ], [ 0, %.preheader.preheader ]" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:98]   --->   Operation 91 'phi' 'j_0' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 92 [1/1] (0.00ns)   --->   "%temp_0 = phi i64 [ %temp_1, %ifFalse ], [ 0, %.preheader.preheader ]"   --->   Operation 92 'phi' 'temp_0' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 93 [1/1] (0.00ns)   --->   "%i_0 = phi i4 [ %i, %ifFalse ], [ 0, %.preheader.preheader ]"   --->   Operation 93 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 94 [1/1] (2.09ns)   --->   "%icmp_ln98 = icmp eq i13 %indvar_flatten, -4096" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:98]   --->   Operation 94 'icmp' 'icmp_ln98' <Predicate = true> <Delay = 2.09> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.66> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 95 [1/1] (1.67ns)   --->   "%add_ln98 = add i13 %indvar_flatten, 1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:98]   --->   Operation 95 'add' 'add_ln98' <Predicate = true> <Delay = 1.67> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 96 [1/1] (0.00ns)   --->   "br i1 %icmp_ln98, label %2, label %hls_label_0" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:98]   --->   Operation 96 'br' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 97 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4096, i64 4096, i64 4096)"   --->   Operation 97 'speclooptripcount' 'empty' <Predicate = (!icmp_ln98)> <Delay = 0.00>
ST_6 : Operation 98 [1/1] (1.73ns)   --->   "%add_ln98_1 = add i10 %j_0, 1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:98]   --->   Operation 98 'add' 'add_ln98_1' <Predicate = (!icmp_ln98)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 99 [1/1] (1.30ns)   --->   "%icmp_ln106 = icmp eq i4 %i_0, -8" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:106]   --->   Operation 99 'icmp' 'icmp_ln106' <Predicate = (!icmp_ln98)> <Delay = 1.30> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.66> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 100 [1/1] (0.68ns)   --->   "%select_ln98 = select i1 %icmp_ln106, i10 %add_ln98_1, i10 %j_0" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:98]   --->   Operation 100 'select' 'select_ln98' <Predicate = (!icmp_ln98)> <Delay = 0.68> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 101 [1/1] (0.00ns)   --->   "%tmp_2 = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str7)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:107]   --->   Operation 101 'specregionbegin' 'tmp_2' <Predicate = (!icmp_ln98)> <Delay = 0.00>
ST_6 : Operation 102 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:123]   --->   Operation 102 'specpipeline' <Predicate = (!icmp_ln98)> <Delay = 0.00>
ST_6 : Operation 103 [1/1] (0.00ns)   --->   "%tmp = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %inputStream_V)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:124]   --->   Operation 103 'read' 'tmp' <Predicate = (!icmp_ln98)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_6 : Operation 104 [1/1] (0.00ns)   --->   "%tmp_3 = call i56 @_ssdm_op_PartSelect.i56.i64.i32.i32(i64 %temp_0, i32 8, i32 63)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:129]   --->   Operation 104 'partselect' 'tmp_3' <Predicate = (!icmp_ln98)> <Delay = 0.00>
ST_6 : Operation 105 [1/1] (0.94ns)   --->   "%temp = select i1 %icmp_ln106, i56 0, i56 %tmp_3" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:106]   --->   Operation 105 'select' 'temp' <Predicate = (!icmp_ln98)> <Delay = 0.94> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 106 [1/1] (0.00ns)   --->   "%temp_1 = call i64 @_ssdm_op_BitConcatenate.i64.i8.i56(i8 %tmp, i56 %temp)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:130]   --->   Operation 106 'bitconcatenate' 'temp_1' <Predicate = (!icmp_ln98)> <Delay = 0.00>
ST_6 : Operation 107 [1/1] (0.00ns)   --->   "%empty_9 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str7, i32 %tmp_2)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:134]   --->   Operation 107 'specregionend' 'empty_9' <Predicate = (!icmp_ln98)> <Delay = 0.00>
ST_6 : Operation 108 [1/1] (1.73ns)   --->   "%add_ln106 = add i4 %i_0, 1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:106]   --->   Operation 108 'add' 'add_ln106' <Predicate = (!icmp_ln98)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 109 [1/1] (1.02ns)   --->   "%i = select i1 %icmp_ln106, i4 1, i4 %add_ln106" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:106]   --->   Operation 109 'select' 'i' <Predicate = (!icmp_ln98)> <Delay = 1.02> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 110 [1/1] (1.30ns)   --->   "%icmp_ln106_1 = icmp eq i4 %i, -8" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:106]   --->   Operation 110 'icmp' 'icmp_ln106_1' <Predicate = (!icmp_ln98)> <Delay = 1.30> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.66> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 111 [1/1] (0.00ns)   --->   "br i1 %icmp_ln106_1, label %ifTrue, label %ifFalse" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:106]   --->   Operation 111 'br' <Predicate = (!icmp_ln98)> <Delay = 0.00>
ST_6 : Operation 112 [1/1] (0.00ns)   --->   "%zext_ln135 = zext i10 %select_ln98 to i64" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:135]   --->   Operation 112 'zext' 'zext_ln135' <Predicate = (!icmp_ln98 & icmp_ln106_1)> <Delay = 0.00>
ST_6 : Operation 113 [1/1] (0.00ns)   --->   "%buffer_addr = getelementptr inbounds [512 x i64]* %buffer, i64 0, i64 %zext_ln135" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:135]   --->   Operation 113 'getelementptr' 'buffer_addr' <Predicate = (!icmp_ln98 & icmp_ln106_1)> <Delay = 0.00>
ST_6 : Operation 114 [1/1] (3.25ns)   --->   "store i64 %temp_1, i64* %buffer_addr, align 8" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:135]   --->   Operation 114 'store' <Predicate = (!icmp_ln98 & icmp_ln106_1)> <Delay = 3.25> <Core = "RAM_2P_BRAM">   --->   Core 42 'RAM_2P_BRAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 64> <Depth = 512> <RAM>
ST_6 : Operation 115 [1/1] (0.00ns)   --->   "br label %ifFalse"   --->   Operation 115 'br' <Predicate = (!icmp_ln98 & icmp_ln106_1)> <Delay = 0.00>
ST_6 : Operation 116 [1/1] (0.00ns)   --->   "br label %.preheader"   --->   Operation 116 'br' <Predicate = (!icmp_ln98)> <Delay = 0.00>

State 7 <SV = 6> <Delay = 7.00>
ST_7 : Operation 117 [1/1] (0.00ns)   --->   "%sext_ln139 = sext i32 %offset_0 to i64" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 117 'sext' 'sext_ln139' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 118 [1/1] (0.00ns)   --->   "%base_ddr_addr_addr = getelementptr inbounds i64* %base_ddr_addr, i64 %sext_ln139" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 118 'getelementptr' 'base_ddr_addr_addr' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 119 [1/1] (7.00ns)   --->   "%base_ddr_addr_addr_1 = call i1 @_ssdm_op_WriteReq.m_axi.i64P(i64* %base_ddr_addr_addr, i32 512)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 119 'writereq' 'base_ddr_addr_addr_1' <Predicate = true> <Delay = 7.00> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 120 [1/1] (1.76ns)   --->   "br label %burst.wr.header" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 120 'br' <Predicate = true> <Delay = 1.76>

State 8 <SV = 7> <Delay = 3.25>
ST_8 : Operation 121 [1/1] (0.00ns)   --->   "%phi_ln139 = phi i10 [ 0, %2 ], [ %add_ln139, %burstwrite.region ]" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 121 'phi' 'phi_ln139' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 122 [1/1] (1.77ns)   --->   "%icmp_ln139 = icmp eq i10 %phi_ln139, -512" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 122 'icmp' 'icmp_ln139' <Predicate = true> <Delay = 1.77> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.66> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 123 [1/1] (0.00ns)   --->   "%empty_10 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 512, i64 512, i64 512)"   --->   Operation 123 'speclooptripcount' 'empty_10' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 124 [1/1] (1.73ns)   --->   "%add_ln139 = add i10 %phi_ln139, 1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 124 'add' 'add_ln139' <Predicate = true> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 125 [1/1] (0.00ns)   --->   "br i1 %icmp_ln139, label %memcpy.tail, label %burstwrite.region" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 125 'br' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 126 [1/1] (0.00ns)   --->   "%zext_ln139 = zext i10 %phi_ln139 to i64" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 126 'zext' 'zext_ln139' <Predicate = (!icmp_ln139)> <Delay = 0.00>
ST_8 : Operation 127 [1/1] (0.00ns)   --->   "%buffer_addr_1 = getelementptr [512 x i64]* %buffer, i64 0, i64 %zext_ln139" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 127 'getelementptr' 'buffer_addr_1' <Predicate = (!icmp_ln139)> <Delay = 0.00>
ST_8 : Operation 128 [2/2] (3.25ns)   --->   "%buffer_load = load i64* %buffer_addr_1, align 8" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 128 'load' 'buffer_load' <Predicate = (!icmp_ln139)> <Delay = 3.25> <Core = "RAM_2P_BRAM">   --->   Core 42 'RAM_2P_BRAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 64> <Depth = 512> <RAM>

State 9 <SV = 8> <Delay = 3.25>
ST_9 : Operation 129 [1/2] (3.25ns)   --->   "%buffer_load = load i64* %buffer_addr_1, align 8" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 129 'load' 'buffer_load' <Predicate = (!icmp_ln139)> <Delay = 3.25> <Core = "RAM_2P_BRAM">   --->   Core 42 'RAM_2P_BRAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 64> <Depth = 512> <RAM>

State 10 <SV = 9> <Delay = 7.00>
ST_10 : Operation 130 [1/1] (0.00ns)   --->   "%burstwrite_rbegin = call i32 (...)* @_ssdm_op_SpecRegionBegin([18 x i8]* @burstwrite_OC_region) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 130 'specregionbegin' 'burstwrite_rbegin' <Predicate = (!icmp_ln139)> <Delay = 0.00>
ST_10 : Operation 131 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str8)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 131 'specpipeline' <Predicate = (!icmp_ln139)> <Delay = 0.00>
ST_10 : Operation 132 [1/1] (0.00ns)   --->   "%empty_11 = call i32 (...)* @_ssdm_op_SpecLoopName([32 x i8]* @memcpy_OC_base_ddr_a) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 132 'specloopname' 'empty_11' <Predicate = (!icmp_ln139)> <Delay = 0.00>
ST_10 : Operation 133 [1/1] (7.00ns)   --->   "call void @_ssdm_op_Write.m_axi.i64P(i64* %base_ddr_addr_addr, i64 %buffer_load, i8 -1)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 133 'write' <Predicate = (!icmp_ln139)> <Delay = 7.00> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 134 [1/1] (0.00ns)   --->   "%burstwrite_rend = call i32 (...)* @_ssdm_op_SpecRegionEnd([18 x i8]* @burstwrite_OC_region, i32 %burstwrite_rbegin) nounwind" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 134 'specregionend' 'burstwrite_rend' <Predicate = (!icmp_ln139)> <Delay = 0.00>
ST_10 : Operation 135 [1/1] (0.00ns)   --->   "br label %burst.wr.header" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 135 'br' <Predicate = (!icmp_ln139)> <Delay = 0.00>

State 11 <SV = 8> <Delay = 7.00>
ST_11 : Operation 136 [5/5] (7.00ns)   --->   "%base_ddr_addr_addr_1_1 = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %base_ddr_addr_addr)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 136 'writeresp' 'base_ddr_addr_addr_1_1' <Predicate = true> <Delay = 7.00> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 137 [1/1] (2.55ns)   --->   "%offset_1 = add i32 %offset_0, 512" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:141]   --->   Operation 137 'add' 'offset_1' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 12 <SV = 9> <Delay = 7.00>
ST_12 : Operation 138 [4/5] (7.00ns)   --->   "%base_ddr_addr_addr_1_1 = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %base_ddr_addr_addr)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 138 'writeresp' 'base_ddr_addr_addr_1_1' <Predicate = true> <Delay = 7.00> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 13 <SV = 10> <Delay = 7.00>
ST_13 : Operation 139 [3/5] (7.00ns)   --->   "%base_ddr_addr_addr_1_1 = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %base_ddr_addr_addr)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 139 'writeresp' 'base_ddr_addr_addr_1_1' <Predicate = true> <Delay = 7.00> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 14 <SV = 11> <Delay = 7.00>
ST_14 : Operation 140 [2/5] (7.00ns)   --->   "%base_ddr_addr_addr_1_1 = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %base_ddr_addr_addr)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 140 'writeresp' 'base_ddr_addr_addr_1_1' <Predicate = true> <Delay = 7.00> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 15 <SV = 12> <Delay = 7.00>
ST_15 : Operation 141 [1/5] (7.00ns)   --->   "%base_ddr_addr_addr_1_1 = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %base_ddr_addr_addr)" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139]   --->   Operation 141 'writeresp' 'base_ddr_addr_addr_1_1' <Predicate = true> <Delay = 7.00> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_15 : Operation 142 [1/1] (0.00ns)   --->   "br label %1" [AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:91]   --->   Operation 142 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 8ns, clock uncertainty: 1ns.

 <State 1>: 1ns
The critical path consists of the following:
	s_axi read on port 'update_intr' [26]  (1 ns)

 <State 2>: 6.91ns
The critical path consists of the following:
	'load' operation ('i_op', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:84) on static variable 'FRAME_OFFSET' [62]  (0 ns)
	'mul' operation ('ret.V', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:84) [65]  (6.91 ns)

 <State 3>: 6.91ns
The critical path consists of the following:
	'mul' operation ('ret.V', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:84) [65]  (6.91 ns)

 <State 4>: 2.55ns
The critical path consists of the following:
	'load' operation ('BASE_ADDRESS_load', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:84) on static variable 'BASE_ADDRESS_r' [60]  (0 ns)
	'add' operation ('offset', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:84) [67]  (2.55 ns)

 <State 5>: 4.82ns
The critical path consists of the following:
	'load' operation ('FRAME_BUFFER_NUMBER_s', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:145) on static variable 'FRAME_BUFFER_NUMBER_r' [137]  (0 ns)
	'add' operation ('op2', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:145) [139]  (1.92 ns)
	'icmp' operation ('icmp_ln879', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:145) [141]  (1.66 ns)
	'select' operation ('select_ln145', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:145) [143]  (1.25 ns)

 <State 6>: 5.67ns
The critical path consists of the following:
	'phi' operation ('j_0', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:98) with incoming values : ('select_ln98', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:98) [82]  (0 ns)
	'add' operation ('add_ln98_1', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:98) [90]  (1.73 ns)
	'select' operation ('select_ln98', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:98) [92]  (0.687 ns)
	'getelementptr' operation ('buffer_addr', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:135) [106]  (0 ns)
	'store' operation ('store_ln135', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:135) of variable 'temp', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:130 on array 'buffer', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:47 [107]  (3.25 ns)

 <State 7>: 7ns
The critical path consists of the following:
	'getelementptr' operation ('base_ddr_addr_addr', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139) [113]  (0 ns)
	bus request on port 'base_ddr_addr' (AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139) [114]  (7 ns)

 <State 8>: 3.25ns
The critical path consists of the following:
	'phi' operation ('phi_ln139', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139) with incoming values : ('add_ln139', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139) [117]  (0 ns)
	'getelementptr' operation ('buffer_addr_1', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139) [127]  (0 ns)
	'load' operation ('buffer_load', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139) on array 'buffer', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:47 [128]  (3.25 ns)

 <State 9>: 3.25ns
The critical path consists of the following:
	'load' operation ('buffer_load', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139) on array 'buffer', AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:47 [128]  (3.25 ns)

 <State 10>: 7ns
The critical path consists of the following:
	bus write on port 'base_ddr_addr' (AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139) [129]  (7 ns)

 <State 11>: 7ns
The critical path consists of the following:
	bus access on port 'base_ddr_addr' (AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139) [133]  (7 ns)

 <State 12>: 7ns
The critical path consists of the following:
	bus access on port 'base_ddr_addr' (AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139) [133]  (7 ns)

 <State 13>: 7ns
The critical path consists of the following:
	bus access on port 'base_ddr_addr' (AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139) [133]  (7 ns)

 <State 14>: 7ns
The critical path consists of the following:
	bus access on port 'base_ddr_addr' (AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139) [133]  (7 ns)

 <State 15>: 7ns
The critical path consists of the following:
	bus access on port 'base_ddr_addr' (AXIS_TO_DDR_WRITER_AXILITE/axis_to_ddr_writer.cpp:139) [133]  (7 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
