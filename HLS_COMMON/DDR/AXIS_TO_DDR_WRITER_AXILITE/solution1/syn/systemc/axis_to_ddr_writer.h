// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _axis_to_ddr_writer_HH_
#define _axis_to_ddr_writer_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "axis_to_ddr_writecud.h"
#include "axis_to_ddr_writebkb.h"
#include "axis_to_ddr_writer_AXILiteS_s_axi.h"
#include "axis_to_ddr_writer_base_ddr_addr_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_BASE_DDR_ADDR_ID_WIDTH = 1,
         unsigned int C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH = 64,
         unsigned int C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct axis_to_ddr_writer : public sc_module {
    // Port declarations 70
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<8> > inputStream_V_TDATA;
    sc_in< sc_logic > inputStream_V_TVALID;
    sc_out< sc_logic > inputStream_V_TREADY;
    sc_out< sc_logic > m_axi_base_ddr_addr_AWVALID;
    sc_in< sc_logic > m_axi_base_ddr_addr_AWREADY;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH> > m_axi_base_ddr_addr_AWADDR;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_ID_WIDTH> > m_axi_base_ddr_addr_AWID;
    sc_out< sc_lv<8> > m_axi_base_ddr_addr_AWLEN;
    sc_out< sc_lv<3> > m_axi_base_ddr_addr_AWSIZE;
    sc_out< sc_lv<2> > m_axi_base_ddr_addr_AWBURST;
    sc_out< sc_lv<2> > m_axi_base_ddr_addr_AWLOCK;
    sc_out< sc_lv<4> > m_axi_base_ddr_addr_AWCACHE;
    sc_out< sc_lv<3> > m_axi_base_ddr_addr_AWPROT;
    sc_out< sc_lv<4> > m_axi_base_ddr_addr_AWQOS;
    sc_out< sc_lv<4> > m_axi_base_ddr_addr_AWREGION;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH> > m_axi_base_ddr_addr_AWUSER;
    sc_out< sc_logic > m_axi_base_ddr_addr_WVALID;
    sc_in< sc_logic > m_axi_base_ddr_addr_WREADY;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH> > m_axi_base_ddr_addr_WDATA;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH/8> > m_axi_base_ddr_addr_WSTRB;
    sc_out< sc_logic > m_axi_base_ddr_addr_WLAST;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_ID_WIDTH> > m_axi_base_ddr_addr_WID;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH> > m_axi_base_ddr_addr_WUSER;
    sc_out< sc_logic > m_axi_base_ddr_addr_ARVALID;
    sc_in< sc_logic > m_axi_base_ddr_addr_ARREADY;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH> > m_axi_base_ddr_addr_ARADDR;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_ID_WIDTH> > m_axi_base_ddr_addr_ARID;
    sc_out< sc_lv<8> > m_axi_base_ddr_addr_ARLEN;
    sc_out< sc_lv<3> > m_axi_base_ddr_addr_ARSIZE;
    sc_out< sc_lv<2> > m_axi_base_ddr_addr_ARBURST;
    sc_out< sc_lv<2> > m_axi_base_ddr_addr_ARLOCK;
    sc_out< sc_lv<4> > m_axi_base_ddr_addr_ARCACHE;
    sc_out< sc_lv<3> > m_axi_base_ddr_addr_ARPROT;
    sc_out< sc_lv<4> > m_axi_base_ddr_addr_ARQOS;
    sc_out< sc_lv<4> > m_axi_base_ddr_addr_ARREGION;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH> > m_axi_base_ddr_addr_ARUSER;
    sc_in< sc_logic > m_axi_base_ddr_addr_RVALID;
    sc_out< sc_logic > m_axi_base_ddr_addr_RREADY;
    sc_in< sc_uint<C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH> > m_axi_base_ddr_addr_RDATA;
    sc_in< sc_logic > m_axi_base_ddr_addr_RLAST;
    sc_in< sc_uint<C_M_AXI_BASE_DDR_ADDR_ID_WIDTH> > m_axi_base_ddr_addr_RID;
    sc_in< sc_uint<C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH> > m_axi_base_ddr_addr_RUSER;
    sc_in< sc_lv<2> > m_axi_base_ddr_addr_RRESP;
    sc_in< sc_logic > m_axi_base_ddr_addr_BVALID;
    sc_out< sc_logic > m_axi_base_ddr_addr_BREADY;
    sc_in< sc_lv<2> > m_axi_base_ddr_addr_BRESP;
    sc_in< sc_uint<C_M_AXI_BASE_DDR_ADDR_ID_WIDTH> > m_axi_base_ddr_addr_BID;
    sc_in< sc_uint<C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH> > m_axi_base_ddr_addr_BUSER;
    sc_out< sc_lv<8> > frame_index_V;
    sc_out< sc_lv<32> > frame_count;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const5;
    sc_signal< sc_lv<4> > ap_var_for_const6;
    sc_signal< sc_lv<32> > ap_var_for_const7;
    sc_signal< sc_lv<3> > ap_var_for_const4;
    sc_signal< sc_lv<8> > ap_var_for_const8;


    // Module declarations
    axis_to_ddr_writer(sc_module_name name);
    SC_HAS_PROCESS(axis_to_ddr_writer);

    ~axis_to_ddr_writer();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    axis_to_ddr_writer_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* axis_to_ddr_writer_AXILiteS_s_axi_U;
    axis_to_ddr_writer_base_ddr_addr_m_axi<0,64,32,5,16,16,16,16,C_M_AXI_BASE_DDR_ADDR_ID_WIDTH,C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH,C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH,C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR,C_M_AXI_BASE_DDR_ADDR_USER_VALUE,C_M_AXI_BASE_DDR_ADDR_PROT_VALUE,C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE>* axis_to_ddr_writer_base_ddr_addr_m_axi_U;
    axis_to_ddr_writebkb* buffer_U;
    axis_to_ddr_writecud<1,2,32,8,35>* axis_to_ddr_writecud_U1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<13> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<8> > inputStream_V_0_data_out;
    sc_signal< sc_logic > inputStream_V_0_vld_in;
    sc_signal< sc_logic > inputStream_V_0_vld_out;
    sc_signal< sc_logic > inputStream_V_0_ack_in;
    sc_signal< sc_logic > inputStream_V_0_ack_out;
    sc_signal< sc_lv<8> > inputStream_V_0_payload_A;
    sc_signal< sc_lv<8> > inputStream_V_0_payload_B;
    sc_signal< sc_logic > inputStream_V_0_sel_rd;
    sc_signal< sc_logic > inputStream_V_0_sel_wr;
    sc_signal< sc_logic > inputStream_V_0_sel;
    sc_signal< sc_logic > inputStream_V_0_load_A;
    sc_signal< sc_logic > inputStream_V_0_load_B;
    sc_signal< sc_lv<2> > inputStream_V_0_state;
    sc_signal< sc_logic > inputStream_V_0_state_cmp_full;
    sc_signal< sc_lv<32> > base_address;
    sc_signal< sc_lv<32> > frame_buffer_dim;
    sc_signal< sc_lv<32> > frame_buffer_offset;
    sc_signal< sc_lv<8> > frame_buffer_number;
    sc_signal< sc_logic > update_intr;
    sc_signal< sc_lv<8> > inner_index_V;
    sc_signal< sc_lv<32> > FRAME_BUFFER_DIM_r;
    sc_signal< sc_lv<8> > FRAME_BUFFER_NUMBER_r;
    sc_signal< sc_lv<32> > FRAME_OFFSET;
    sc_signal< sc_lv<29> > BASE_ADDRESS_r;
    sc_signal< sc_lv<32> > frame_count_inner;
    sc_signal< sc_logic > inputStream_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > icmp_ln98_fu_499_p2;
    sc_signal< sc_logic > base_ddr_addr_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > base_ddr_addr_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > icmp_ln139_reg_688;
    sc_signal< sc_lv<1> > icmp_ln139_reg_688_pp1_iter1_reg;
    sc_signal< sc_logic > base_ddr_addr_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > base_ddr_addr_AWVALID;
    sc_signal< sc_logic > base_ddr_addr_AWREADY;
    sc_signal< sc_lv<32> > base_ddr_addr_AWADDR;
    sc_signal< sc_logic > base_ddr_addr_WVALID;
    sc_signal< sc_logic > base_ddr_addr_WREADY;
    sc_signal< sc_logic > base_ddr_addr_ARREADY;
    sc_signal< sc_logic > base_ddr_addr_RVALID;
    sc_signal< sc_lv<64> > base_ddr_addr_RDATA;
    sc_signal< sc_logic > base_ddr_addr_RLAST;
    sc_signal< sc_lv<1> > base_ddr_addr_RID;
    sc_signal< sc_lv<1> > base_ddr_addr_RUSER;
    sc_signal< sc_lv<2> > base_ddr_addr_RRESP;
    sc_signal< sc_logic > base_ddr_addr_BVALID;
    sc_signal< sc_logic > base_ddr_addr_BREADY;
    sc_signal< sc_lv<2> > base_ddr_addr_BRESP;
    sc_signal< sc_lv<1> > base_ddr_addr_BID;
    sc_signal< sc_lv<1> > base_ddr_addr_BUSER;
    sc_signal< sc_lv<10> > phi_ln139_reg_320;
    sc_signal< sc_lv<8> > t_V_reg_620;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > trunc_ln1_reg_637;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > offset_fu_405_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln91_fu_428_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > idx_fu_434_p2;
    sc_signal< sc_lv<32> > idx_reg_651;
    sc_signal< sc_lv<13> > add_ln98_fu_505_p2;
    sc_signal< bool > ap_block_state6;
    sc_signal< sc_lv<10> > select_ln98_fu_523_p3;
    sc_signal< sc_lv<64> > temp_1_fu_549_p3;
    sc_signal< sc_lv<4> > i_fu_564_p3;
    sc_signal< sc_lv<1> > icmp_ln139_fu_594_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state8_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state10_pp1_stage0_iter2;
    sc_signal< bool > ap_block_state10_io;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<10> > add_ln139_fu_600_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<64> > buffer_q0;
    sc_signal< sc_lv<64> > buffer_load_reg_702;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_lv<32> > offset_1_fu_611_p2;
    sc_signal< sc_lv<32> > offset_1_reg_707;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state8;
    sc_signal< sc_lv<9> > buffer_address0;
    sc_signal< sc_logic > buffer_ce0;
    sc_signal< sc_lv<9> > buffer_address1;
    sc_signal< sc_logic > buffer_ce1;
    sc_signal< sc_logic > buffer_we1;
    sc_signal< sc_lv<64> > buffer_d1;
    sc_signal< sc_lv<32> > offset_0_reg_255;
    sc_signal< sc_lv<32> > idx_0_reg_265;
    sc_signal< sc_lv<13> > indvar_flatten_reg_276;
    sc_signal< sc_lv<10> > j_0_reg_287;
    sc_signal< sc_lv<64> > temp_0_reg_298;
    sc_signal< sc_lv<4> > i_0_reg_309;
    sc_signal< sc_lv<64> > zext_ln135_fu_578_p1;
    sc_signal< sc_lv<1> > icmp_ln106_1_fu_572_p2;
    sc_signal< sc_lv<64> > zext_ln139_fu_606_p1;
    sc_signal< sc_lv<64> > sext_ln139_fu_583_p1;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_lv<8> > select_ln145_fu_468_p3;
    sc_signal< sc_lv<1> > update_intr_read_read_fu_166_p2;
    sc_signal< sc_lv<32> > add_ln159_fu_486_p2;
    sc_signal< sc_lv<8> > frame_index_V_preg;
    sc_signal< sc_lv<32> > grp_fu_381_p0;
    sc_signal< sc_lv<8> > grp_fu_381_p1;
    sc_signal< sc_lv<35> > grp_fu_381_p2;
    sc_signal< sc_lv<32> > zext_ln84_fu_401_p1;
    sc_signal< sc_lv<20> > lshr_ln_fu_414_p4;
    sc_signal< sc_lv<32> > zext_ln91_fu_424_p1;
    sc_signal< sc_lv<9> > zext_ln145_fu_444_p1;
    sc_signal< sc_lv<9> > zext_ln879_fu_454_p1;
    sc_signal< sc_lv<9> > add_ln145_fu_448_p2;
    sc_signal< sc_lv<1> > icmp_ln879_fu_457_p2;
    sc_signal< sc_lv<8> > add_ln700_fu_463_p2;
    sc_signal< sc_lv<1> > icmp_ln106_fu_517_p2;
    sc_signal< sc_lv<10> > add_ln98_1_fu_511_p2;
    sc_signal< sc_lv<56> > tmp_3_fu_531_p4;
    sc_signal< sc_lv<56> > temp_fu_541_p3;
    sc_signal< sc_lv<4> > add_ln106_fu_558_p2;
    sc_signal< sc_lv<13> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_lv<35> > grp_fu_381_p00;
    sc_signal< sc_lv<35> > grp_fu_381_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<13> ap_ST_fsm_state1;
    static const sc_lv<13> ap_ST_fsm_state2;
    static const sc_lv<13> ap_ST_fsm_state3;
    static const sc_lv<13> ap_ST_fsm_state4;
    static const sc_lv<13> ap_ST_fsm_state5;
    static const sc_lv<13> ap_ST_fsm_state6;
    static const sc_lv<13> ap_ST_fsm_state7;
    static const sc_lv<13> ap_ST_fsm_pp1_stage0;
    static const sc_lv<13> ap_ST_fsm_state11;
    static const sc_lv<13> ap_ST_fsm_state12;
    static const sc_lv<13> ap_ST_fsm_state13;
    static const sc_lv<13> ap_ST_fsm_state14;
    static const sc_lv<13> ap_ST_fsm_state15;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_C;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR;
    static const int C_M_AXI_BASE_DDR_ADDR_USER_VALUE;
    static const int C_M_AXI_BASE_DDR_ADDR_PROT_VALUE;
    static const int C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_200;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_22;
    static const sc_lv<9> ap_const_lv9_1FF;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<13> ap_const_lv13_1000;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<56> ap_const_lv56_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<10> ap_const_lv10_200;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const8();
    void thread_ap_clk_no_reset_();
    void thread_add_ln106_fu_558_p2();
    void thread_add_ln139_fu_600_p2();
    void thread_add_ln145_fu_448_p2();
    void thread_add_ln159_fu_486_p2();
    void thread_add_ln700_fu_463_p2();
    void thread_add_ln98_1_fu_511_p2();
    void thread_add_ln98_fu_505_p2();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state10_io();
    void thread_ap_block_state10_pp1_stage0_iter2();
    void thread_ap_block_state6();
    void thread_ap_block_state8_pp1_stage0_iter0();
    void thread_ap_block_state9_pp1_stage0_iter1();
    void thread_ap_condition_pp1_exit_iter0_state8();
    void thread_ap_done();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_base_ddr_addr_AWADDR();
    void thread_base_ddr_addr_AWVALID();
    void thread_base_ddr_addr_BREADY();
    void thread_base_ddr_addr_WVALID();
    void thread_base_ddr_addr_blk_n_AW();
    void thread_base_ddr_addr_blk_n_B();
    void thread_base_ddr_addr_blk_n_W();
    void thread_buffer_address0();
    void thread_buffer_address1();
    void thread_buffer_ce0();
    void thread_buffer_ce1();
    void thread_buffer_d1();
    void thread_buffer_we1();
    void thread_frame_count();
    void thread_frame_index_V();
    void thread_grp_fu_381_p0();
    void thread_grp_fu_381_p00();
    void thread_grp_fu_381_p1();
    void thread_grp_fu_381_p10();
    void thread_i_fu_564_p3();
    void thread_icmp_ln106_1_fu_572_p2();
    void thread_icmp_ln106_fu_517_p2();
    void thread_icmp_ln139_fu_594_p2();
    void thread_icmp_ln879_fu_457_p2();
    void thread_icmp_ln91_fu_428_p2();
    void thread_icmp_ln98_fu_499_p2();
    void thread_idx_fu_434_p2();
    void thread_inputStream_V_0_ack_in();
    void thread_inputStream_V_0_ack_out();
    void thread_inputStream_V_0_data_out();
    void thread_inputStream_V_0_load_A();
    void thread_inputStream_V_0_load_B();
    void thread_inputStream_V_0_sel();
    void thread_inputStream_V_0_state_cmp_full();
    void thread_inputStream_V_0_vld_in();
    void thread_inputStream_V_0_vld_out();
    void thread_inputStream_V_TDATA_blk_n();
    void thread_inputStream_V_TREADY();
    void thread_lshr_ln_fu_414_p4();
    void thread_offset_1_fu_611_p2();
    void thread_offset_fu_405_p2();
    void thread_select_ln145_fu_468_p3();
    void thread_select_ln98_fu_523_p3();
    void thread_sext_ln139_fu_583_p1();
    void thread_temp_1_fu_549_p3();
    void thread_temp_fu_541_p3();
    void thread_tmp_3_fu_531_p4();
    void thread_update_intr_read_read_fu_166_p2();
    void thread_zext_ln135_fu_578_p1();
    void thread_zext_ln139_fu_606_p1();
    void thread_zext_ln145_fu_444_p1();
    void thread_zext_ln84_fu_401_p1();
    void thread_zext_ln879_fu_454_p1();
    void thread_zext_ln91_fu_424_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
