-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axis_to_ddr_writer is
generic (
    C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BASE_DDR_ADDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inputStream_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    inputStream_V_TVALID : IN STD_LOGIC;
    inputStream_V_TREADY : OUT STD_LOGIC;
    m_axi_base_ddr_addr_AWVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_AWREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_base_ddr_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_WREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH/8-1 downto 0);
    m_axi_base_ddr_addr_WLAST : OUT STD_LOGIC;
    m_axi_base_ddr_addr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_ARREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_base_ddr_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RVALID : IN STD_LOGIC;
    m_axi_base_ddr_addr_RREADY : OUT STD_LOGIC;
    m_axi_base_ddr_addr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RLAST : IN STD_LOGIC;
    m_axi_base_ddr_addr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_BVALID : IN STD_LOGIC;
    m_axi_base_ddr_addr_BREADY : OUT STD_LOGIC;
    m_axi_base_ddr_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH-1 downto 0);
    frame_index_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    frame_count : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of axis_to_ddr_writer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axis_to_ddr_writer,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=2,HLS_SYN_FF=1422,HLS_SYN_LUT=1698,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inputStream_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inputStream_V_0_vld_in : STD_LOGIC;
    signal inputStream_V_0_vld_out : STD_LOGIC;
    signal inputStream_V_0_ack_in : STD_LOGIC;
    signal inputStream_V_0_ack_out : STD_LOGIC;
    signal inputStream_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inputStream_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inputStream_V_0_sel_rd : STD_LOGIC := '0';
    signal inputStream_V_0_sel_wr : STD_LOGIC := '0';
    signal inputStream_V_0_sel : STD_LOGIC;
    signal inputStream_V_0_load_A : STD_LOGIC;
    signal inputStream_V_0_load_B : STD_LOGIC;
    signal inputStream_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inputStream_V_0_state_cmp_full : STD_LOGIC;
    signal base_address : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_dim : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_number : STD_LOGIC_VECTOR (7 downto 0);
    signal update_intr : STD_LOGIC;
    signal inner_index_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal FRAME_BUFFER_DIM_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001001011000000000000";
    signal FRAME_BUFFER_NUMBER_r : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    signal FRAME_OFFSET : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001001011000000000000";
    signal BASE_ADDRESS_r : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal frame_count_inner : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal inputStream_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln98_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal base_ddr_addr_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln139_reg_688 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln139_reg_688_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal base_ddr_addr_AWVALID : STD_LOGIC;
    signal base_ddr_addr_AWREADY : STD_LOGIC;
    signal base_ddr_addr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal base_ddr_addr_WVALID : STD_LOGIC;
    signal base_ddr_addr_WREADY : STD_LOGIC;
    signal base_ddr_addr_ARREADY : STD_LOGIC;
    signal base_ddr_addr_RVALID : STD_LOGIC;
    signal base_ddr_addr_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal base_ddr_addr_RLAST : STD_LOGIC;
    signal base_ddr_addr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_BVALID : STD_LOGIC;
    signal base_ddr_addr_BREADY : STD_LOGIC;
    signal base_ddr_addr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln139_reg_320 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_V_reg_620 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln1_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal offset_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln91_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal idx_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln98_fu_505_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal select_ln98_fu_523_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp_1_fu_549_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_564_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln139_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln139_fu_600_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal buffer_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_load_reg_702 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal offset_1_fu_611_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_1_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_ce1 : STD_LOGIC;
    signal buffer_we1 : STD_LOGIC;
    signal buffer_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal offset_0_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_0_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_276 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_0_reg_287 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp_0_reg_298 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_309 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln135_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln106_1_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln139_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln139_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal select_ln145_fu_468_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal update_intr_read_read_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln159_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_index_V_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal grp_fu_381_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_381_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_381_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln84_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_414_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln91_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln145_fu_444_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln879_fu_454_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln145_fu_448_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln879_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_fu_463_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln106_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln98_1_fu_511_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_531_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal temp_fu_541_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln106_fu_558_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_381_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_381_p10 : STD_LOGIC_VECTOR (34 downto 0);

    component axis_to_ddr_writecud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component axis_to_ddr_writebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component axis_to_ddr_writer_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        base_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer_dim : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer_number : OUT STD_LOGIC_VECTOR (7 downto 0);
        update_intr : OUT STD_LOGIC );
    end component;


    component axis_to_ddr_writer_base_ddr_addr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    axis_to_ddr_writer_AXILiteS_s_axi_U : component axis_to_ddr_writer_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        base_address => base_address,
        frame_buffer_dim => frame_buffer_dim,
        frame_buffer_offset => frame_buffer_offset,
        frame_buffer_number => frame_buffer_number,
        update_intr => update_intr);

    axis_to_ddr_writer_base_ddr_addr_m_axi_U : component axis_to_ddr_writer_base_ddr_addr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BASE_DDR_ADDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_BASE_DDR_ADDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BASE_DDR_ADDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_base_ddr_addr_AWVALID,
        AWREADY => m_axi_base_ddr_addr_AWREADY,
        AWADDR => m_axi_base_ddr_addr_AWADDR,
        AWID => m_axi_base_ddr_addr_AWID,
        AWLEN => m_axi_base_ddr_addr_AWLEN,
        AWSIZE => m_axi_base_ddr_addr_AWSIZE,
        AWBURST => m_axi_base_ddr_addr_AWBURST,
        AWLOCK => m_axi_base_ddr_addr_AWLOCK,
        AWCACHE => m_axi_base_ddr_addr_AWCACHE,
        AWPROT => m_axi_base_ddr_addr_AWPROT,
        AWQOS => m_axi_base_ddr_addr_AWQOS,
        AWREGION => m_axi_base_ddr_addr_AWREGION,
        AWUSER => m_axi_base_ddr_addr_AWUSER,
        WVALID => m_axi_base_ddr_addr_WVALID,
        WREADY => m_axi_base_ddr_addr_WREADY,
        WDATA => m_axi_base_ddr_addr_WDATA,
        WSTRB => m_axi_base_ddr_addr_WSTRB,
        WLAST => m_axi_base_ddr_addr_WLAST,
        WID => m_axi_base_ddr_addr_WID,
        WUSER => m_axi_base_ddr_addr_WUSER,
        ARVALID => m_axi_base_ddr_addr_ARVALID,
        ARREADY => m_axi_base_ddr_addr_ARREADY,
        ARADDR => m_axi_base_ddr_addr_ARADDR,
        ARID => m_axi_base_ddr_addr_ARID,
        ARLEN => m_axi_base_ddr_addr_ARLEN,
        ARSIZE => m_axi_base_ddr_addr_ARSIZE,
        ARBURST => m_axi_base_ddr_addr_ARBURST,
        ARLOCK => m_axi_base_ddr_addr_ARLOCK,
        ARCACHE => m_axi_base_ddr_addr_ARCACHE,
        ARPROT => m_axi_base_ddr_addr_ARPROT,
        ARQOS => m_axi_base_ddr_addr_ARQOS,
        ARREGION => m_axi_base_ddr_addr_ARREGION,
        ARUSER => m_axi_base_ddr_addr_ARUSER,
        RVALID => m_axi_base_ddr_addr_RVALID,
        RREADY => m_axi_base_ddr_addr_RREADY,
        RDATA => m_axi_base_ddr_addr_RDATA,
        RLAST => m_axi_base_ddr_addr_RLAST,
        RID => m_axi_base_ddr_addr_RID,
        RUSER => m_axi_base_ddr_addr_RUSER,
        RRESP => m_axi_base_ddr_addr_RRESP,
        BVALID => m_axi_base_ddr_addr_BVALID,
        BREADY => m_axi_base_ddr_addr_BREADY,
        BRESP => m_axi_base_ddr_addr_BRESP,
        BID => m_axi_base_ddr_addr_BID,
        BUSER => m_axi_base_ddr_addr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => base_ddr_addr_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => base_ddr_addr_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => base_ddr_addr_RDATA,
        I_RID => base_ddr_addr_RID,
        I_RUSER => base_ddr_addr_RUSER,
        I_RRESP => base_ddr_addr_RRESP,
        I_RLAST => base_ddr_addr_RLAST,
        I_AWVALID => base_ddr_addr_AWVALID,
        I_AWREADY => base_ddr_addr_AWREADY,
        I_AWADDR => base_ddr_addr_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_200,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => base_ddr_addr_WVALID,
        I_WREADY => base_ddr_addr_WREADY,
        I_WDATA => buffer_load_reg_702,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_FF,
        I_BVALID => base_ddr_addr_BVALID,
        I_BREADY => base_ddr_addr_BREADY,
        I_BRESP => base_ddr_addr_BRESP,
        I_BID => base_ddr_addr_BID,
        I_BUSER => base_ddr_addr_BUSER);

    buffer_U : component axis_to_ddr_writebkb
    generic map (
        DataWidth => 64,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        q0 => buffer_q0,
        address1 => buffer_address1,
        ce1 => buffer_ce1,
        we1 => buffer_we1,
        d1 => buffer_d1);

    axis_to_ddr_writecud_U1 : component axis_to_ddr_writecud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_381_p0,
        din1 => grp_fu_381_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_381_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((base_ddr_addr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((base_ddr_addr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    frame_count_inner_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                frame_count_inner <= ap_const_lv32_0;
            else
                if (((icmp_ln91_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    frame_count_inner <= add_ln159_fu_486_p2;
                end if; 
            end if;
        end if;
    end process;


    frame_index_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                frame_index_V_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    frame_index_V_preg <= inner_index_V;
                end if; 
            end if;
        end if;
    end process;


    inner_index_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inner_index_V <= ap_const_lv8_0;
            else
                if (((icmp_ln91_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    inner_index_V <= select_ln145_fu_468_p3;
                end if; 
            end if;
        end if;
    end process;


    inputStream_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inputStream_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inputStream_V_0_ack_out = ap_const_logic_1) and (inputStream_V_0_vld_out = ap_const_logic_1))) then 
                                        inputStream_V_0_sel_rd <= not(inputStream_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inputStream_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inputStream_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inputStream_V_0_ack_in = ap_const_logic_1) and (inputStream_V_0_vld_in = ap_const_logic_1))) then 
                                        inputStream_V_0_sel_wr <= not(inputStream_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inputStream_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inputStream_V_0_state <= ap_const_lv2_0;
            else
                if ((((inputStream_V_0_state = ap_const_lv2_2) and (inputStream_V_0_vld_in = ap_const_logic_0)) or ((inputStream_V_0_state = ap_const_lv2_3) and (inputStream_V_0_vld_in = ap_const_logic_0) and (inputStream_V_0_ack_out = ap_const_logic_1)))) then 
                    inputStream_V_0_state <= ap_const_lv2_2;
                elsif ((((inputStream_V_0_state = ap_const_lv2_1) and (inputStream_V_0_ack_out = ap_const_logic_0)) or ((inputStream_V_0_state = ap_const_lv2_3) and (inputStream_V_0_ack_out = ap_const_logic_0) and (inputStream_V_0_vld_in = ap_const_logic_1)))) then 
                    inputStream_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inputStream_V_0_vld_in = ap_const_logic_0) and (inputStream_V_0_ack_out = ap_const_logic_1))) and not(((inputStream_V_0_ack_out = ap_const_logic_0) and (inputStream_V_0_vld_in = ap_const_logic_1))) and (inputStream_V_0_state = ap_const_lv2_3)) or ((inputStream_V_0_state = ap_const_lv2_1) and (inputStream_V_0_ack_out = ap_const_logic_1)) or ((inputStream_V_0_state = ap_const_lv2_2) and (inputStream_V_0_vld_in = ap_const_logic_1)))) then 
                    inputStream_V_0_state <= ap_const_lv2_3;
                else 
                    inputStream_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_reg_309 <= ap_const_lv4_0;
            elsif ((not(((icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (inputStream_V_0_vld_out = ap_const_logic_0))) and (icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_0_reg_309 <= i_fu_564_p3;
            end if; 
        end if;
    end process;

    idx_0_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((base_ddr_addr_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                idx_0_reg_265 <= idx_reg_651;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                idx_0_reg_265 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                indvar_flatten_reg_276 <= ap_const_lv13_0;
            elsif ((not(((icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (inputStream_V_0_vld_out = ap_const_logic_0))) and (icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                indvar_flatten_reg_276 <= add_ln98_fu_505_p2;
            end if; 
        end if;
    end process;

    j_0_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_0_reg_287 <= ap_const_lv10_0;
            elsif ((not(((icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (inputStream_V_0_vld_out = ap_const_logic_0))) and (icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_0_reg_287 <= select_ln98_fu_523_p3;
            end if; 
        end if;
    end process;

    offset_0_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((base_ddr_addr_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                offset_0_reg_255 <= offset_1_reg_707;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                offset_0_reg_255 <= offset_fu_405_p2;
            end if; 
        end if;
    end process;

    phi_ln139_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_594_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                phi_ln139_reg_320 <= add_ln139_fu_600_p2;
            elsif (((base_ddr_addr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_ln139_reg_320 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    temp_0_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                temp_0_reg_298 <= ap_const_lv64_0;
            elsif ((not(((icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (inputStream_V_0_vld_out = ap_const_logic_0))) and (icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                temp_0_reg_298 <= temp_1_fu_549_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((update_intr_read_read_fu_166_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                BASE_ADDRESS_r <= base_address(31 downto 3);
                FRAME_BUFFER_DIM_r <= frame_buffer_dim;
                FRAME_BUFFER_NUMBER_r <= frame_buffer_number;
                FRAME_OFFSET <= frame_buffer_offset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_reg_688 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                buffer_load_reg_702 <= buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln139_reg_688 <= icmp_ln139_fu_594_p2;
                icmp_ln139_reg_688_pp1_iter1_reg <= icmp_ln139_reg_688;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                idx_reg_651 <= idx_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inputStream_V_0_load_A = ap_const_logic_1)) then
                inputStream_V_0_payload_A <= inputStream_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inputStream_V_0_load_B = ap_const_logic_1)) then
                inputStream_V_0_payload_B <= inputStream_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                offset_1_reg_707 <= offset_1_fu_611_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                t_V_reg_620 <= inner_index_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln1_reg_637 <= grp_fu_381_p2(34 downto 3);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, inputStream_V_0_vld_out, ap_CS_fsm_state6, icmp_ln98_fu_499_p2, ap_CS_fsm_state7, ap_enable_reg_pp1_iter2, ap_CS_fsm_state15, base_ddr_addr_AWREADY, base_ddr_addr_BVALID, icmp_ln91_fu_428_p2, ap_CS_fsm_state5, icmp_ln139_fu_594_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln91_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (inputStream_V_0_vld_out = ap_const_logic_0))) and (icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not(((icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (inputStream_V_0_vld_out = ap_const_logic_0))) and (icmp_ln98_fu_499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((base_ddr_addr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln139_fu_594_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((icmp_ln139_fu_594_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((base_ddr_addr_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln106_fu_558_p2 <= std_logic_vector(unsigned(i_0_reg_309) + unsigned(ap_const_lv4_1));
    add_ln139_fu_600_p2 <= std_logic_vector(unsigned(phi_ln139_reg_320) + unsigned(ap_const_lv10_1));
    add_ln145_fu_448_p2 <= std_logic_vector(unsigned(zext_ln145_fu_444_p1) + unsigned(ap_const_lv9_1FF));
    add_ln159_fu_486_p2 <= std_logic_vector(unsigned(frame_count_inner) + unsigned(ap_const_lv32_1));
    add_ln700_fu_463_p2 <= std_logic_vector(unsigned(t_V_reg_620) + unsigned(ap_const_lv8_1));
    add_ln98_1_fu_511_p2 <= std_logic_vector(unsigned(j_0_reg_287) + unsigned(ap_const_lv10_1));
    add_ln98_fu_505_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_276) + unsigned(ap_const_lv13_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state10_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state10_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_state10_io_assign_proc : process(icmp_ln139_reg_688_pp1_iter1_reg, base_ddr_addr_WREADY)
    begin
                ap_block_state10_io <= ((icmp_ln139_reg_688_pp1_iter1_reg = ap_const_lv1_0) and (base_ddr_addr_WREADY = ap_const_logic_0));
    end process;

        ap_block_state10_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_assign_proc : process(inputStream_V_0_vld_out, icmp_ln98_fu_499_p2)
    begin
                ap_block_state6 <= ((icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (inputStream_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state8_assign_proc : process(icmp_ln139_fu_594_p2)
    begin
        if ((icmp_ln139_fu_594_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln91_fu_428_p2, ap_CS_fsm_state5)
    begin
        if (((icmp_ln91_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln91_fu_428_p2, ap_CS_fsm_state5)
    begin
        if (((icmp_ln91_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    base_ddr_addr_AWADDR <= sext_ln139_fu_583_p1(32 - 1 downto 0);

    base_ddr_addr_AWVALID_assign_proc : process(ap_CS_fsm_state7, base_ddr_addr_AWREADY)
    begin
        if (((base_ddr_addr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            base_ddr_addr_AWVALID <= ap_const_logic_1;
        else 
            base_ddr_addr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    base_ddr_addr_BREADY_assign_proc : process(ap_CS_fsm_state15, base_ddr_addr_BVALID)
    begin
        if (((base_ddr_addr_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            base_ddr_addr_BREADY <= ap_const_logic_1;
        else 
            base_ddr_addr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    base_ddr_addr_WVALID_assign_proc : process(ap_enable_reg_pp1_iter2, icmp_ln139_reg_688_pp1_iter1_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln139_reg_688_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            base_ddr_addr_WVALID <= ap_const_logic_1;
        else 
            base_ddr_addr_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    base_ddr_addr_blk_n_AW_assign_proc : process(m_axi_base_ddr_addr_AWREADY, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            base_ddr_addr_blk_n_AW <= m_axi_base_ddr_addr_AWREADY;
        else 
            base_ddr_addr_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    base_ddr_addr_blk_n_B_assign_proc : process(m_axi_base_ddr_addr_BVALID, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            base_ddr_addr_blk_n_B <= m_axi_base_ddr_addr_BVALID;
        else 
            base_ddr_addr_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    base_ddr_addr_blk_n_W_assign_proc : process(m_axi_base_ddr_addr_WREADY, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, icmp_ln139_reg_688_pp1_iter1_reg)
    begin
        if (((icmp_ln139_reg_688_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            base_ddr_addr_blk_n_W <= m_axi_base_ddr_addr_WREADY;
        else 
            base_ddr_addr_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    buffer_address0 <= zext_ln139_fu_606_p1(9 - 1 downto 0);
    buffer_address1 <= zext_ln135_fu_578_p1(9 - 1 downto 0);

    buffer_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            buffer_ce0 <= ap_const_logic_1;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_ce1_assign_proc : process(inputStream_V_0_vld_out, ap_CS_fsm_state6, icmp_ln98_fu_499_p2)
    begin
        if ((not(((icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (inputStream_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            buffer_ce1 <= ap_const_logic_1;
        else 
            buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_d1 <= (inputStream_V_0_data_out & temp_fu_541_p3);

    buffer_we1_assign_proc : process(inputStream_V_0_vld_out, ap_CS_fsm_state6, icmp_ln98_fu_499_p2, icmp_ln106_1_fu_572_p2)
    begin
        if ((not(((icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (inputStream_V_0_vld_out = ap_const_logic_0))) and (icmp_ln106_1_fu_572_p2 = ap_const_lv1_1) and (icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            buffer_we1 <= ap_const_logic_1;
        else 
            buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

    frame_count <= std_logic_vector(unsigned(frame_count_inner) + unsigned(ap_const_lv32_1));

    frame_index_V_assign_proc : process(ap_start, ap_CS_fsm_state1, inner_index_V, frame_index_V_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            frame_index_V <= inner_index_V;
        else 
            frame_index_V <= frame_index_V_preg;
        end if; 
    end process;

    grp_fu_381_p0 <= grp_fu_381_p00(32 - 1 downto 0);
    grp_fu_381_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(FRAME_OFFSET),35));
    grp_fu_381_p1 <= grp_fu_381_p10(8 - 1 downto 0);
    grp_fu_381_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_620),35));
    i_fu_564_p3 <= 
        ap_const_lv4_1 when (icmp_ln106_fu_517_p2(0) = '1') else 
        add_ln106_fu_558_p2;
    icmp_ln106_1_fu_572_p2 <= "1" when (i_fu_564_p3 = ap_const_lv4_8) else "0";
    icmp_ln106_fu_517_p2 <= "1" when (i_0_reg_309 = ap_const_lv4_8) else "0";
    icmp_ln139_fu_594_p2 <= "1" when (phi_ln139_reg_320 = ap_const_lv10_200) else "0";
    icmp_ln879_fu_457_p2 <= "1" when (zext_ln879_fu_454_p1 = add_ln145_fu_448_p2) else "0";
    icmp_ln91_fu_428_p2 <= "1" when (unsigned(idx_0_reg_265) < unsigned(zext_ln91_fu_424_p1)) else "0";
    icmp_ln98_fu_499_p2 <= "1" when (indvar_flatten_reg_276 = ap_const_lv13_1000) else "0";
    idx_fu_434_p2 <= std_logic_vector(unsigned(idx_0_reg_265) + unsigned(ap_const_lv32_1));
    inputStream_V_0_ack_in <= inputStream_V_0_state(1);

    inputStream_V_0_ack_out_assign_proc : process(inputStream_V_0_vld_out, ap_CS_fsm_state6, icmp_ln98_fu_499_p2)
    begin
        if ((not(((icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (inputStream_V_0_vld_out = ap_const_logic_0))) and (icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            inputStream_V_0_ack_out <= ap_const_logic_1;
        else 
            inputStream_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inputStream_V_0_data_out_assign_proc : process(inputStream_V_0_payload_A, inputStream_V_0_payload_B, inputStream_V_0_sel)
    begin
        if ((inputStream_V_0_sel = ap_const_logic_1)) then 
            inputStream_V_0_data_out <= inputStream_V_0_payload_B;
        else 
            inputStream_V_0_data_out <= inputStream_V_0_payload_A;
        end if; 
    end process;

    inputStream_V_0_load_A <= (inputStream_V_0_state_cmp_full and not(inputStream_V_0_sel_wr));
    inputStream_V_0_load_B <= (inputStream_V_0_state_cmp_full and inputStream_V_0_sel_wr);
    inputStream_V_0_sel <= inputStream_V_0_sel_rd;
    inputStream_V_0_state_cmp_full <= '0' when (inputStream_V_0_state = ap_const_lv2_1) else '1';
    inputStream_V_0_vld_in <= inputStream_V_TVALID;
    inputStream_V_0_vld_out <= inputStream_V_0_state(0);

    inputStream_V_TDATA_blk_n_assign_proc : process(inputStream_V_0_state, ap_CS_fsm_state6, icmp_ln98_fu_499_p2)
    begin
        if (((icmp_ln98_fu_499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            inputStream_V_TDATA_blk_n <= inputStream_V_0_state(0);
        else 
            inputStream_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputStream_V_TREADY <= inputStream_V_0_state(1);
    lshr_ln_fu_414_p4 <= FRAME_BUFFER_DIM_r(31 downto 12);
    offset_1_fu_611_p2 <= std_logic_vector(signed(offset_0_reg_255) + signed(ap_const_lv32_200));
    offset_fu_405_p2 <= std_logic_vector(unsigned(zext_ln84_fu_401_p1) + unsigned(trunc_ln1_reg_637));
    select_ln145_fu_468_p3 <= 
        ap_const_lv8_0 when (icmp_ln879_fu_457_p2(0) = '1') else 
        add_ln700_fu_463_p2;
    select_ln98_fu_523_p3 <= 
        add_ln98_1_fu_511_p2 when (icmp_ln106_fu_517_p2(0) = '1') else 
        j_0_reg_287;
        sext_ln139_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(offset_0_reg_255),64));

    temp_1_fu_549_p3 <= (inputStream_V_0_data_out & temp_fu_541_p3);
    temp_fu_541_p3 <= 
        ap_const_lv56_0 when (icmp_ln106_fu_517_p2(0) = '1') else 
        tmp_3_fu_531_p4;
    tmp_3_fu_531_p4 <= temp_0_reg_298(63 downto 8);
    update_intr_read_read_fu_166_p2 <= (0=>update_intr, others=>'-');
    zext_ln135_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln98_fu_523_p3),64));
    zext_ln139_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln139_reg_320),64));
    zext_ln145_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(FRAME_BUFFER_NUMBER_r),9));
    zext_ln84_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(BASE_ADDRESS_r),32));
    zext_ln879_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_620),9));
    zext_ln91_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_414_p4),32));
end behav;
