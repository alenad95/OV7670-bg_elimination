// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axis_to_ddr_writer,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=2,HLS_SYN_FF=1422,HLS_SYN_LUT=1698,HLS_VERSION=2019_1}" *)

module axis_to_ddr_writer (
        ap_clk,
        ap_rst_n,
        inputStream_V_TDATA,
        inputStream_V_TVALID,
        inputStream_V_TREADY,
        m_axi_base_ddr_addr_AWVALID,
        m_axi_base_ddr_addr_AWREADY,
        m_axi_base_ddr_addr_AWADDR,
        m_axi_base_ddr_addr_AWID,
        m_axi_base_ddr_addr_AWLEN,
        m_axi_base_ddr_addr_AWSIZE,
        m_axi_base_ddr_addr_AWBURST,
        m_axi_base_ddr_addr_AWLOCK,
        m_axi_base_ddr_addr_AWCACHE,
        m_axi_base_ddr_addr_AWPROT,
        m_axi_base_ddr_addr_AWQOS,
        m_axi_base_ddr_addr_AWREGION,
        m_axi_base_ddr_addr_AWUSER,
        m_axi_base_ddr_addr_WVALID,
        m_axi_base_ddr_addr_WREADY,
        m_axi_base_ddr_addr_WDATA,
        m_axi_base_ddr_addr_WSTRB,
        m_axi_base_ddr_addr_WLAST,
        m_axi_base_ddr_addr_WID,
        m_axi_base_ddr_addr_WUSER,
        m_axi_base_ddr_addr_ARVALID,
        m_axi_base_ddr_addr_ARREADY,
        m_axi_base_ddr_addr_ARADDR,
        m_axi_base_ddr_addr_ARID,
        m_axi_base_ddr_addr_ARLEN,
        m_axi_base_ddr_addr_ARSIZE,
        m_axi_base_ddr_addr_ARBURST,
        m_axi_base_ddr_addr_ARLOCK,
        m_axi_base_ddr_addr_ARCACHE,
        m_axi_base_ddr_addr_ARPROT,
        m_axi_base_ddr_addr_ARQOS,
        m_axi_base_ddr_addr_ARREGION,
        m_axi_base_ddr_addr_ARUSER,
        m_axi_base_ddr_addr_RVALID,
        m_axi_base_ddr_addr_RREADY,
        m_axi_base_ddr_addr_RDATA,
        m_axi_base_ddr_addr_RLAST,
        m_axi_base_ddr_addr_RID,
        m_axi_base_ddr_addr_RUSER,
        m_axi_base_ddr_addr_RRESP,
        m_axi_base_ddr_addr_BVALID,
        m_axi_base_ddr_addr_BREADY,
        m_axi_base_ddr_addr_BRESP,
        m_axi_base_ddr_addr_BID,
        m_axi_base_ddr_addr_BUSER,
        frame_index_V,
        frame_count,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_pp1_stage0 = 13'd128;
parameter    ap_ST_fsm_state11 = 13'd256;
parameter    ap_ST_fsm_state12 = 13'd512;
parameter    ap_ST_fsm_state13 = 13'd1024;
parameter    ap_ST_fsm_state14 = 13'd2048;
parameter    ap_ST_fsm_state15 = 13'd4096;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_ID_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH = 64;
parameter    C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_USER_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_PROT_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] inputStream_V_TDATA;
input   inputStream_V_TVALID;
output   inputStream_V_TREADY;
output   m_axi_base_ddr_addr_AWVALID;
input   m_axi_base_ddr_addr_AWREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1:0] m_axi_base_ddr_addr_AWADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_AWID;
output  [7:0] m_axi_base_ddr_addr_AWLEN;
output  [2:0] m_axi_base_ddr_addr_AWSIZE;
output  [1:0] m_axi_base_ddr_addr_AWBURST;
output  [1:0] m_axi_base_ddr_addr_AWLOCK;
output  [3:0] m_axi_base_ddr_addr_AWCACHE;
output  [2:0] m_axi_base_ddr_addr_AWPROT;
output  [3:0] m_axi_base_ddr_addr_AWQOS;
output  [3:0] m_axi_base_ddr_addr_AWREGION;
output  [C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH - 1:0] m_axi_base_ddr_addr_AWUSER;
output   m_axi_base_ddr_addr_WVALID;
input   m_axi_base_ddr_addr_WREADY;
output  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1:0] m_axi_base_ddr_addr_WDATA;
output  [C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH - 1:0] m_axi_base_ddr_addr_WSTRB;
output   m_axi_base_ddr_addr_WLAST;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_WID;
output  [C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH - 1:0] m_axi_base_ddr_addr_WUSER;
output   m_axi_base_ddr_addr_ARVALID;
input   m_axi_base_ddr_addr_ARREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1:0] m_axi_base_ddr_addr_ARADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_ARID;
output  [7:0] m_axi_base_ddr_addr_ARLEN;
output  [2:0] m_axi_base_ddr_addr_ARSIZE;
output  [1:0] m_axi_base_ddr_addr_ARBURST;
output  [1:0] m_axi_base_ddr_addr_ARLOCK;
output  [3:0] m_axi_base_ddr_addr_ARCACHE;
output  [2:0] m_axi_base_ddr_addr_ARPROT;
output  [3:0] m_axi_base_ddr_addr_ARQOS;
output  [3:0] m_axi_base_ddr_addr_ARREGION;
output  [C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH - 1:0] m_axi_base_ddr_addr_ARUSER;
input   m_axi_base_ddr_addr_RVALID;
output   m_axi_base_ddr_addr_RREADY;
input  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1:0] m_axi_base_ddr_addr_RDATA;
input   m_axi_base_ddr_addr_RLAST;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_RID;
input  [C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH - 1:0] m_axi_base_ddr_addr_RUSER;
input  [1:0] m_axi_base_ddr_addr_RRESP;
input   m_axi_base_ddr_addr_BVALID;
output   m_axi_base_ddr_addr_BREADY;
input  [1:0] m_axi_base_ddr_addr_BRESP;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1:0] m_axi_base_ddr_addr_BID;
input  [C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH - 1:0] m_axi_base_ddr_addr_BUSER;
output  [7:0] frame_index_V;
output  [31:0] frame_count;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg[7:0] frame_index_V;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] inputStream_V_0_data_out;
wire    inputStream_V_0_vld_in;
wire    inputStream_V_0_vld_out;
wire    inputStream_V_0_ack_in;
reg    inputStream_V_0_ack_out;
reg   [7:0] inputStream_V_0_payload_A;
reg   [7:0] inputStream_V_0_payload_B;
reg    inputStream_V_0_sel_rd;
reg    inputStream_V_0_sel_wr;
wire    inputStream_V_0_sel;
wire    inputStream_V_0_load_A;
wire    inputStream_V_0_load_B;
reg   [1:0] inputStream_V_0_state;
wire    inputStream_V_0_state_cmp_full;
wire   [31:0] base_address;
wire   [31:0] frame_buffer_dim;
wire   [31:0] frame_buffer_offset;
wire   [7:0] frame_buffer_number;
wire    update_intr;
reg   [7:0] inner_index_V;
reg   [31:0] FRAME_BUFFER_DIM_r;
reg   [7:0] FRAME_BUFFER_NUMBER_r;
reg   [31:0] FRAME_OFFSET;
reg   [28:0] BASE_ADDRESS_r;
reg   [31:0] frame_count_inner;
reg    inputStream_V_TDATA_blk_n;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln98_fu_499_p2;
reg    base_ddr_addr_blk_n_AW;
wire    ap_CS_fsm_state7;
reg    base_ddr_addr_blk_n_W;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln139_reg_688;
reg   [0:0] icmp_ln139_reg_688_pp1_iter1_reg;
reg    base_ddr_addr_blk_n_B;
wire    ap_CS_fsm_state15;
reg    base_ddr_addr_AWVALID;
wire    base_ddr_addr_AWREADY;
wire   [31:0] base_ddr_addr_AWADDR;
reg    base_ddr_addr_WVALID;
wire    base_ddr_addr_WREADY;
wire    base_ddr_addr_ARREADY;
wire    base_ddr_addr_RVALID;
wire   [63:0] base_ddr_addr_RDATA;
wire    base_ddr_addr_RLAST;
wire   [0:0] base_ddr_addr_RID;
wire   [0:0] base_ddr_addr_RUSER;
wire   [1:0] base_ddr_addr_RRESP;
wire    base_ddr_addr_BVALID;
reg    base_ddr_addr_BREADY;
wire   [1:0] base_ddr_addr_BRESP;
wire   [0:0] base_ddr_addr_BID;
wire   [0:0] base_ddr_addr_BUSER;
reg   [9:0] phi_ln139_reg_320;
reg   [7:0] t_V_reg_620;
wire    ap_CS_fsm_state2;
reg   [31:0] trunc_ln1_reg_637;
wire    ap_CS_fsm_state3;
wire   [31:0] offset_fu_405_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln91_fu_428_p2;
wire    ap_CS_fsm_state5;
wire   [31:0] idx_fu_434_p2;
reg   [31:0] idx_reg_651;
wire   [12:0] add_ln98_fu_505_p2;
reg    ap_block_state6;
wire   [9:0] select_ln98_fu_523_p3;
wire   [63:0] temp_1_fu_549_p3;
wire   [3:0] i_fu_564_p3;
wire   [0:0] icmp_ln139_fu_594_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
reg    ap_block_state10_io;
reg    ap_block_pp1_stage0_11001;
wire   [9:0] add_ln139_fu_600_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] buffer_q0;
reg   [63:0] buffer_load_reg_702;
reg    ap_enable_reg_pp1_iter1;
wire   [31:0] offset_1_fu_611_p2;
reg   [31:0] offset_1_reg_707;
wire    ap_CS_fsm_state11;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
wire   [8:0] buffer_address0;
reg    buffer_ce0;
wire   [8:0] buffer_address1;
reg    buffer_ce1;
reg    buffer_we1;
wire   [63:0] buffer_d1;
reg  signed [31:0] offset_0_reg_255;
reg   [31:0] idx_0_reg_265;
reg   [12:0] indvar_flatten_reg_276;
reg   [9:0] j_0_reg_287;
reg   [63:0] temp_0_reg_298;
reg   [3:0] i_0_reg_309;
wire   [63:0] zext_ln135_fu_578_p1;
wire   [0:0] icmp_ln106_1_fu_572_p2;
wire   [63:0] zext_ln139_fu_606_p1;
wire  signed [63:0] sext_ln139_fu_583_p1;
wire    ap_block_pp1_stage0_01001;
wire   [7:0] select_ln145_fu_468_p3;
wire   [0:0] update_intr_read_read_fu_166_p2;
wire   [31:0] add_ln159_fu_486_p2;
reg   [7:0] frame_index_V_preg;
wire   [31:0] grp_fu_381_p0;
wire   [7:0] grp_fu_381_p1;
wire   [34:0] grp_fu_381_p2;
wire   [31:0] zext_ln84_fu_401_p1;
wire   [19:0] lshr_ln_fu_414_p4;
wire   [31:0] zext_ln91_fu_424_p1;
wire   [8:0] zext_ln145_fu_444_p1;
wire   [8:0] zext_ln879_fu_454_p1;
wire   [8:0] add_ln145_fu_448_p2;
wire   [0:0] icmp_ln879_fu_457_p2;
wire   [7:0] add_ln700_fu_463_p2;
wire   [0:0] icmp_ln106_fu_517_p2;
wire   [9:0] add_ln98_1_fu_511_p2;
wire   [55:0] tmp_3_fu_531_p4;
wire   [55:0] temp_fu_541_p3;
wire   [3:0] add_ln106_fu_558_p2;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [34:0] grp_fu_381_p00;
wire   [34:0] grp_fu_381_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 inputStream_V_0_sel_rd = 1'b0;
#0 inputStream_V_0_sel_wr = 1'b0;
#0 inputStream_V_0_state = 2'd0;
#0 inner_index_V = 8'd0;
#0 FRAME_BUFFER_DIM_r = 32'd307200;
#0 FRAME_BUFFER_NUMBER_r = 8'd8;
#0 FRAME_OFFSET = 32'd307200;
#0 BASE_ADDRESS_r = 29'd0;
#0 frame_count_inner = 32'd0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 frame_index_V_preg = 8'd0;
end

axis_to_ddr_writer_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
axis_to_ddr_writer_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .base_address(base_address),
    .frame_buffer_dim(frame_buffer_dim),
    .frame_buffer_offset(frame_buffer_offset),
    .frame_buffer_number(frame_buffer_number),
    .update_intr(update_intr)
);

axis_to_ddr_writer_base_ddr_addr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BASE_DDR_ADDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_BASE_DDR_ADDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BASE_DDR_ADDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE ))
axis_to_ddr_writer_base_ddr_addr_m_axi_U(
    .AWVALID(m_axi_base_ddr_addr_AWVALID),
    .AWREADY(m_axi_base_ddr_addr_AWREADY),
    .AWADDR(m_axi_base_ddr_addr_AWADDR),
    .AWID(m_axi_base_ddr_addr_AWID),
    .AWLEN(m_axi_base_ddr_addr_AWLEN),
    .AWSIZE(m_axi_base_ddr_addr_AWSIZE),
    .AWBURST(m_axi_base_ddr_addr_AWBURST),
    .AWLOCK(m_axi_base_ddr_addr_AWLOCK),
    .AWCACHE(m_axi_base_ddr_addr_AWCACHE),
    .AWPROT(m_axi_base_ddr_addr_AWPROT),
    .AWQOS(m_axi_base_ddr_addr_AWQOS),
    .AWREGION(m_axi_base_ddr_addr_AWREGION),
    .AWUSER(m_axi_base_ddr_addr_AWUSER),
    .WVALID(m_axi_base_ddr_addr_WVALID),
    .WREADY(m_axi_base_ddr_addr_WREADY),
    .WDATA(m_axi_base_ddr_addr_WDATA),
    .WSTRB(m_axi_base_ddr_addr_WSTRB),
    .WLAST(m_axi_base_ddr_addr_WLAST),
    .WID(m_axi_base_ddr_addr_WID),
    .WUSER(m_axi_base_ddr_addr_WUSER),
    .ARVALID(m_axi_base_ddr_addr_ARVALID),
    .ARREADY(m_axi_base_ddr_addr_ARREADY),
    .ARADDR(m_axi_base_ddr_addr_ARADDR),
    .ARID(m_axi_base_ddr_addr_ARID),
    .ARLEN(m_axi_base_ddr_addr_ARLEN),
    .ARSIZE(m_axi_base_ddr_addr_ARSIZE),
    .ARBURST(m_axi_base_ddr_addr_ARBURST),
    .ARLOCK(m_axi_base_ddr_addr_ARLOCK),
    .ARCACHE(m_axi_base_ddr_addr_ARCACHE),
    .ARPROT(m_axi_base_ddr_addr_ARPROT),
    .ARQOS(m_axi_base_ddr_addr_ARQOS),
    .ARREGION(m_axi_base_ddr_addr_ARREGION),
    .ARUSER(m_axi_base_ddr_addr_ARUSER),
    .RVALID(m_axi_base_ddr_addr_RVALID),
    .RREADY(m_axi_base_ddr_addr_RREADY),
    .RDATA(m_axi_base_ddr_addr_RDATA),
    .RLAST(m_axi_base_ddr_addr_RLAST),
    .RID(m_axi_base_ddr_addr_RID),
    .RUSER(m_axi_base_ddr_addr_RUSER),
    .RRESP(m_axi_base_ddr_addr_RRESP),
    .BVALID(m_axi_base_ddr_addr_BVALID),
    .BREADY(m_axi_base_ddr_addr_BREADY),
    .BRESP(m_axi_base_ddr_addr_BRESP),
    .BID(m_axi_base_ddr_addr_BID),
    .BUSER(m_axi_base_ddr_addr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(base_ddr_addr_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(base_ddr_addr_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(base_ddr_addr_RDATA),
    .I_RID(base_ddr_addr_RID),
    .I_RUSER(base_ddr_addr_RUSER),
    .I_RRESP(base_ddr_addr_RRESP),
    .I_RLAST(base_ddr_addr_RLAST),
    .I_AWVALID(base_ddr_addr_AWVALID),
    .I_AWREADY(base_ddr_addr_AWREADY),
    .I_AWADDR(base_ddr_addr_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd512),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(base_ddr_addr_WVALID),
    .I_WREADY(base_ddr_addr_WREADY),
    .I_WDATA(buffer_load_reg_702),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(base_ddr_addr_BVALID),
    .I_BREADY(base_ddr_addr_BREADY),
    .I_BRESP(base_ddr_addr_BRESP),
    .I_BID(base_ddr_addr_BID),
    .I_BUSER(base_ddr_addr_BUSER)
);

axis_to_ddr_writebkb #(
    .DataWidth( 64 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .q0(buffer_q0),
    .address1(buffer_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(buffer_d1)
);

axis_to_ddr_writecud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 35 ))
axis_to_ddr_writecud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_381_p0),
    .din1(grp_fu_381_p1),
    .ce(1'b1),
    .dout(grp_fu_381_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((base_ddr_addr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state8)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((base_ddr_addr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frame_count_inner <= 32'd0;
    end else begin
        if (((icmp_ln91_fu_428_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            frame_count_inner <= add_ln159_fu_486_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frame_index_V_preg <= 8'd0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            frame_index_V_preg <= inner_index_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inner_index_V <= 8'd0;
    end else begin
        if (((icmp_ln91_fu_428_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            inner_index_V <= select_ln145_fu_468_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inputStream_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inputStream_V_0_ack_out == 1'b1) & (inputStream_V_0_vld_out == 1'b1))) begin
            inputStream_V_0_sel_rd <= ~inputStream_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inputStream_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inputStream_V_0_ack_in == 1'b1) & (inputStream_V_0_vld_in == 1'b1))) begin
            inputStream_V_0_sel_wr <= ~inputStream_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inputStream_V_0_state <= 2'd0;
    end else begin
        if ((((inputStream_V_0_state == 2'd2) & (inputStream_V_0_vld_in == 1'b0)) | ((inputStream_V_0_state == 2'd3) & (inputStream_V_0_vld_in == 1'b0) & (inputStream_V_0_ack_out == 1'b1)))) begin
            inputStream_V_0_state <= 2'd2;
        end else if ((((inputStream_V_0_state == 2'd1) & (inputStream_V_0_ack_out == 1'b0)) | ((inputStream_V_0_state == 2'd3) & (inputStream_V_0_ack_out == 1'b0) & (inputStream_V_0_vld_in == 1'b1)))) begin
            inputStream_V_0_state <= 2'd1;
        end else if (((~((inputStream_V_0_vld_in == 1'b0) & (inputStream_V_0_ack_out == 1'b1)) & ~((inputStream_V_0_ack_out == 1'b0) & (inputStream_V_0_vld_in == 1'b1)) & (inputStream_V_0_state == 2'd3)) | ((inputStream_V_0_state == 2'd1) & (inputStream_V_0_ack_out == 1'b1)) | ((inputStream_V_0_state == 2'd2) & (inputStream_V_0_vld_in == 1'b1)))) begin
            inputStream_V_0_state <= 2'd3;
        end else begin
            inputStream_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_428_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_309 <= 4'd0;
    end else if ((~((icmp_ln98_fu_499_p2 == 1'd0) & (inputStream_V_0_vld_out == 1'b0)) & (icmp_ln98_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        i_0_reg_309 <= i_fu_564_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((base_ddr_addr_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        idx_0_reg_265 <= idx_reg_651;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        idx_0_reg_265 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_428_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        indvar_flatten_reg_276 <= 13'd0;
    end else if ((~((icmp_ln98_fu_499_p2 == 1'd0) & (inputStream_V_0_vld_out == 1'b0)) & (icmp_ln98_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        indvar_flatten_reg_276 <= add_ln98_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_428_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_reg_287 <= 10'd0;
    end else if ((~((icmp_ln98_fu_499_p2 == 1'd0) & (inputStream_V_0_vld_out == 1'b0)) & (icmp_ln98_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j_0_reg_287 <= select_ln98_fu_523_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((base_ddr_addr_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        offset_0_reg_255 <= offset_1_reg_707;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        offset_0_reg_255 <= offset_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln139_fu_594_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        phi_ln139_reg_320 <= add_ln139_fu_600_p2;
    end else if (((base_ddr_addr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        phi_ln139_reg_320 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_428_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        temp_0_reg_298 <= 64'd0;
    end else if ((~((icmp_ln98_fu_499_p2 == 1'd0) & (inputStream_V_0_vld_out == 1'b0)) & (icmp_ln98_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        temp_0_reg_298 <= temp_1_fu_549_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((update_intr_read_read_fu_166_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        BASE_ADDRESS_r <= {{base_address[31:3]}};
        FRAME_BUFFER_DIM_r <= frame_buffer_dim;
        FRAME_BUFFER_NUMBER_r <= frame_buffer_number;
        FRAME_OFFSET <= frame_buffer_offset;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln139_reg_688 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buffer_load_reg_702 <= buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln139_reg_688 <= icmp_ln139_fu_594_p2;
        icmp_ln139_reg_688_pp1_iter1_reg <= icmp_ln139_reg_688;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        idx_reg_651 <= idx_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((inputStream_V_0_load_A == 1'b1)) begin
        inputStream_V_0_payload_A <= inputStream_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inputStream_V_0_load_B == 1'b1)) begin
        inputStream_V_0_payload_B <= inputStream_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        offset_1_reg_707 <= offset_1_fu_611_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_620 <= inner_index_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln1_reg_637 <= {{grp_fu_381_p2[34:3]}};
    end
end

always @ (*) begin
    if ((icmp_ln139_fu_594_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln91_fu_428_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln91_fu_428_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((base_ddr_addr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        base_ddr_addr_AWVALID = 1'b1;
    end else begin
        base_ddr_addr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((base_ddr_addr_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        base_ddr_addr_BREADY = 1'b1;
    end else begin
        base_ddr_addr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_reg_688_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        base_ddr_addr_WVALID = 1'b1;
    end else begin
        base_ddr_addr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        base_ddr_addr_blk_n_AW = m_axi_base_ddr_addr_AWREADY;
    end else begin
        base_ddr_addr_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        base_ddr_addr_blk_n_B = m_axi_base_ddr_addr_BVALID;
    end else begin
        base_ddr_addr_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln139_reg_688_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        base_ddr_addr_blk_n_W = m_axi_base_ddr_addr_WREADY;
    end else begin
        base_ddr_addr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buffer_ce0 = 1'b1;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln98_fu_499_p2 == 1'd0) & (inputStream_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        buffer_ce1 = 1'b1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln98_fu_499_p2 == 1'd0) & (inputStream_V_0_vld_out == 1'b0)) & (icmp_ln106_1_fu_572_p2 == 1'd1) & (icmp_ln98_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        buffer_we1 = 1'b1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        frame_index_V = inner_index_V;
    end else begin
        frame_index_V = frame_index_V_preg;
    end
end

always @ (*) begin
    if ((~((icmp_ln98_fu_499_p2 == 1'd0) & (inputStream_V_0_vld_out == 1'b0)) & (icmp_ln98_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        inputStream_V_0_ack_out = 1'b1;
    end else begin
        inputStream_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inputStream_V_0_sel == 1'b1)) begin
        inputStream_V_0_data_out = inputStream_V_0_payload_B;
    end else begin
        inputStream_V_0_data_out = inputStream_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln98_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        inputStream_V_TDATA_blk_n = inputStream_V_0_state[1'd0];
    end else begin
        inputStream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln91_fu_428_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((icmp_ln98_fu_499_p2 == 1'd0) & (inputStream_V_0_vld_out == 1'b0)) & (icmp_ln98_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((icmp_ln98_fu_499_p2 == 1'd0) & (inputStream_V_0_vld_out == 1'b0)) & (icmp_ln98_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((base_ddr_addr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln139_fu_594_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((icmp_ln139_fu_594_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((base_ddr_addr_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln106_fu_558_p2 = (i_0_reg_309 + 4'd1);

assign add_ln139_fu_600_p2 = (phi_ln139_reg_320 + 10'd1);

assign add_ln145_fu_448_p2 = ($signed(zext_ln145_fu_444_p1) + $signed(9'd511));

assign add_ln159_fu_486_p2 = (frame_count_inner + 32'd1);

assign add_ln700_fu_463_p2 = (t_V_reg_620 + 8'd1);

assign add_ln98_1_fu_511_p2 = (j_0_reg_287 + 10'd1);

assign add_ln98_fu_505_p2 = (indvar_flatten_reg_276 + 13'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state10_io = ((icmp_ln139_reg_688_pp1_iter1_reg == 1'd0) & (base_ddr_addr_WREADY == 1'b0));
end

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6 = ((icmp_ln98_fu_499_p2 == 1'd0) & (inputStream_V_0_vld_out == 1'b0));
end

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign base_ddr_addr_AWADDR = sext_ln139_fu_583_p1;

assign buffer_address0 = zext_ln139_fu_606_p1;

assign buffer_address1 = zext_ln135_fu_578_p1;

assign buffer_d1 = {{inputStream_V_0_data_out}, {temp_fu_541_p3}};

assign frame_count = (frame_count_inner + 32'd1);

assign grp_fu_381_p0 = grp_fu_381_p00;

assign grp_fu_381_p00 = FRAME_OFFSET;

assign grp_fu_381_p1 = grp_fu_381_p10;

assign grp_fu_381_p10 = t_V_reg_620;

assign i_fu_564_p3 = ((icmp_ln106_fu_517_p2[0:0] === 1'b1) ? 4'd1 : add_ln106_fu_558_p2);

assign icmp_ln106_1_fu_572_p2 = ((i_fu_564_p3 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln106_fu_517_p2 = ((i_0_reg_309 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln139_fu_594_p2 = ((phi_ln139_reg_320 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_457_p2 = ((zext_ln879_fu_454_p1 == add_ln145_fu_448_p2) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_428_p2 = ((idx_0_reg_265 < zext_ln91_fu_424_p1) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_499_p2 = ((indvar_flatten_reg_276 == 13'd4096) ? 1'b1 : 1'b0);

assign idx_fu_434_p2 = (idx_0_reg_265 + 32'd1);

assign inputStream_V_0_ack_in = inputStream_V_0_state[1'd1];

assign inputStream_V_0_load_A = (inputStream_V_0_state_cmp_full & ~inputStream_V_0_sel_wr);

assign inputStream_V_0_load_B = (inputStream_V_0_state_cmp_full & inputStream_V_0_sel_wr);

assign inputStream_V_0_sel = inputStream_V_0_sel_rd;

assign inputStream_V_0_state_cmp_full = ((inputStream_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inputStream_V_0_vld_in = inputStream_V_TVALID;

assign inputStream_V_0_vld_out = inputStream_V_0_state[1'd0];

assign inputStream_V_TREADY = inputStream_V_0_state[1'd1];

assign lshr_ln_fu_414_p4 = {{FRAME_BUFFER_DIM_r[31:12]}};

assign offset_1_fu_611_p2 = ($signed(offset_0_reg_255) + $signed(32'd512));

assign offset_fu_405_p2 = (zext_ln84_fu_401_p1 + trunc_ln1_reg_637);

assign select_ln145_fu_468_p3 = ((icmp_ln879_fu_457_p2[0:0] === 1'b1) ? 8'd0 : add_ln700_fu_463_p2);

assign select_ln98_fu_523_p3 = ((icmp_ln106_fu_517_p2[0:0] === 1'b1) ? add_ln98_1_fu_511_p2 : j_0_reg_287);

assign sext_ln139_fu_583_p1 = offset_0_reg_255;

assign temp_1_fu_549_p3 = {{inputStream_V_0_data_out}, {temp_fu_541_p3}};

assign temp_fu_541_p3 = ((icmp_ln106_fu_517_p2[0:0] === 1'b1) ? 56'd0 : tmp_3_fu_531_p4);

assign tmp_3_fu_531_p4 = {{temp_0_reg_298[63:8]}};

assign update_intr_read_read_fu_166_p2 = update_intr;

assign zext_ln135_fu_578_p1 = select_ln98_fu_523_p3;

assign zext_ln139_fu_606_p1 = phi_ln139_reg_320;

assign zext_ln145_fu_444_p1 = FRAME_BUFFER_NUMBER_r;

assign zext_ln84_fu_401_p1 = BASE_ADDRESS_r;

assign zext_ln879_fu_454_p1 = t_V_reg_620;

assign zext_ln91_fu_424_p1 = lshr_ln_fu_414_p4;

endmodule //axis_to_ddr_writer
