// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ddr_to_axis_reader_SD,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=42.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=41.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=4,HLS_SYN_FF=1208,HLS_SYN_LUT=4155}" *)

module ddr_to_axis_reader_SD (
        ap_clk,
        ap_rst_n,
        outStream_channel_1_V_TDATA,
        outStream_channel_1_V_TVALID,
        outStream_channel_1_V_TREADY,
        outstream_channel_2_V_TDATA,
        outstream_channel_2_V_TVALID,
        outstream_channel_2_V_TREADY,
        m_axi_base_ddr_addr_AWVALID,
        m_axi_base_ddr_addr_AWREADY,
        m_axi_base_ddr_addr_AWADDR,
        m_axi_base_ddr_addr_AWID,
        m_axi_base_ddr_addr_AWLEN,
        m_axi_base_ddr_addr_AWSIZE,
        m_axi_base_ddr_addr_AWBURST,
        m_axi_base_ddr_addr_AWLOCK,
        m_axi_base_ddr_addr_AWCACHE,
        m_axi_base_ddr_addr_AWPROT,
        m_axi_base_ddr_addr_AWQOS,
        m_axi_base_ddr_addr_AWREGION,
        m_axi_base_ddr_addr_AWUSER,
        m_axi_base_ddr_addr_WVALID,
        m_axi_base_ddr_addr_WREADY,
        m_axi_base_ddr_addr_WDATA,
        m_axi_base_ddr_addr_WSTRB,
        m_axi_base_ddr_addr_WLAST,
        m_axi_base_ddr_addr_WID,
        m_axi_base_ddr_addr_WUSER,
        m_axi_base_ddr_addr_ARVALID,
        m_axi_base_ddr_addr_ARREADY,
        m_axi_base_ddr_addr_ARADDR,
        m_axi_base_ddr_addr_ARID,
        m_axi_base_ddr_addr_ARLEN,
        m_axi_base_ddr_addr_ARSIZE,
        m_axi_base_ddr_addr_ARBURST,
        m_axi_base_ddr_addr_ARLOCK,
        m_axi_base_ddr_addr_ARCACHE,
        m_axi_base_ddr_addr_ARPROT,
        m_axi_base_ddr_addr_ARQOS,
        m_axi_base_ddr_addr_ARREGION,
        m_axi_base_ddr_addr_ARUSER,
        m_axi_base_ddr_addr_RVALID,
        m_axi_base_ddr_addr_RREADY,
        m_axi_base_ddr_addr_RDATA,
        m_axi_base_ddr_addr_RLAST,
        m_axi_base_ddr_addr_RID,
        m_axi_base_ddr_addr_RUSER,
        m_axi_base_ddr_addr_RRESP,
        m_axi_base_ddr_addr_BVALID,
        m_axi_base_ddr_addr_BREADY,
        m_axi_base_ddr_addr_BRESP,
        m_axi_base_ddr_addr_BID,
        m_axi_base_ddr_addr_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_st1_fsm_0 = 13'b1;
parameter    ap_ST_st2_fsm_1 = 13'b10;
parameter    ap_ST_st3_fsm_2 = 13'b100;
parameter    ap_ST_st4_fsm_3 = 13'b1000;
parameter    ap_ST_st5_fsm_4 = 13'b10000;
parameter    ap_ST_st6_fsm_5 = 13'b100000;
parameter    ap_ST_st7_fsm_6 = 13'b1000000;
parameter    ap_ST_st8_fsm_7 = 13'b10000000;
parameter    ap_ST_pp0_stg0_fsm_8 = 13'b100000000;
parameter    ap_ST_st12_fsm_9 = 13'b1000000000;
parameter    ap_ST_pp1_stg0_fsm_10 = 13'b10000000000;
parameter    ap_ST_pp2_stg0_fsm_11 = 13'b100000000000;
parameter    ap_ST_st17_fsm_12 = 13'b1000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_ID_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH = 64;
parameter    C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_USER_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_PROT_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE = 3;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv20_0 = 20'b00000000000000000000;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv32_200 = 32'b1000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv20_1 = 20'b1;
parameter    ap_const_lv10_200 = 10'b1000000000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv13_1FFF = 13'b1111111111111;
parameter    ap_const_lv14_4 = 14'b100;
parameter    ap_const_lv10_3FC = 10'b1111111100;
parameter    ap_const_lv14_204 = 14'b1000000100;
parameter    ap_const_lv15_7FFC = 15'b111111111111100;
parameter    ap_const_lv15_1FF = 15'b111111111;
parameter    ap_const_lv13_1 = 13'b1;
parameter    ap_const_lv6_7 = 6'b111;
parameter    ap_const_lv7_3F = 7'b111111;
parameter    ap_const_lv64_FFFFFFFFFFFFFFFF = 64'b1111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv13_2 = 13'b10;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH = (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output  [7:0] outStream_channel_1_V_TDATA;
output   outStream_channel_1_V_TVALID;
input   outStream_channel_1_V_TREADY;
output  [7:0] outstream_channel_2_V_TDATA;
output   outstream_channel_2_V_TVALID;
input   outstream_channel_2_V_TREADY;
output   m_axi_base_ddr_addr_AWVALID;
input   m_axi_base_ddr_addr_AWREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1 : 0] m_axi_base_ddr_addr_AWADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_AWID;
output  [7:0] m_axi_base_ddr_addr_AWLEN;
output  [2:0] m_axi_base_ddr_addr_AWSIZE;
output  [1:0] m_axi_base_ddr_addr_AWBURST;
output  [1:0] m_axi_base_ddr_addr_AWLOCK;
output  [3:0] m_axi_base_ddr_addr_AWCACHE;
output  [2:0] m_axi_base_ddr_addr_AWPROT;
output  [3:0] m_axi_base_ddr_addr_AWQOS;
output  [3:0] m_axi_base_ddr_addr_AWREGION;
output  [C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_AWUSER;
output   m_axi_base_ddr_addr_WVALID;
input   m_axi_base_ddr_addr_WREADY;
output  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1 : 0] m_axi_base_ddr_addr_WDATA;
output  [C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH - 1 : 0] m_axi_base_ddr_addr_WSTRB;
output   m_axi_base_ddr_addr_WLAST;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_WID;
output  [C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_WUSER;
output   m_axi_base_ddr_addr_ARVALID;
input   m_axi_base_ddr_addr_ARREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1 : 0] m_axi_base_ddr_addr_ARADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_ARID;
output  [7:0] m_axi_base_ddr_addr_ARLEN;
output  [2:0] m_axi_base_ddr_addr_ARSIZE;
output  [1:0] m_axi_base_ddr_addr_ARBURST;
output  [1:0] m_axi_base_ddr_addr_ARLOCK;
output  [3:0] m_axi_base_ddr_addr_ARCACHE;
output  [2:0] m_axi_base_ddr_addr_ARPROT;
output  [3:0] m_axi_base_ddr_addr_ARQOS;
output  [3:0] m_axi_base_ddr_addr_ARREGION;
output  [C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_ARUSER;
input   m_axi_base_ddr_addr_RVALID;
output   m_axi_base_ddr_addr_RREADY;
input  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1 : 0] m_axi_base_ddr_addr_RDATA;
input   m_axi_base_ddr_addr_RLAST;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_RID;
input  [C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_RUSER;
input  [1:0] m_axi_base_ddr_addr_RRESP;
input   m_axi_base_ddr_addr_BVALID;
output   m_axi_base_ddr_addr_BREADY;
input  [1:0] m_axi_base_ddr_addr_BRESP;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_BID;
input  [C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg[7:0] outStream_channel_1_V_TDATA;
reg outStream_channel_1_V_TVALID;
reg outstream_channel_2_V_TVALID;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_30;
reg    ap_ready;
wire   [31:0] base_address;
wire   [31:0] frame_buffer_dim;
wire   [31:0] frame_buffer_offset;
wire   [7:0] frame_buffer_number;
wire    update_intr;
wire    stereo_enabler;
reg   [31:0] inner_index;
reg   [0:0] guard_variable_for_ddr_to_axis_2;
reg   [31:0] FRAME_BUFFER_DIM_r;
reg   [0:0] guard_variable_for_ddr_to_axis;
reg   [31:0] FRAME_OFFSET;
reg   [0:0] guard_variable_for_ddr_to_axis_1;
reg   [7:0] FRAME_BUFFER_NUMBER_r;
reg   [0:0] guard_variable_for_ddr_to_axis_3;
reg   [31:0] BASE_ADDRESS_r;
reg   [31:0] luma_chroma_switch;
reg    outStream_channel_1_V_TDATA_blk_n;
reg    ap_sig_cseq_ST_pp1_stg0_fsm_10;
reg    ap_sig_118;
reg    ap_reg_ppiten_pp1_it1;
reg    ap_reg_ppiten_pp1_it0;
reg   [0:0] tmp_10_reg_1418;
reg   [0:0] tmp_18_reg_1422;
reg    ap_sig_cseq_ST_pp2_stg0_fsm_11;
reg    ap_sig_140;
reg    ap_reg_ppiten_pp2_it1;
reg    ap_reg_ppiten_pp2_it0;
reg   [0:0] tmp_reg_1451;
reg    outstream_channel_2_V_TDATA_blk_n;
reg    base_ddr_addr_blk_n_AR;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_158;
wire   [0:0] exitcond1_fu_655_p2;
reg    base_ddr_addr_blk_n_R;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_8;
reg    ap_sig_169;
reg    ap_reg_ppiten_pp0_it1;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it2;
reg   [0:0] exitcond_reg_1404;
wire    base_ddr_addr_AWREADY;
wire    base_ddr_addr_WREADY;
reg    base_ddr_addr_ARVALID;
wire    base_ddr_addr_ARREADY;
wire   [31:0] base_ddr_addr_ARADDR;
wire    base_ddr_addr_RVALID;
reg    base_ddr_addr_RREADY;
wire   [63:0] base_ddr_addr_RDATA;
wire    base_ddr_addr_RLAST;
wire   [0:0] base_ddr_addr_RID;
wire   [0:0] base_ddr_addr_RUSER;
wire   [1:0] base_ddr_addr_RRESP;
wire    base_ddr_addr_BVALID;
wire   [1:0] base_ddr_addr_BRESP;
wire   [0:0] base_ddr_addr_BID;
wire   [0:0] base_ddr_addr_BUSER;
reg   [9:0] indvar_reg_395;
reg   [9:0] ap_reg_ppstg_indvar_reg_395_pp0_iter1;
reg    ap_sig_300;
reg   [12:0] j_reg_407;
reg   [12:0] j1_reg_428;
reg   [0:0] stereo_enabler_read_reg_1341;
reg  signed [31:0] inner_index_load_reg_1345;
wire   [31:0] tmp_1_FRAME_BUFFER_NUMBER_loc_s_fu_561_p1;
reg   [31:0] tmp_1_FRAME_BUFFER_NUMBER_loc_s_reg_1372;
wire   [31:0] offset_fu_615_p2;
reg   [19:0] tmp_5_reg_1385;
wire   [19:0] i_1_fu_660_p2;
reg   [19:0] i_1_reg_1393;
reg    ap_sig_ioackin_base_ddr_addr_ARREADY;
wire   [0:0] exitcond_fu_700_p2;
reg   [0:0] ap_reg_ppstg_exitcond_reg_1404_pp0_iter1;
wire   [9:0] indvar_next_fu_706_p2;
reg   [9:0] indvar_next_reg_1408;
reg   [63:0] base_ddr_addr_addr_read_reg_1413;
wire   [0:0] tmp_10_fu_717_p3;
reg    ap_sig_ioackin_outStream_channel_1_V_TREADY;
wire   [0:0] tmp_18_fu_729_p2;
wire   [2:0] tmp_71_fu_747_p1;
reg   [2:0] tmp_71_reg_1426;
wire   [2:0] tmp_52_fu_779_p1;
reg   [2:0] tmp_52_reg_1436;
wire   [12:0] j_4_fu_846_p2;
wire   [0:0] tmp_fu_1064_p3;
reg    ap_sig_ioackin_outstream_channel_2_V_TREADY;
wire   [2:0] tmp_11_fu_1072_p1;
reg   [2:0] tmp_11_reg_1455;
reg   [1:0] tmp_13_reg_1466;
wire   [12:0] j_2_fu_1101_p2;
wire   [31:0] offset_1_fu_1335_p2;
reg    ap_sig_cseq_ST_st17_fsm_12;
reg    ap_sig_403;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_410;
reg    ap_sig_cseq_ST_st12_fsm_9;
reg    ap_sig_422;
reg   [8:0] buffer_address0;
reg    buffer_ce0;
wire   [63:0] buffer_q0;
reg   [8:0] buffer_address1;
reg    buffer_ce1;
reg    buffer_we1;
wire   [63:0] buffer_q1;
reg   [0:0] FRAME_BUFFER_DIM_flag_phi_fu_293_p4;
wire   [0:0] guard_variable_for_ddr_to_axis_load_fu_453_p1;
reg   [31:0] FRAME_BUFFER_DIM_loc_phi_fu_304_p4;
reg   [0:0] FRAME_OFFSET_flag_phi_fu_314_p4;
wire   [0:0] guard_variable_for_ddr_to_axis_1_load_fu_468_p1;
reg   [31:0] FRAME_OFFSET_loc_phi_fu_325_p4;
reg   [0:0] FRAME_BUFFER_NUMBER_flag_phi_fu_335_p4;
wire   [0:0] guard_variable_for_ddr_to_axis_2_load_fu_483_p1;
reg   [7:0] FRAME_BUFFER_NUMBER_loc_phi_fu_346_p4;
reg   [0:0] BASE_ADDRESS_flag_phi_fu_356_p4;
wire   [0:0] guard_variable_for_ddr_to_axis_3_load_fu_498_p1;
reg   [31:0] BASE_ADDRESS_loc_phi_fu_367_p4;
reg   [31:0] offset1_reg_374;
reg   [19:0] i_reg_384;
reg   [9:0] indvar_phi_fu_399_p4;
wire   [12:0] j_3_fu_772_p2;
wire   [12:0] ap_reg_phiprechg_j_1_reg_418pp1_it0;
reg   [12:0] j_1_phi_fu_421_p4;
wire   [63:0] tmp_6_fu_712_p1;
wire   [63:0] gepindex264_cast_fu_761_p1;
wire  signed [63:0] gepindex2_cast_fu_841_p1;
wire   [63:0] gepindex276_cast_fu_1086_p1;
wire  signed [63:0] tmp_1_fu_666_p1;
reg    ap_reg_ioackin_base_ddr_addr_ARREADY;
wire   [31:0] storemerge_fu_686_p3;
wire   [0:0] p_FRAME_BUFFER_DIM_flag_fu_527_p2;
wire   [0:0] p_FRAME_OFFSET_flag_fu_541_p2;
wire   [0:0] p_FRAME_BUFFER_NUMBER_flag_fu_547_p2;
wire   [31:0] tmp_7_base_address_fu_571_p3;
wire   [0:0] p_BASE_ADDRESS_flag_fu_565_p2;
wire   [31:0] tmp_20_fu_735_p2;
wire   [7:0] tmp_88_fu_953_p1;
wire   [7:0] tmp_70_fu_1059_p1;
wire   [7:0] tmp_34_fu_1208_p1;
reg    ap_reg_ioackin_outStream_channel_1_V_TREADY;
reg    ap_reg_ioackin_outstream_channel_2_V_TREADY;
wire   [28:0] tmp_7_fu_513_p4;
wire   [0:0] p_FRAME_BUFFER_DIM_flag_fu_527_p1;
wire   [0:0] frame_buffer_dim_FRAME_BUFFER_s_fu_533_p0;
wire   [0:0] p_FRAME_OFFSET_flag_fu_541_p1;
wire   [0:0] p_FRAME_BUFFER_NUMBER_flag_fu_547_p1;
wire   [0:0] tmp_1_FRAME_BUFFER_NUMBER_loc_fu_553_p0;
wire   [7:0] tmp_1_FRAME_BUFFER_NUMBER_loc_fu_553_p3;
wire   [0:0] p_BASE_ADDRESS_flag_fu_565_p1;
wire   [0:0] tmp_7_base_address_fu_571_p0;
wire   [31:0] tmp_8_fu_523_p1;
wire   [0:0] frame_buffer_offset_FRAME_OFFS_fu_579_p0;
wire   [0:0] tmp_7_BASE_ADDRESS_loc_fu_587_p0;
wire  signed [31:0] tmp_s_fu_595_p0;
wire  signed [31:0] frame_buffer_offset_FRAME_OFFS_fu_579_p3;
wire   [31:0] tmp_s_fu_595_p2;
wire   [28:0] tmp_2_fu_601_p4;
wire   [31:0] tmp_9_fu_611_p1;
wire   [31:0] tmp_7_BASE_ADDRESS_loc_fu_587_p3;
wire   [31:0] frame_buffer_dim_FRAME_BUFFER_s_fu_533_p3;
wire   [0:0] tmp_3_fu_677_p2;
wire   [31:0] tmp_4_fu_681_p2;
wire   [8:0] gepindex62_cast_fu_751_p4;
wire   [9:0] tmp_53_fu_783_p4;
wire  signed [13:0] adjSize_fu_793_p1;
wire   [13:0] mem_index_gep_fu_797_p2;
wire   [14:0] adjSize55_cast_fu_803_p1;
wire   [0:0] addrCmp_fu_807_p2;
wire   [14:0] gepindex_fu_819_p2;
wire   [0:0] addrCmp1_fu_813_p2;
wire   [14:0] gepindex1_fu_825_p3;
wire   [14:0] gepindex2_fu_833_p3;
wire   [5:0] start_pos3_fu_852_p3;
wire   [5:0] end_pos3_fu_859_p2;
wire   [6:0] tmp_73_fu_871_p1;
wire   [6:0] tmp_74_fu_875_p1;
wire   [0:0] tmp_72_fu_865_p2;
wire   [6:0] tmp_76_fu_879_p2;
wire   [6:0] tmp_78_fu_891_p2;
reg   [63:0] grp_fu_439_p4;
wire   [6:0] tmp_77_fu_885_p2;
wire   [6:0] tmp_79_fu_897_p3;
wire   [6:0] tmp_81_fu_913_p3;
wire   [6:0] tmp_82_fu_921_p2;
wire   [63:0] tmp_80_fu_905_p3;
wire   [63:0] tmp_83_fu_927_p1;
wire   [63:0] tmp_84_fu_931_p1;
wire   [63:0] tmp_85_fu_935_p2;
wire   [63:0] tmp_86_fu_941_p2;
wire   [63:0] tmp_87_fu_947_p2;
wire   [5:0] start_pos_fu_958_p3;
wire   [5:0] end_pos2_fu_965_p2;
wire   [6:0] tmp_55_fu_977_p1;
wire   [6:0] tmp_56_fu_981_p1;
wire   [0:0] tmp_54_fu_971_p2;
wire   [6:0] tmp_58_fu_985_p2;
wire   [6:0] tmp_60_fu_997_p2;
wire   [6:0] tmp_59_fu_991_p2;
wire   [6:0] tmp_61_fu_1003_p3;
wire   [6:0] tmp_63_fu_1019_p3;
wire   [6:0] tmp_64_fu_1027_p2;
wire   [63:0] tmp_62_fu_1011_p3;
wire   [63:0] tmp_65_fu_1033_p1;
wire   [63:0] tmp_66_fu_1037_p1;
wire   [63:0] tmp_67_fu_1041_p2;
wire   [63:0] tmp_68_fu_1047_p2;
wire   [63:0] tmp_69_fu_1053_p2;
wire   [8:0] gepindex74_cast_fu_1076_p4;
wire   [5:0] start_pos1_fu_1107_p3;
wire   [5:0] end_pos_fu_1114_p2;
wire   [6:0] tmp_17_fu_1126_p1;
wire   [6:0] tmp_19_fu_1130_p1;
wire   [0:0] tmp_15_fu_1120_p2;
wire   [6:0] tmp_22_fu_1134_p2;
wire   [6:0] tmp_24_fu_1146_p2;
wire   [6:0] tmp_23_fu_1140_p2;
wire   [6:0] tmp_25_fu_1152_p3;
wire   [6:0] tmp_27_fu_1168_p3;
wire   [6:0] tmp_28_fu_1176_p2;
wire   [63:0] tmp_26_fu_1160_p3;
wire   [63:0] tmp_29_fu_1182_p1;
wire   [63:0] tmp_30_fu_1186_p1;
wire   [63:0] tmp_31_fu_1190_p2;
wire   [63:0] tmp_32_fu_1196_p2;
wire   [63:0] tmp_33_fu_1202_p2;
wire   [2:0] tmp_14_fu_1213_p2;
wire   [5:0] start_pos2_fu_1218_p3;
wire   [5:0] end_pos1_fu_1226_p2;
wire   [6:0] tmp_36_fu_1238_p1;
wire   [6:0] tmp_37_fu_1242_p1;
wire   [0:0] tmp_35_fu_1232_p2;
wire   [6:0] tmp_39_fu_1256_p2;
wire   [6:0] tmp_41_fu_1268_p2;
reg   [63:0] tmp_38_fu_1246_p4;
wire   [6:0] tmp_40_fu_1262_p2;
wire   [6:0] tmp_42_fu_1274_p3;
wire   [6:0] tmp_44_fu_1290_p3;
wire   [6:0] tmp_45_fu_1298_p2;
wire   [63:0] tmp_43_fu_1282_p3;
wire   [63:0] tmp_46_fu_1304_p1;
wire   [63:0] tmp_47_fu_1308_p1;
wire   [63:0] tmp_48_fu_1312_p2;
wire   [63:0] tmp_49_fu_1318_p2;
wire   [63:0] tmp_50_fu_1324_p2;
reg   [12:0] ap_NS_fsm;
reg    ap_sig_163;
reg    ap_sig_150;
reg    ap_sig_570;
reg    ap_sig_374;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'b1;
#0 inner_index = 32'b00000000000000000000000000000000;
#0 guard_variable_for_ddr_to_axis_2 = 1'b0;
#0 FRAME_BUFFER_DIM_r = 32'b00000000000000000000000000000000;
#0 guard_variable_for_ddr_to_axis = 1'b0;
#0 FRAME_OFFSET = 32'b00000000000000000000000000000000;
#0 guard_variable_for_ddr_to_axis_1 = 1'b0;
#0 FRAME_BUFFER_NUMBER_r = 8'b00000000;
#0 guard_variable_for_ddr_to_axis_3 = 1'b0;
#0 BASE_ADDRESS_r = 32'b00000000000000000000000000000000;
#0 luma_chroma_switch = 32'b00000000000000000000000000000000;
#0 ap_reg_ppiten_pp1_it1 = 1'b0;
#0 ap_reg_ppiten_pp1_it0 = 1'b0;
#0 ap_reg_ppiten_pp2_it1 = 1'b0;
#0 ap_reg_ppiten_pp2_it0 = 1'b0;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
#0 ap_reg_ppiten_pp0_it0 = 1'b0;
#0 ap_reg_ppiten_pp0_it2 = 1'b0;
#0 ap_reg_ioackin_base_ddr_addr_ARREADY = 1'b0;
#0 ap_reg_ioackin_outStream_channel_1_V_TREADY = 1'b0;
#0 ap_reg_ioackin_outstream_channel_2_V_TREADY = 1'b0;
end

ddr_to_axis_reader_SD_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
ddr_to_axis_reader_SD_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .base_address(base_address),
    .frame_buffer_dim(frame_buffer_dim),
    .frame_buffer_offset(frame_buffer_offset),
    .frame_buffer_number(frame_buffer_number),
    .update_intr(update_intr),
    .stereo_enabler(stereo_enabler)
);

ddr_to_axis_reader_SD_base_ddr_addr_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BASE_DDR_ADDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_BASE_DDR_ADDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BASE_DDR_ADDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE ))
ddr_to_axis_reader_SD_base_ddr_addr_m_axi_U(
    .AWVALID(m_axi_base_ddr_addr_AWVALID),
    .AWREADY(m_axi_base_ddr_addr_AWREADY),
    .AWADDR(m_axi_base_ddr_addr_AWADDR),
    .AWID(m_axi_base_ddr_addr_AWID),
    .AWLEN(m_axi_base_ddr_addr_AWLEN),
    .AWSIZE(m_axi_base_ddr_addr_AWSIZE),
    .AWBURST(m_axi_base_ddr_addr_AWBURST),
    .AWLOCK(m_axi_base_ddr_addr_AWLOCK),
    .AWCACHE(m_axi_base_ddr_addr_AWCACHE),
    .AWPROT(m_axi_base_ddr_addr_AWPROT),
    .AWQOS(m_axi_base_ddr_addr_AWQOS),
    .AWREGION(m_axi_base_ddr_addr_AWREGION),
    .AWUSER(m_axi_base_ddr_addr_AWUSER),
    .WVALID(m_axi_base_ddr_addr_WVALID),
    .WREADY(m_axi_base_ddr_addr_WREADY),
    .WDATA(m_axi_base_ddr_addr_WDATA),
    .WSTRB(m_axi_base_ddr_addr_WSTRB),
    .WLAST(m_axi_base_ddr_addr_WLAST),
    .WID(m_axi_base_ddr_addr_WID),
    .WUSER(m_axi_base_ddr_addr_WUSER),
    .ARVALID(m_axi_base_ddr_addr_ARVALID),
    .ARREADY(m_axi_base_ddr_addr_ARREADY),
    .ARADDR(m_axi_base_ddr_addr_ARADDR),
    .ARID(m_axi_base_ddr_addr_ARID),
    .ARLEN(m_axi_base_ddr_addr_ARLEN),
    .ARSIZE(m_axi_base_ddr_addr_ARSIZE),
    .ARBURST(m_axi_base_ddr_addr_ARBURST),
    .ARLOCK(m_axi_base_ddr_addr_ARLOCK),
    .ARCACHE(m_axi_base_ddr_addr_ARCACHE),
    .ARPROT(m_axi_base_ddr_addr_ARPROT),
    .ARQOS(m_axi_base_ddr_addr_ARQOS),
    .ARREGION(m_axi_base_ddr_addr_ARREGION),
    .ARUSER(m_axi_base_ddr_addr_ARUSER),
    .RVALID(m_axi_base_ddr_addr_RVALID),
    .RREADY(m_axi_base_ddr_addr_RREADY),
    .RDATA(m_axi_base_ddr_addr_RDATA),
    .RLAST(m_axi_base_ddr_addr_RLAST),
    .RID(m_axi_base_ddr_addr_RID),
    .RUSER(m_axi_base_ddr_addr_RUSER),
    .RRESP(m_axi_base_ddr_addr_RRESP),
    .BVALID(m_axi_base_ddr_addr_BVALID),
    .BREADY(m_axi_base_ddr_addr_BREADY),
    .BRESP(m_axi_base_ddr_addr_BRESP),
    .BID(m_axi_base_ddr_addr_BID),
    .BUSER(m_axi_base_ddr_addr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(base_ddr_addr_ARVALID),
    .I_ARREADY(base_ddr_addr_ARREADY),
    .I_ARADDR(base_ddr_addr_ARADDR),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_200),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(base_ddr_addr_RVALID),
    .I_RREADY(base_ddr_addr_RREADY),
    .I_RDATA(base_ddr_addr_RDATA),
    .I_RID(base_ddr_addr_RID),
    .I_RUSER(base_ddr_addr_RUSER),
    .I_RRESP(base_ddr_addr_RRESP),
    .I_RLAST(base_ddr_addr_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(base_ddr_addr_AWREADY),
    .I_AWADDR(ap_const_lv32_0),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_0),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(1'b0),
    .I_WREADY(base_ddr_addr_WREADY),
    .I_WDATA(ap_const_lv64_0),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv8_0),
    .I_BVALID(base_ddr_addr_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(base_ddr_addr_BRESP),
    .I_BID(base_ddr_addr_BID),
    .I_BUSER(base_ddr_addr_BUSER)
);

ddr_to_axis_reader_SD_buffer #(
    .DataWidth( 64 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .q0(buffer_q0),
    .address1(buffer_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(base_ddr_addr_addr_read_reg_1413),
    .q1(buffer_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        BASE_ADDRESS_r <= ap_const_lv32_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(1'b0 == p_BASE_ADDRESS_flag_fu_565_p2))) begin
            BASE_ADDRESS_r <= tmp_7_base_address_fu_571_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FRAME_BUFFER_DIM_r <= ap_const_lv32_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(1'b0 == p_FRAME_BUFFER_DIM_flag_fu_527_p2))) begin
            FRAME_BUFFER_DIM_r <= frame_buffer_dim;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FRAME_BUFFER_NUMBER_r <= ap_const_lv8_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(1'b0 == p_FRAME_BUFFER_NUMBER_flag_fu_547_p2))) begin
            FRAME_BUFFER_NUMBER_r <= frame_buffer_number;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FRAME_OFFSET <= ap_const_lv32_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(1'b0 == p_FRAME_OFFSET_flag_fu_541_p2))) begin
            FRAME_OFFSET <= frame_buffer_offset;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_base_ddr_addr_ARREADY <= 1'b0;
    end else begin
        if (ap_sig_163) begin
            if (~((1'b0 == exitcond1_fu_655_p2) & (1'b0 == ap_sig_ioackin_base_ddr_addr_ARREADY))) begin
                ap_reg_ioackin_base_ddr_addr_ARREADY <= 1'b0;
            end else if ((1'b1 == base_ddr_addr_ARREADY)) begin
                ap_reg_ioackin_base_ddr_addr_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_outStream_channel_1_V_TREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY))))) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY))))) | ((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == tmp_reg_1451) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outstream_channel_2_V_TREADY))))))) begin
            ap_reg_ioackin_outStream_channel_1_V_TREADY <= 1'b0;
        end else if ((((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b1 == outStream_channel_1_V_TREADY)) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b1 == outStream_channel_1_V_TREADY)) | ((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == tmp_reg_1451) & (1'b1 == outStream_channel_1_V_TREADY)))) begin
            ap_reg_ioackin_outStream_channel_1_V_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_outstream_channel_2_V_TREADY <= 1'b0;
    end else begin
        if (ap_sig_150) begin
            if (~((1'b1 == ap_reg_ppiten_pp2_it1) & (((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outstream_channel_2_V_TREADY))))) begin
                ap_reg_ioackin_outstream_channel_2_V_TREADY <= 1'b0;
            end else if ((1'b1 == outstream_channel_2_V_TREADY)) begin
                ap_reg_ioackin_outstream_channel_2_V_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300) & ~(1'b0 == exitcond_fu_700_p2))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b0;
        end else if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
            ap_reg_ppiten_pp0_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300) & (1'b0 == exitcond_fu_700_p2))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b1;
        end else if (((1'b1 == ap_sig_cseq_ST_st8_fsm_7) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300) & ~(1'b0 == exitcond_fu_700_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300)) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
            ap_reg_ppiten_pp0_it2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)))) & ~(1'b0 == tmp_10_fu_717_p3))) begin
            ap_reg_ppiten_pp1_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st12_fsm_9) & (1'b0 == stereo_enabler_read_reg_1341))) begin
            ap_reg_ppiten_pp1_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)))) & (1'b0 == tmp_10_fu_717_p3))) begin
            ap_reg_ppiten_pp1_it1 <= 1'b1;
        end else if ((((1'b1 == ap_sig_cseq_ST_st12_fsm_9) & (1'b0 == stereo_enabler_read_reg_1341)) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)))) & ~(1'b0 == tmp_10_fu_717_p3)))) begin
            ap_reg_ppiten_pp1_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp2_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outstream_channel_2_V_TREADY)))) & ~(1'b0 == tmp_fu_1064_p3))) begin
            ap_reg_ppiten_pp2_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st12_fsm_9) & ~(1'b0 == stereo_enabler_read_reg_1341))) begin
            ap_reg_ppiten_pp2_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp2_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outstream_channel_2_V_TREADY)))) & (1'b0 == tmp_fu_1064_p3))) begin
            ap_reg_ppiten_pp2_it1 <= 1'b1;
        end else if ((((1'b1 == ap_sig_cseq_ST_st12_fsm_9) & ~(1'b0 == stereo_enabler_read_reg_1341)) | ((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outstream_channel_2_V_TREADY)))) & ~(1'b0 == tmp_fu_1064_p3)))) begin
            ap_reg_ppiten_pp2_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inner_index <= ap_const_lv32_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~((1'b0 == exitcond1_fu_655_p2) & (1'b0 == ap_sig_ioackin_base_ddr_addr_ARREADY)) & ~(1'b0 == exitcond1_fu_655_p2))) begin
            inner_index <= storemerge_fu_686_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        luma_chroma_switch <= ap_const_lv32_0;
    end else begin
        if (ap_sig_374) begin
            if (~(1'b0 == tmp_18_fu_729_p2)) begin
                luma_chroma_switch <= ap_const_lv32_0;
            end else if ((1'b0 == tmp_18_fu_729_p2)) begin
                luma_chroma_switch <= tmp_20_fu_735_p2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st17_fsm_12)) begin
        i_reg_384 <= i_1_reg_1393;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_384 <= ap_const_lv20_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & (1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == exitcond_reg_1404) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300))) begin
        indvar_reg_395 <= indvar_next_reg_1408;
    end else if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        indvar_reg_395 <= ap_const_lv10_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st12_fsm_9) & ~(1'b0 == stereo_enabler_read_reg_1341))) begin
        j1_reg_428 <= ap_const_lv13_0;
    end else if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp2_it0) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outstream_channel_2_V_TREADY)))) & (1'b0 == tmp_fu_1064_p3))) begin
        j1_reg_428 <= j_2_fu_1101_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st12_fsm_9) & (1'b0 == stereo_enabler_read_reg_1341))) begin
        j_reg_407 <= ap_const_lv13_0;
    end else if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it0) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)))) & (1'b0 == tmp_10_fu_717_p3))) begin
        j_reg_407 <= j_4_fu_846_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st17_fsm_12)) begin
        offset1_reg_374 <= offset_1_fu_1335_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        offset1_reg_374 <= offset_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300))) begin
        ap_reg_ppstg_exitcond_reg_1404_pp0_iter1 <= exitcond_reg_1404;
        ap_reg_ppstg_indvar_reg_395_pp0_iter1 <= indvar_reg_395;
        exitcond_reg_1404 <= exitcond_fu_700_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & (1'b0 == exitcond_reg_1404) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300))) begin
        base_ddr_addr_addr_read_reg_1413 <= base_ddr_addr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & (1'b0 == guard_variable_for_ddr_to_axis_1_load_fu_468_p1))) begin
        guard_variable_for_ddr_to_axis <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & (1'b0 == guard_variable_for_ddr_to_axis_2_load_fu_483_p1))) begin
        guard_variable_for_ddr_to_axis_1 <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & (1'b0 == guard_variable_for_ddr_to_axis_load_fu_453_p1))) begin
        guard_variable_for_ddr_to_axis_2 <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & (1'b0 == guard_variable_for_ddr_to_axis_3_load_fu_498_p1))) begin
        guard_variable_for_ddr_to_axis_3 <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~((1'b0 == exitcond1_fu_655_p2) & (1'b0 == ap_sig_ioackin_base_ddr_addr_ARREADY)))) begin
        i_1_reg_1393 <= i_1_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300))) begin
        indvar_next_reg_1408 <= indvar_next_fu_706_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        inner_index_load_reg_1345 <= inner_index;
        stereo_enabler_read_reg_1341 <= stereo_enabler;
        tmp_1_FRAME_BUFFER_NUMBER_loc_s_reg_1372[7 : 0] <= tmp_1_FRAME_BUFFER_NUMBER_loc_s_fu_561_p1[7 : 0];
        tmp_5_reg_1385 <= {{frame_buffer_dim_FRAME_BUFFER_s_fu_533_p3[ap_const_lv32_1F : ap_const_lv32_C]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)))))) begin
        tmp_10_reg_1418 <= j_reg_407[ap_const_lv32_C];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outstream_channel_2_V_TREADY)))) & (1'b0 == tmp_fu_1064_p3))) begin
        tmp_11_reg_1455 <= tmp_11_fu_1072_p1;
        tmp_13_reg_1466 <= {{j1_reg_428[ap_const_lv32_2 : ap_const_lv32_1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)))) & (1'b0 == tmp_10_fu_717_p3))) begin
        tmp_18_reg_1422 <= tmp_18_fu_729_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)))) & (1'b0 == tmp_10_fu_717_p3) & ~(1'b0 == tmp_18_fu_729_p2))) begin
        tmp_52_reg_1436 <= tmp_52_fu_779_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)))) & (1'b0 == tmp_10_fu_717_p3) & (1'b0 == tmp_18_fu_729_p2))) begin
        tmp_71_reg_1426 <= tmp_71_fu_747_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outstream_channel_2_V_TREADY)))))) begin
        tmp_reg_1451 <= j1_reg_428[ap_const_lv32_C];
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        if (~(1'b0 == guard_variable_for_ddr_to_axis_3_load_fu_498_p1)) begin
            BASE_ADDRESS_flag_phi_fu_356_p4 = 1'b0;
        end else if ((1'b0 == guard_variable_for_ddr_to_axis_3_load_fu_498_p1)) begin
            BASE_ADDRESS_flag_phi_fu_356_p4 = 1'b1;
        end else begin
            BASE_ADDRESS_flag_phi_fu_356_p4 = 'bx;
        end
    end else begin
        BASE_ADDRESS_flag_phi_fu_356_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        if (~(1'b0 == guard_variable_for_ddr_to_axis_3_load_fu_498_p1)) begin
            BASE_ADDRESS_loc_phi_fu_367_p4 = BASE_ADDRESS_r;
        end else if ((1'b0 == guard_variable_for_ddr_to_axis_3_load_fu_498_p1)) begin
            BASE_ADDRESS_loc_phi_fu_367_p4 = base_address;
        end else begin
            BASE_ADDRESS_loc_phi_fu_367_p4 = 'bx;
        end
    end else begin
        BASE_ADDRESS_loc_phi_fu_367_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        if (~(1'b0 == guard_variable_for_ddr_to_axis_load_fu_453_p1)) begin
            FRAME_BUFFER_DIM_flag_phi_fu_293_p4 = 1'b0;
        end else if ((1'b0 == guard_variable_for_ddr_to_axis_load_fu_453_p1)) begin
            FRAME_BUFFER_DIM_flag_phi_fu_293_p4 = 1'b1;
        end else begin
            FRAME_BUFFER_DIM_flag_phi_fu_293_p4 = 'bx;
        end
    end else begin
        FRAME_BUFFER_DIM_flag_phi_fu_293_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        if (~(1'b0 == guard_variable_for_ddr_to_axis_load_fu_453_p1)) begin
            FRAME_BUFFER_DIM_loc_phi_fu_304_p4 = FRAME_BUFFER_DIM_r;
        end else if ((1'b0 == guard_variable_for_ddr_to_axis_load_fu_453_p1)) begin
            FRAME_BUFFER_DIM_loc_phi_fu_304_p4 = frame_buffer_dim;
        end else begin
            FRAME_BUFFER_DIM_loc_phi_fu_304_p4 = 'bx;
        end
    end else begin
        FRAME_BUFFER_DIM_loc_phi_fu_304_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        if (~(1'b0 == guard_variable_for_ddr_to_axis_2_load_fu_483_p1)) begin
            FRAME_BUFFER_NUMBER_flag_phi_fu_335_p4 = 1'b0;
        end else if ((1'b0 == guard_variable_for_ddr_to_axis_2_load_fu_483_p1)) begin
            FRAME_BUFFER_NUMBER_flag_phi_fu_335_p4 = 1'b1;
        end else begin
            FRAME_BUFFER_NUMBER_flag_phi_fu_335_p4 = 'bx;
        end
    end else begin
        FRAME_BUFFER_NUMBER_flag_phi_fu_335_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        if (~(1'b0 == guard_variable_for_ddr_to_axis_2_load_fu_483_p1)) begin
            FRAME_BUFFER_NUMBER_loc_phi_fu_346_p4 = FRAME_BUFFER_NUMBER_r;
        end else if ((1'b0 == guard_variable_for_ddr_to_axis_2_load_fu_483_p1)) begin
            FRAME_BUFFER_NUMBER_loc_phi_fu_346_p4 = frame_buffer_number;
        end else begin
            FRAME_BUFFER_NUMBER_loc_phi_fu_346_p4 = 'bx;
        end
    end else begin
        FRAME_BUFFER_NUMBER_loc_phi_fu_346_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        if (~(1'b0 == guard_variable_for_ddr_to_axis_1_load_fu_468_p1)) begin
            FRAME_OFFSET_flag_phi_fu_314_p4 = 1'b0;
        end else if ((1'b0 == guard_variable_for_ddr_to_axis_1_load_fu_468_p1)) begin
            FRAME_OFFSET_flag_phi_fu_314_p4 = 1'b1;
        end else begin
            FRAME_OFFSET_flag_phi_fu_314_p4 = 'bx;
        end
    end else begin
        FRAME_OFFSET_flag_phi_fu_314_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        if (~(1'b0 == guard_variable_for_ddr_to_axis_1_load_fu_468_p1)) begin
            FRAME_OFFSET_loc_phi_fu_325_p4 = FRAME_OFFSET;
        end else if ((1'b0 == guard_variable_for_ddr_to_axis_1_load_fu_468_p1)) begin
            FRAME_OFFSET_loc_phi_fu_325_p4 = frame_buffer_offset;
        end else begin
            FRAME_OFFSET_loc_phi_fu_325_p4 = 'bx;
        end
    end else begin
        FRAME_OFFSET_loc_phi_fu_325_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~((1'b0 == exitcond1_fu_655_p2) & (1'b0 == ap_sig_ioackin_base_ddr_addr_ARREADY)) & ~(1'b0 == exitcond1_fu_655_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~((1'b0 == exitcond1_fu_655_p2) & (1'b0 == ap_sig_ioackin_base_ddr_addr_ARREADY)) & ~(1'b0 == exitcond1_fu_655_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_169) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_118) begin
        ap_sig_cseq_ST_pp1_stg0_fsm_10 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp1_stg0_fsm_10 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_140) begin
        ap_sig_cseq_ST_pp2_stg0_fsm_11 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp2_stg0_fsm_11 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_422) begin
        ap_sig_cseq_ST_st12_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_403) begin
        ap_sig_cseq_ST_st17_fsm_12 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_12 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_30) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_158) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_410) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_base_ddr_addr_ARREADY)) begin
        ap_sig_ioackin_base_ddr_addr_ARREADY = base_ddr_addr_ARREADY;
    end else begin
        ap_sig_ioackin_base_ddr_addr_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_outStream_channel_1_V_TREADY)) begin
        ap_sig_ioackin_outStream_channel_1_V_TREADY = outStream_channel_1_V_TREADY;
    end else begin
        ap_sig_ioackin_outStream_channel_1_V_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_outstream_channel_2_V_TREADY)) begin
        ap_sig_ioackin_outstream_channel_2_V_TREADY = outstream_channel_2_V_TREADY;
    end else begin
        ap_sig_ioackin_outstream_channel_2_V_TREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_655_p2) & (1'b0 == ap_reg_ioackin_base_ddr_addr_ARREADY))) begin
        base_ddr_addr_ARVALID = 1'b1;
    end else begin
        base_ddr_addr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & (1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == exitcond_reg_1404) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300))) begin
        base_ddr_addr_RREADY = 1'b1;
    end else begin
        base_ddr_addr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_655_p2))) begin
        base_ddr_addr_blk_n_AR = m_axi_base_ddr_addr_ARREADY;
    end else begin
        base_ddr_addr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & (1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == exitcond_reg_1404))) begin
        base_ddr_addr_blk_n_R = m_axi_base_ddr_addr_RVALID;
    end else begin
        base_ddr_addr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp2_it0))) begin
        buffer_address0 = gepindex276_cast_fu_1086_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it0) & (1'b0 == tmp_10_fu_717_p3) & ~(1'b0 == tmp_18_fu_729_p2))) begin
        buffer_address0 = gepindex2_cast_fu_841_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it0) & (1'b0 == tmp_10_fu_717_p3) & (1'b0 == tmp_18_fu_729_p2))) begin
        buffer_address0 = gepindex264_cast_fu_761_p1;
    end else begin
        buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_reg_ppiten_pp0_it2)) begin
        buffer_address1 = tmp_6_fu_712_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp2_it0))) begin
        buffer_address1 = gepindex276_cast_fu_1086_p1;
    end else begin
        buffer_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp2_it0) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outstream_channel_2_V_TREADY))))) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it0) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)))) & (1'b0 == tmp_10_fu_717_p3) & ~(1'b0 == tmp_18_fu_729_p2)) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it0) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)))) & (1'b0 == tmp_10_fu_717_p3) & (1'b0 == tmp_18_fu_729_p2)))) begin
        buffer_ce0 = 1'b1;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp2_it0) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outstream_channel_2_V_TREADY))))) | ((1'b1 == ap_reg_ppiten_pp0_it2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300)))) begin
        buffer_ce1 = 1'b1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300) & (1'b0 == ap_reg_ppstg_exitcond_reg_1404_pp0_iter1))) begin
        buffer_we1 = 1'b1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_8) & (1'b1 == ap_reg_ppiten_pp0_it1) & (1'b0 == exitcond_reg_1404))) begin
        indvar_phi_fu_399_p4 = indvar_next_reg_1408;
    end else begin
        indvar_phi_fu_399_p4 = indvar_reg_395;
    end
end

always @ (*) begin
    if (ap_sig_570) begin
        if ((1'b0 == tmp_18_fu_729_p2)) begin
            j_1_phi_fu_421_p4 = j_reg_407;
        end else if (~(1'b0 == tmp_18_fu_729_p2)) begin
            j_1_phi_fu_421_p4 = j_3_fu_772_p2;
        end else begin
            j_1_phi_fu_421_p4 = ap_reg_phiprechg_j_1_reg_418pp1_it0;
        end
    end else begin
        j_1_phi_fu_421_p4 = ap_reg_phiprechg_j_1_reg_418pp1_it0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == tmp_reg_1451))) begin
        outStream_channel_1_V_TDATA = tmp_34_fu_1208_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422))) begin
        outStream_channel_1_V_TDATA = tmp_70_fu_1059_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422))) begin
        outStream_channel_1_V_TDATA = tmp_88_fu_953_p1;
    end else begin
        outStream_channel_1_V_TDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422)) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422)) | ((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == tmp_reg_1451)))) begin
        outStream_channel_1_V_TDATA_blk_n = outStream_channel_1_V_TREADY;
    end else begin
        outStream_channel_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_reg_ioackin_outStream_channel_1_V_TREADY)) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_reg_ioackin_outStream_channel_1_V_TREADY)) | ((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == tmp_reg_1451) & (1'b0 == ap_reg_ioackin_outStream_channel_1_V_TREADY)))) begin
        outStream_channel_1_V_TVALID = 1'b1;
    end else begin
        outStream_channel_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == tmp_reg_1451))) begin
        outstream_channel_2_V_TDATA_blk_n = outstream_channel_2_V_TREADY;
    end else begin
        outstream_channel_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == tmp_reg_1451) & (1'b0 == ap_reg_ioackin_outstream_channel_2_V_TREADY))) begin
        outstream_channel_2_V_TVALID = 1'b1;
    end else begin
        outstream_channel_2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((~((1'b0 == exitcond1_fu_655_p2) & (1'b0 == ap_sig_ioackin_base_ddr_addr_ARREADY)) & ~(1'b0 == exitcond1_fu_655_p2))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((1'b0 == exitcond1_fu_655_p2) & ~((1'b0 == exitcond1_fu_655_p2) & (1'b0 == ap_sig_ioackin_base_ddr_addr_ARREADY)))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_8;
        end
        ap_ST_pp0_stg0_fsm_8 : begin
            if ((~((1'b1 == ap_reg_ppiten_pp0_it2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300) & ~(1'b1 == ap_reg_ppiten_pp0_it1)) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300) & ~(1'b0 == exitcond_fu_700_p2) & ~(1'b1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_8;
            end else if ((((1'b1 == ap_reg_ppiten_pp0_it2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300) & ~(1'b1 == ap_reg_ppiten_pp0_it1)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_300) & ~(1'b0 == exitcond_fu_700_p2) & ~(1'b1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st12_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_8;
            end
        end
        ap_ST_st12_fsm_9 : begin
            if (~(1'b0 == stereo_enabler_read_reg_1341)) begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_10;
            end
        end
        ap_ST_pp1_stg0_fsm_10 : begin
            if (~((1'b1 == ap_reg_ppiten_pp1_it0) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)))) & ~(1'b0 == tmp_10_fu_717_p3))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_10;
            end else if (((1'b1 == ap_reg_ppiten_pp1_it0) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)))) & ~(1'b0 == tmp_10_fu_717_p3))) begin
                ap_NS_fsm = ap_ST_st17_fsm_12;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_10;
            end
        end
        ap_ST_pp2_stg0_fsm_11 : begin
            if (~((1'b1 == ap_reg_ppiten_pp2_it0) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outstream_channel_2_V_TREADY)))) & ~(1'b0 == tmp_fu_1064_p3))) begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_11;
            end else if (((1'b1 == ap_reg_ppiten_pp2_it0) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_reg_1451) & (1'b0 == ap_sig_ioackin_outstream_channel_2_V_TREADY)))) & ~(1'b0 == tmp_fu_1064_p3))) begin
                ap_NS_fsm = ap_ST_st17_fsm_12;
            end else begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_11;
            end
        end
        ap_ST_st17_fsm_12 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addrCmp1_fu_813_p2 = ((mem_index_gep_fu_797_p2 < ap_const_lv14_204) ? 1'b1 : 1'b0);

assign addrCmp_fu_807_p2 = ((tmp_53_fu_783_p4 < ap_const_lv10_3FC) ? 1'b1 : 1'b0);

assign adjSize55_cast_fu_803_p1 = mem_index_gep_fu_797_p2;

assign adjSize_fu_793_p1 = $signed(tmp_53_fu_783_p4);

assign ap_reg_phiprechg_j_1_reg_418pp1_it0 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_118 = (1'b1 == ap_CS_fsm[ap_const_lv32_A]);
end

always @ (*) begin
    ap_sig_140 = (1'b1 == ap_CS_fsm[ap_const_lv32_B]);
end

always @ (*) begin
    ap_sig_150 = ((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_11) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == tmp_reg_1451));
end

always @ (*) begin
    ap_sig_158 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_163 = ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_655_p2));
end

always @ (*) begin
    ap_sig_169 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_30 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_300 = ((1'b0 == exitcond_reg_1404) & (base_ddr_addr_RVALID == 1'b0));
end

always @ (*) begin
    ap_sig_374 = ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it0) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & (((1'b0 == tmp_10_reg_1418) & (1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)) | ((1'b0 == tmp_10_reg_1418) & ~(1'b0 == tmp_18_reg_1422) & (1'b0 == ap_sig_ioackin_outStream_channel_1_V_TREADY)))) & (1'b0 == tmp_10_fu_717_p3));
end

always @ (*) begin
    ap_sig_403 = (1'b1 == ap_CS_fsm[ap_const_lv32_C]);
end

always @ (*) begin
    ap_sig_410 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_422 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_570 = ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_10) & (1'b1 == ap_reg_ppiten_pp1_it0) & (1'b0 == tmp_10_fu_717_p3));
end

assign base_ddr_addr_ARADDR = tmp_1_fu_666_p1;

assign end_pos1_fu_1226_p2 = (start_pos2_fu_1218_p3 | ap_const_lv6_7);

assign end_pos2_fu_965_p2 = (start_pos_fu_958_p3 | ap_const_lv6_7);

assign end_pos3_fu_859_p2 = (start_pos3_fu_852_p3 | ap_const_lv6_7);

assign end_pos_fu_1114_p2 = (start_pos1_fu_1107_p3 | ap_const_lv6_7);

assign exitcond1_fu_655_p2 = ((i_reg_384 == tmp_5_reg_1385) ? 1'b1 : 1'b0);

assign exitcond_fu_700_p2 = ((indvar_phi_fu_399_p4 == ap_const_lv10_200) ? 1'b1 : 1'b0);

assign frame_buffer_dim_FRAME_BUFFER_s_fu_533_p0 = update_intr;

assign frame_buffer_dim_FRAME_BUFFER_s_fu_533_p3 = ((frame_buffer_dim_FRAME_BUFFER_s_fu_533_p0[0:0] === 1'b1) ? frame_buffer_dim : FRAME_BUFFER_DIM_loc_phi_fu_304_p4);

assign frame_buffer_offset_FRAME_OFFS_fu_579_p0 = update_intr;

assign frame_buffer_offset_FRAME_OFFS_fu_579_p3 = ((frame_buffer_offset_FRAME_OFFS_fu_579_p0[0:0] === 1'b1) ? frame_buffer_offset : FRAME_OFFSET_loc_phi_fu_325_p4);

assign gepindex1_fu_825_p3 = ((addrCmp_fu_807_p2[0:0] === 1'b1) ? gepindex_fu_819_p2 : ap_const_lv15_1FF);

assign gepindex264_cast_fu_761_p1 = gepindex62_cast_fu_751_p4;

assign gepindex276_cast_fu_1086_p1 = gepindex74_cast_fu_1076_p4;

assign gepindex2_cast_fu_841_p1 = $signed(gepindex2_fu_833_p3);

assign gepindex2_fu_833_p3 = ((addrCmp1_fu_813_p2[0:0] === 1'b1) ? gepindex1_fu_825_p3 : ap_const_lv15_1FF);

assign gepindex62_cast_fu_751_p4 = {{j_reg_407[ap_const_lv32_B : ap_const_lv32_3]}};

assign gepindex74_cast_fu_1076_p4 = {{j1_reg_428[ap_const_lv32_B : ap_const_lv32_3]}};

assign gepindex_fu_819_p2 = ($signed(ap_const_lv15_7FFC) + $signed(adjSize55_cast_fu_803_p1));

integer ap_tvar_int_0;

always @ (buffer_q0) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > ap_const_lv32_3F - ap_const_lv32_0) begin
            grp_fu_439_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            grp_fu_439_p4[ap_tvar_int_0] = buffer_q0[ap_const_lv32_3F - ap_tvar_int_0];
        end
    end
end

assign guard_variable_for_ddr_to_axis_1_load_fu_468_p1 = guard_variable_for_ddr_to_axis;

assign guard_variable_for_ddr_to_axis_2_load_fu_483_p1 = guard_variable_for_ddr_to_axis_1;

assign guard_variable_for_ddr_to_axis_3_load_fu_498_p1 = guard_variable_for_ddr_to_axis_3;

assign guard_variable_for_ddr_to_axis_load_fu_453_p1 = guard_variable_for_ddr_to_axis_2;

assign i_1_fu_660_p2 = (i_reg_384 + ap_const_lv20_1);

assign indvar_next_fu_706_p2 = (indvar_phi_fu_399_p4 + ap_const_lv10_1);

assign j_2_fu_1101_p2 = (ap_const_lv13_2 + j1_reg_428);

assign j_3_fu_772_p2 = ($signed(ap_const_lv13_1FFF) + $signed(j_reg_407));

assign j_4_fu_846_p2 = (j_1_phi_fu_421_p4 + ap_const_lv13_1);

assign mem_index_gep_fu_797_p2 = ($signed(ap_const_lv14_4) + $signed(adjSize_fu_793_p1));

assign offset_1_fu_1335_p2 = (offset1_reg_374 + ap_const_lv32_200);

assign offset_fu_615_p2 = (tmp_9_fu_611_p1 + tmp_7_BASE_ADDRESS_loc_fu_587_p3);

assign outstream_channel_2_V_TDATA = tmp_50_fu_1324_p2[7:0];

assign p_BASE_ADDRESS_flag_fu_565_p1 = update_intr;

assign p_BASE_ADDRESS_flag_fu_565_p2 = (BASE_ADDRESS_flag_phi_fu_356_p4 | p_BASE_ADDRESS_flag_fu_565_p1);

assign p_FRAME_BUFFER_DIM_flag_fu_527_p1 = update_intr;

assign p_FRAME_BUFFER_DIM_flag_fu_527_p2 = (FRAME_BUFFER_DIM_flag_phi_fu_293_p4 | p_FRAME_BUFFER_DIM_flag_fu_527_p1);

assign p_FRAME_BUFFER_NUMBER_flag_fu_547_p1 = update_intr;

assign p_FRAME_BUFFER_NUMBER_flag_fu_547_p2 = (FRAME_BUFFER_NUMBER_flag_phi_fu_335_p4 | p_FRAME_BUFFER_NUMBER_flag_fu_547_p1);

assign p_FRAME_OFFSET_flag_fu_541_p1 = update_intr;

assign p_FRAME_OFFSET_flag_fu_541_p2 = (FRAME_OFFSET_flag_phi_fu_314_p4 | p_FRAME_OFFSET_flag_fu_541_p1);

assign start_pos1_fu_1107_p3 = {{tmp_13_reg_1466}, {ap_const_lv4_0}};

assign start_pos2_fu_1218_p3 = {{tmp_14_fu_1213_p2}, {ap_const_lv3_0}};

assign start_pos3_fu_852_p3 = {{tmp_71_reg_1426}, {ap_const_lv3_0}};

assign start_pos_fu_958_p3 = {{tmp_52_reg_1436}, {ap_const_lv3_0}};

assign storemerge_fu_686_p3 = ((tmp_3_fu_677_p2[0:0] === 1'b1) ? ap_const_lv32_0 : tmp_4_fu_681_p2);

assign tmp_10_fu_717_p3 = j_reg_407[ap_const_lv32_C];

assign tmp_11_fu_1072_p1 = j1_reg_428[2:0];

assign tmp_14_fu_1213_p2 = (tmp_11_reg_1455 | ap_const_lv3_1);

assign tmp_15_fu_1120_p2 = ((start_pos1_fu_1107_p3 > end_pos_fu_1114_p2) ? 1'b1 : 1'b0);

assign tmp_17_fu_1126_p1 = start_pos1_fu_1107_p3;

assign tmp_18_fu_729_p2 = ((luma_chroma_switch == ap_const_lv32_1) ? 1'b1 : 1'b0);

assign tmp_19_fu_1130_p1 = end_pos_fu_1114_p2;

assign tmp_1_FRAME_BUFFER_NUMBER_loc_fu_553_p0 = update_intr;

assign tmp_1_FRAME_BUFFER_NUMBER_loc_fu_553_p3 = ((tmp_1_FRAME_BUFFER_NUMBER_loc_fu_553_p0[0:0] === 1'b1) ? frame_buffer_number : FRAME_BUFFER_NUMBER_loc_phi_fu_346_p4);

assign tmp_1_FRAME_BUFFER_NUMBER_loc_s_fu_561_p1 = tmp_1_FRAME_BUFFER_NUMBER_loc_fu_553_p3;

assign tmp_1_fu_666_p1 = $signed(offset1_reg_374);

assign tmp_20_fu_735_p2 = (ap_const_lv32_1 + luma_chroma_switch);

assign tmp_22_fu_1134_p2 = (tmp_17_fu_1126_p1 - tmp_19_fu_1130_p1);

assign tmp_23_fu_1140_p2 = (tmp_17_fu_1126_p1 ^ ap_const_lv7_3F);

assign tmp_24_fu_1146_p2 = (tmp_19_fu_1130_p1 - tmp_17_fu_1126_p1);

assign tmp_25_fu_1152_p3 = ((tmp_15_fu_1120_p2[0:0] === 1'b1) ? tmp_22_fu_1134_p2 : tmp_24_fu_1146_p2);

assign tmp_26_fu_1160_p3 = ((tmp_15_fu_1120_p2[0:0] === 1'b1) ? grp_fu_439_p4 : buffer_q0);

assign tmp_27_fu_1168_p3 = ((tmp_15_fu_1120_p2[0:0] === 1'b1) ? tmp_23_fu_1140_p2 : tmp_17_fu_1126_p1);

assign tmp_28_fu_1176_p2 = (ap_const_lv7_3F - tmp_25_fu_1152_p3);

assign tmp_29_fu_1182_p1 = tmp_27_fu_1168_p3;

assign tmp_2_fu_601_p4 = {{tmp_s_fu_595_p2[ap_const_lv32_1F : ap_const_lv32_3]}};

assign tmp_30_fu_1186_p1 = tmp_28_fu_1176_p2;

assign tmp_31_fu_1190_p2 = tmp_26_fu_1160_p3 >> tmp_29_fu_1182_p1;

assign tmp_32_fu_1196_p2 = ap_const_lv64_FFFFFFFFFFFFFFFF >> tmp_30_fu_1186_p1;

assign tmp_33_fu_1202_p2 = (tmp_31_fu_1190_p2 & tmp_32_fu_1196_p2);

assign tmp_34_fu_1208_p1 = tmp_33_fu_1202_p2[7:0];

assign tmp_35_fu_1232_p2 = ((start_pos2_fu_1218_p3 > end_pos1_fu_1226_p2) ? 1'b1 : 1'b0);

assign tmp_36_fu_1238_p1 = start_pos2_fu_1218_p3;

assign tmp_37_fu_1242_p1 = end_pos1_fu_1226_p2;

integer ap_tvar_int_1;

always @ (buffer_q1) begin
    for (ap_tvar_int_1 = 64 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > ap_const_lv32_3F - ap_const_lv32_0) begin
            tmp_38_fu_1246_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_38_fu_1246_p4[ap_tvar_int_1] = buffer_q1[ap_const_lv32_3F - ap_tvar_int_1];
        end
    end
end

assign tmp_39_fu_1256_p2 = (tmp_36_fu_1238_p1 - tmp_37_fu_1242_p1);

assign tmp_3_fu_677_p2 = ((inner_index_load_reg_1345 == tmp_1_FRAME_BUFFER_NUMBER_loc_s_reg_1372) ? 1'b1 : 1'b0);

assign tmp_40_fu_1262_p2 = (tmp_36_fu_1238_p1 ^ ap_const_lv7_3F);

assign tmp_41_fu_1268_p2 = (tmp_37_fu_1242_p1 - tmp_36_fu_1238_p1);

assign tmp_42_fu_1274_p3 = ((tmp_35_fu_1232_p2[0:0] === 1'b1) ? tmp_39_fu_1256_p2 : tmp_41_fu_1268_p2);

assign tmp_43_fu_1282_p3 = ((tmp_35_fu_1232_p2[0:0] === 1'b1) ? tmp_38_fu_1246_p4 : buffer_q1);

assign tmp_44_fu_1290_p3 = ((tmp_35_fu_1232_p2[0:0] === 1'b1) ? tmp_40_fu_1262_p2 : tmp_36_fu_1238_p1);

assign tmp_45_fu_1298_p2 = (ap_const_lv7_3F - tmp_42_fu_1274_p3);

assign tmp_46_fu_1304_p1 = tmp_44_fu_1290_p3;

assign tmp_47_fu_1308_p1 = tmp_45_fu_1298_p2;

assign tmp_48_fu_1312_p2 = tmp_43_fu_1282_p3 >> tmp_46_fu_1304_p1;

assign tmp_49_fu_1318_p2 = ap_const_lv64_FFFFFFFFFFFFFFFF >> tmp_47_fu_1308_p1;

assign tmp_4_fu_681_p2 = ($signed(inner_index_load_reg_1345) + $signed(ap_const_lv32_1));

assign tmp_50_fu_1324_p2 = (tmp_48_fu_1312_p2 & tmp_49_fu_1318_p2);

assign tmp_52_fu_779_p1 = j_3_fu_772_p2[2:0];

assign tmp_53_fu_783_p4 = {{j_3_fu_772_p2[ap_const_lv32_C : ap_const_lv32_3]}};

assign tmp_54_fu_971_p2 = ((start_pos_fu_958_p3 > end_pos2_fu_965_p2) ? 1'b1 : 1'b0);

assign tmp_55_fu_977_p1 = start_pos_fu_958_p3;

assign tmp_56_fu_981_p1 = end_pos2_fu_965_p2;

assign tmp_58_fu_985_p2 = (tmp_55_fu_977_p1 - tmp_56_fu_981_p1);

assign tmp_59_fu_991_p2 = (tmp_55_fu_977_p1 ^ ap_const_lv7_3F);

assign tmp_60_fu_997_p2 = (tmp_56_fu_981_p1 - tmp_55_fu_977_p1);

assign tmp_61_fu_1003_p3 = ((tmp_54_fu_971_p2[0:0] === 1'b1) ? tmp_58_fu_985_p2 : tmp_60_fu_997_p2);

assign tmp_62_fu_1011_p3 = ((tmp_54_fu_971_p2[0:0] === 1'b1) ? grp_fu_439_p4 : buffer_q0);

assign tmp_63_fu_1019_p3 = ((tmp_54_fu_971_p2[0:0] === 1'b1) ? tmp_59_fu_991_p2 : tmp_55_fu_977_p1);

assign tmp_64_fu_1027_p2 = (ap_const_lv7_3F - tmp_61_fu_1003_p3);

assign tmp_65_fu_1033_p1 = tmp_63_fu_1019_p3;

assign tmp_66_fu_1037_p1 = tmp_64_fu_1027_p2;

assign tmp_67_fu_1041_p2 = tmp_62_fu_1011_p3 >> tmp_65_fu_1033_p1;

assign tmp_68_fu_1047_p2 = ap_const_lv64_FFFFFFFFFFFFFFFF >> tmp_66_fu_1037_p1;

assign tmp_69_fu_1053_p2 = (tmp_67_fu_1041_p2 & tmp_68_fu_1047_p2);

assign tmp_6_fu_712_p1 = ap_reg_ppstg_indvar_reg_395_pp0_iter1;

assign tmp_70_fu_1059_p1 = tmp_69_fu_1053_p2[7:0];

assign tmp_71_fu_747_p1 = j_reg_407[2:0];

assign tmp_72_fu_865_p2 = ((start_pos3_fu_852_p3 > end_pos3_fu_859_p2) ? 1'b1 : 1'b0);

assign tmp_73_fu_871_p1 = start_pos3_fu_852_p3;

assign tmp_74_fu_875_p1 = end_pos3_fu_859_p2;

assign tmp_76_fu_879_p2 = (tmp_73_fu_871_p1 - tmp_74_fu_875_p1);

assign tmp_77_fu_885_p2 = (tmp_73_fu_871_p1 ^ ap_const_lv7_3F);

assign tmp_78_fu_891_p2 = (tmp_74_fu_875_p1 - tmp_73_fu_871_p1);

assign tmp_79_fu_897_p3 = ((tmp_72_fu_865_p2[0:0] === 1'b1) ? tmp_76_fu_879_p2 : tmp_78_fu_891_p2);

assign tmp_7_BASE_ADDRESS_loc_fu_587_p0 = update_intr;

assign tmp_7_BASE_ADDRESS_loc_fu_587_p3 = ((tmp_7_BASE_ADDRESS_loc_fu_587_p0[0:0] === 1'b1) ? tmp_8_fu_523_p1 : BASE_ADDRESS_loc_phi_fu_367_p4);

assign tmp_7_base_address_fu_571_p0 = update_intr;

assign tmp_7_base_address_fu_571_p3 = ((tmp_7_base_address_fu_571_p0[0:0] === 1'b1) ? tmp_8_fu_523_p1 : base_address);

assign tmp_7_fu_513_p4 = {{base_address[ap_const_lv32_1F : ap_const_lv32_3]}};

assign tmp_80_fu_905_p3 = ((tmp_72_fu_865_p2[0:0] === 1'b1) ? grp_fu_439_p4 : buffer_q0);

assign tmp_81_fu_913_p3 = ((tmp_72_fu_865_p2[0:0] === 1'b1) ? tmp_77_fu_885_p2 : tmp_73_fu_871_p1);

assign tmp_82_fu_921_p2 = (ap_const_lv7_3F - tmp_79_fu_897_p3);

assign tmp_83_fu_927_p1 = tmp_81_fu_913_p3;

assign tmp_84_fu_931_p1 = tmp_82_fu_921_p2;

assign tmp_85_fu_935_p2 = tmp_80_fu_905_p3 >> tmp_83_fu_927_p1;

assign tmp_86_fu_941_p2 = ap_const_lv64_FFFFFFFFFFFFFFFF >> tmp_84_fu_931_p1;

assign tmp_87_fu_947_p2 = (tmp_85_fu_935_p2 & tmp_86_fu_941_p2);

assign tmp_88_fu_953_p1 = tmp_87_fu_947_p2[7:0];

assign tmp_8_fu_523_p1 = tmp_7_fu_513_p4;

assign tmp_9_fu_611_p1 = tmp_2_fu_601_p4;

assign tmp_fu_1064_p3 = j1_reg_428[ap_const_lv32_C];

assign tmp_s_fu_595_p0 = inner_index;

assign tmp_s_fu_595_p2 = ($signed(tmp_s_fu_595_p0) * $signed(frame_buffer_offset_FRAME_OFFS_fu_579_p3));

always @ (posedge ap_clk) begin
    tmp_1_FRAME_BUFFER_NUMBER_loc_s_reg_1372[31:8] <= 24'b000000000000000000000000;
end

endmodule //ddr_to_axis_reader_SD
