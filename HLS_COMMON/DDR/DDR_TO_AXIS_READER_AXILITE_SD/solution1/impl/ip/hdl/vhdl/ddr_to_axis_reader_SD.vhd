-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ddr_to_axis_reader_SD is
generic (
    C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BASE_DDR_ADDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BASE_DDR_ADDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    outStream_channel_1_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_channel_1_V_TVALID : OUT STD_LOGIC;
    outStream_channel_1_V_TREADY : IN STD_LOGIC;
    outstream_channel_2_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outstream_channel_2_V_TVALID : OUT STD_LOGIC;
    outstream_channel_2_V_TREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_AWVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_AWREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_base_ddr_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_WREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH/8-1 downto 0);
    m_axi_base_ddr_addr_WLAST : OUT STD_LOGIC;
    m_axi_base_ddr_addr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_ARREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_base_ddr_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RVALID : IN STD_LOGIC;
    m_axi_base_ddr_addr_RREADY : OUT STD_LOGIC;
    m_axi_base_ddr_addr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RLAST : IN STD_LOGIC;
    m_axi_base_ddr_addr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_BVALID : IN STD_LOGIC;
    m_axi_base_ddr_addr_BREADY : OUT STD_LOGIC;
    m_axi_base_ddr_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of ddr_to_axis_reader_SD is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ddr_to_axis_reader_SD,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=42.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=41.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=4,HLS_SYN_FF=1208,HLS_SYN_LUT=4155}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_pp0_stg0_fsm_8 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_st12_fsm_9 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_pp1_stg0_fsm_10 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_pp2_stg0_fsm_11 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_st17_fsm_12 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv14_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_const_lv10_3FC : STD_LOGIC_VECTOR (9 downto 0) := "1111111100";
    constant ap_const_lv14_204 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000100";
    constant ap_const_lv15_7FFC : STD_LOGIC_VECTOR (14 downto 0) := "111111111111100";
    constant ap_const_lv15_1FF : STD_LOGIC_VECTOR (14 downto 0) := "000000111111111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_30 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal base_address : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_dim : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_number : STD_LOGIC_VECTOR (7 downto 0);
    signal update_intr : STD_LOGIC;
    signal stereo_enabler : STD_LOGIC;
    signal inner_index : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal guard_variable_for_ddr_to_axis_2 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal FRAME_BUFFER_DIM_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal guard_variable_for_ddr_to_axis : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal FRAME_OFFSET : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal guard_variable_for_ddr_to_axis_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal FRAME_BUFFER_NUMBER_r : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal guard_variable_for_ddr_to_axis_3 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal BASE_ADDRESS_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal luma_chroma_switch : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal outStream_channel_1_V_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_pp1_stg0_fsm_10 : STD_LOGIC;
    signal ap_sig_118 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal tmp_10_reg_1418 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_1422 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_11 : STD_LOGIC;
    signal ap_sig_140 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal tmp_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal outstream_channel_2_V_TDATA_blk_n : STD_LOGIC;
    signal base_ddr_addr_blk_n_AR : STD_LOGIC;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_158 : BOOLEAN;
    signal exitcond1_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_blk_n_R : STD_LOGIC;
    signal ap_sig_cseq_ST_pp0_stg0_fsm_8 : STD_LOGIC;
    signal ap_sig_169 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal exitcond_reg_1404 : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_AWREADY : STD_LOGIC;
    signal base_ddr_addr_WREADY : STD_LOGIC;
    signal base_ddr_addr_ARVALID : STD_LOGIC;
    signal base_ddr_addr_ARREADY : STD_LOGIC;
    signal base_ddr_addr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal base_ddr_addr_RVALID : STD_LOGIC;
    signal base_ddr_addr_RREADY : STD_LOGIC;
    signal base_ddr_addr_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal base_ddr_addr_RLAST : STD_LOGIC;
    signal base_ddr_addr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_BVALID : STD_LOGIC;
    signal base_ddr_addr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_395 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_ppstg_indvar_reg_395_pp0_iter1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_300 : BOOLEAN;
    signal j_reg_407 : STD_LOGIC_VECTOR (12 downto 0);
    signal j1_reg_428 : STD_LOGIC_VECTOR (12 downto 0);
    signal stereo_enabler_read_reg_1341 : STD_LOGIC_VECTOR (0 downto 0);
    signal inner_index_load_reg_1345 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_FRAME_BUFFER_NUMBER_loc_s_fu_561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_FRAME_BUFFER_NUMBER_loc_s_reg_1372 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1385 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_1_fu_660_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_1_reg_1393 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_ioackin_base_ddr_addr_ARREADY : STD_LOGIC;
    signal exitcond_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_1404_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_706_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_next_reg_1408 : STD_LOGIC_VECTOR (9 downto 0);
    signal base_ddr_addr_addr_read_reg_1413 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_717_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_outStream_channel_1_V_TREADY : STD_LOGIC;
    signal tmp_18_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_747_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_71_reg_1426 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_52_fu_779_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_52_reg_1436 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_4_fu_846_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_1064_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_outstream_channel_2_V_TREADY : STD_LOGIC;
    signal tmp_11_fu_1072_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_reg_1455 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_reg_1466 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_fu_1101_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal offset_1_fu_1335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_12 : STD_LOGIC;
    signal ap_sig_403 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_410 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_9 : STD_LOGIC;
    signal ap_sig_422 : BOOLEAN;
    signal buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_ce1 : STD_LOGIC;
    signal buffer_we1 : STD_LOGIC;
    signal buffer_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal FRAME_BUFFER_DIM_flag_phi_fu_293_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_ddr_to_axis_load_fu_453_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal FRAME_BUFFER_DIM_loc_phi_fu_304_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal FRAME_OFFSET_flag_phi_fu_314_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_ddr_to_axis_1_load_fu_468_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal FRAME_OFFSET_loc_phi_fu_325_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal FRAME_BUFFER_NUMBER_flag_phi_fu_335_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_ddr_to_axis_2_load_fu_483_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal FRAME_BUFFER_NUMBER_loc_phi_fu_346_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal BASE_ADDRESS_flag_phi_fu_356_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_ddr_to_axis_3_load_fu_498_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal BASE_ADDRESS_loc_phi_fu_367_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset1_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_384 : STD_LOGIC_VECTOR (19 downto 0);
    signal indvar_phi_fu_399_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_3_fu_772_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_reg_phiprechg_j_1_reg_418pp1_it0 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_1_phi_fu_421_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex264_cast_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2_cast_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex276_cast_fu_1086_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_base_ddr_addr_ARREADY : STD_LOGIC := '0';
    signal storemerge_fu_686_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_FRAME_BUFFER_DIM_flag_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_FRAME_OFFSET_flag_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_FRAME_BUFFER_NUMBER_flag_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_base_address_fu_571_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_BASE_ADDRESS_flag_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_fu_953_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_70_fu_1059_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_1208_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ioackin_outStream_channel_1_V_TREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_outstream_channel_2_V_TREADY : STD_LOGIC := '0';
    signal tmp_7_fu_513_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_FRAME_BUFFER_DIM_flag_fu_527_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal frame_buffer_dim_FRAME_BUFFER_s_fu_533_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_FRAME_OFFSET_flag_fu_541_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_FRAME_BUFFER_NUMBER_flag_fu_547_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_FRAME_BUFFER_NUMBER_loc_fu_553_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_FRAME_BUFFER_NUMBER_loc_fu_553_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_BASE_ADDRESS_flag_fu_565_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_base_address_fu_571_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_offset_FRAME_OFFS_fu_579_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_BASE_ADDRESS_loc_fu_587_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_595_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_offset_FRAME_OFFS_fu_579_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_601_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_9_fu_611_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_BASE_ADDRESS_loc_fu_587_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer_dim_FRAME_BUFFER_s_fu_533_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal gepindex62_cast_fu_751_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_53_fu_783_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal adjSize_fu_793_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_index_gep_fu_797_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal adjSize55_cast_fu_803_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex_fu_819_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal addrCmp1_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex1_fu_825_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal gepindex2_fu_833_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal start_pos3_fu_852_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal end_pos3_fu_859_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_73_fu_871_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_74_fu_875_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_72_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_879_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_78_fu_891_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_439_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_fu_885_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_79_fu_897_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_81_fu_913_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_82_fu_921_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_80_fu_905_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_83_fu_927_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_84_fu_931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_fu_935_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_fu_941_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_87_fu_947_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal start_pos_fu_958_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal end_pos2_fu_965_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_55_fu_977_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_56_fu_981_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_54_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_985_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_60_fu_997_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_59_fu_991_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_61_fu_1003_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_63_fu_1019_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_64_fu_1027_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_62_fu_1011_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_1033_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_1037_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_fu_1041_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_fu_1047_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_fu_1053_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex74_cast_fu_1076_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal start_pos1_fu_1107_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal end_pos_fu_1114_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_1126_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_1130_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_1134_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_1146_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_1140_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_fu_1152_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_fu_1168_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_28_fu_1176_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_fu_1160_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_1182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_1186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_1190_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_1196_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_1202_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_1213_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal start_pos2_fu_1218_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal end_pos1_fu_1226_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_36_fu_1238_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_37_fu_1242_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_35_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_1256_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_41_fu_1268_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_38_fu_1246_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_1262_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_42_fu_1274_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_44_fu_1290_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_45_fu_1298_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_fu_1282_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_1304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_1308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_1312_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_1318_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_1324_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_163 : BOOLEAN;
    signal ap_sig_150 : BOOLEAN;
    signal ap_sig_570 : BOOLEAN;
    signal ap_sig_374 : BOOLEAN;

    component ddr_to_axis_reader_SD_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ddr_to_axis_reader_SD_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        base_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer_dim : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer_number : OUT STD_LOGIC_VECTOR (7 downto 0);
        update_intr : OUT STD_LOGIC;
        stereo_enabler : OUT STD_LOGIC );
    end component;


    component ddr_to_axis_reader_SD_base_ddr_addr_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ddr_to_axis_reader_SD_AXILiteS_s_axi_U : component ddr_to_axis_reader_SD_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        base_address => base_address,
        frame_buffer_dim => frame_buffer_dim,
        frame_buffer_offset => frame_buffer_offset,
        frame_buffer_number => frame_buffer_number,
        update_intr => update_intr,
        stereo_enabler => stereo_enabler);

    ddr_to_axis_reader_SD_base_ddr_addr_m_axi_U : component ddr_to_axis_reader_SD_base_ddr_addr_m_axi
    generic map (
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BASE_DDR_ADDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_BASE_DDR_ADDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BASE_DDR_ADDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_base_ddr_addr_AWVALID,
        AWREADY => m_axi_base_ddr_addr_AWREADY,
        AWADDR => m_axi_base_ddr_addr_AWADDR,
        AWID => m_axi_base_ddr_addr_AWID,
        AWLEN => m_axi_base_ddr_addr_AWLEN,
        AWSIZE => m_axi_base_ddr_addr_AWSIZE,
        AWBURST => m_axi_base_ddr_addr_AWBURST,
        AWLOCK => m_axi_base_ddr_addr_AWLOCK,
        AWCACHE => m_axi_base_ddr_addr_AWCACHE,
        AWPROT => m_axi_base_ddr_addr_AWPROT,
        AWQOS => m_axi_base_ddr_addr_AWQOS,
        AWREGION => m_axi_base_ddr_addr_AWREGION,
        AWUSER => m_axi_base_ddr_addr_AWUSER,
        WVALID => m_axi_base_ddr_addr_WVALID,
        WREADY => m_axi_base_ddr_addr_WREADY,
        WDATA => m_axi_base_ddr_addr_WDATA,
        WSTRB => m_axi_base_ddr_addr_WSTRB,
        WLAST => m_axi_base_ddr_addr_WLAST,
        WID => m_axi_base_ddr_addr_WID,
        WUSER => m_axi_base_ddr_addr_WUSER,
        ARVALID => m_axi_base_ddr_addr_ARVALID,
        ARREADY => m_axi_base_ddr_addr_ARREADY,
        ARADDR => m_axi_base_ddr_addr_ARADDR,
        ARID => m_axi_base_ddr_addr_ARID,
        ARLEN => m_axi_base_ddr_addr_ARLEN,
        ARSIZE => m_axi_base_ddr_addr_ARSIZE,
        ARBURST => m_axi_base_ddr_addr_ARBURST,
        ARLOCK => m_axi_base_ddr_addr_ARLOCK,
        ARCACHE => m_axi_base_ddr_addr_ARCACHE,
        ARPROT => m_axi_base_ddr_addr_ARPROT,
        ARQOS => m_axi_base_ddr_addr_ARQOS,
        ARREGION => m_axi_base_ddr_addr_ARREGION,
        ARUSER => m_axi_base_ddr_addr_ARUSER,
        RVALID => m_axi_base_ddr_addr_RVALID,
        RREADY => m_axi_base_ddr_addr_RREADY,
        RDATA => m_axi_base_ddr_addr_RDATA,
        RLAST => m_axi_base_ddr_addr_RLAST,
        RID => m_axi_base_ddr_addr_RID,
        RUSER => m_axi_base_ddr_addr_RUSER,
        RRESP => m_axi_base_ddr_addr_RRESP,
        BVALID => m_axi_base_ddr_addr_BVALID,
        BREADY => m_axi_base_ddr_addr_BREADY,
        BRESP => m_axi_base_ddr_addr_BRESP,
        BID => m_axi_base_ddr_addr_BID,
        BUSER => m_axi_base_ddr_addr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => base_ddr_addr_ARVALID,
        I_ARREADY => base_ddr_addr_ARREADY,
        I_ARADDR => base_ddr_addr_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_200,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => base_ddr_addr_RVALID,
        I_RREADY => base_ddr_addr_RREADY,
        I_RDATA => base_ddr_addr_RDATA,
        I_RID => base_ddr_addr_RID,
        I_RUSER => base_ddr_addr_RUSER,
        I_RRESP => base_ddr_addr_RRESP,
        I_RLAST => base_ddr_addr_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => base_ddr_addr_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => base_ddr_addr_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => base_ddr_addr_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => base_ddr_addr_BRESP,
        I_BID => base_ddr_addr_BID,
        I_BUSER => base_ddr_addr_BUSER);

    buffer_U : component ddr_to_axis_reader_SD_buffer
    generic map (
        DataWidth => 64,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        q0 => buffer_q0,
        address1 => buffer_address1,
        ce1 => buffer_ce1,
        we1 => buffer_we1,
        d1 => base_ddr_addr_addr_read_reg_1413,
        q1 => buffer_q1);





    BASE_ADDRESS_r_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                BASE_ADDRESS_r <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = p_BASE_ADDRESS_flag_fu_565_p2)))) then 
                    BASE_ADDRESS_r <= tmp_7_base_address_fu_571_p3;
                end if; 
            end if;
        end if;
    end process;


    FRAME_BUFFER_DIM_r_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FRAME_BUFFER_DIM_r <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = p_FRAME_BUFFER_DIM_flag_fu_527_p2)))) then 
                    FRAME_BUFFER_DIM_r <= frame_buffer_dim;
                end if; 
            end if;
        end if;
    end process;


    FRAME_BUFFER_NUMBER_r_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FRAME_BUFFER_NUMBER_r <= ap_const_lv8_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = p_FRAME_BUFFER_NUMBER_flag_fu_547_p2)))) then 
                    FRAME_BUFFER_NUMBER_r <= frame_buffer_number;
                end if; 
            end if;
        end if;
    end process;


    FRAME_OFFSET_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FRAME_OFFSET <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = p_FRAME_OFFSET_flag_fu_541_p2)))) then 
                    FRAME_OFFSET <= frame_buffer_offset;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_base_ddr_addr_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_0;
            else
                if (ap_sig_163) then
                    if (not(((ap_const_lv1_0 = exitcond1_fu_655_p2) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_ARREADY)))) then 
                        ap_reg_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = base_ddr_addr_ARREADY)) then 
                        ap_reg_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_outStream_channel_1_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_outStream_channel_1_V_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = tmp_reg_1451) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outstream_channel_2_V_TREADY)))))))) then 
                    ap_reg_ioackin_outStream_channel_1_V_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_1 = outStream_channel_1_V_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_1 = outStream_channel_1_V_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_1 = outStream_channel_1_V_TREADY)))) then 
                    ap_reg_ioackin_outStream_channel_1_V_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_outstream_channel_2_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_outstream_channel_2_V_TREADY <= ap_const_logic_0;
            else
                if (ap_sig_150) then
                    if (not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outstream_channel_2_V_TREADY)))))) then 
                        ap_reg_ioackin_outstream_channel_2_V_TREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = outstream_channel_2_V_TREADY)) then 
                        ap_reg_ioackin_outstream_channel_2_V_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300)) and not((ap_const_lv1_0 = exitcond_fu_700_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300)) and (ap_const_lv1_0 = exitcond_fu_700_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300)) and not((ap_const_lv1_0 = exitcond_fu_700_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY))))) and not((ap_const_lv1_0 = tmp_10_fu_717_p3)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and (ap_const_lv1_0 = stereo_enabler_read_reg_1341))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY))))) and (ap_const_lv1_0 = tmp_10_fu_717_p3))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and (ap_const_lv1_0 = stereo_enabler_read_reg_1341)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY))))) and not((ap_const_lv1_0 = tmp_10_fu_717_p3))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outstream_channel_2_V_TREADY))))) and not((ap_const_lv1_0 = tmp_fu_1064_p3)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and not((ap_const_lv1_0 = stereo_enabler_read_reg_1341)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outstream_channel_2_V_TREADY))))) and (ap_const_lv1_0 = tmp_fu_1064_p3))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and not((ap_const_lv1_0 = stereo_enabler_read_reg_1341))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outstream_channel_2_V_TREADY))))) and not((ap_const_lv1_0 = tmp_fu_1064_p3))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    inner_index_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inner_index <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_lv1_0 = exitcond1_fu_655_p2) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_ARREADY))) and not((ap_const_lv1_0 = exitcond1_fu_655_p2)))) then 
                    inner_index <= storemerge_fu_686_p3;
                end if; 
            end if;
        end if;
    end process;


    luma_chroma_switch_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                luma_chroma_switch <= ap_const_lv32_0;
            else
                if (ap_sig_374) then
                    if (not((ap_const_lv1_0 = tmp_18_fu_729_p2))) then 
                        luma_chroma_switch <= ap_const_lv32_0;
                    elsif ((ap_const_lv1_0 = tmp_18_fu_729_p2)) then 
                        luma_chroma_switch <= tmp_20_fu_735_p2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_12)) then 
                i_reg_384 <= i_1_reg_1393;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_384 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    indvar_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_1404) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300)))) then 
                indvar_reg_395 <= indvar_next_reg_1408;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                indvar_reg_395 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j1_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and not((ap_const_lv1_0 = stereo_enabler_read_reg_1341)))) then 
                j1_reg_428 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outstream_channel_2_V_TREADY))))) and (ap_const_lv1_0 = tmp_fu_1064_p3))) then 
                j1_reg_428 <= j_2_fu_1101_p2;
            end if; 
        end if;
    end process;

    j_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and (ap_const_lv1_0 = stereo_enabler_read_reg_1341))) then 
                j_reg_407 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY))))) and (ap_const_lv1_0 = tmp_10_fu_717_p3))) then 
                j_reg_407 <= j_4_fu_846_p2;
            end if; 
        end if;
    end process;

    offset1_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_12)) then 
                offset1_reg_374 <= offset_1_fu_1335_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                offset1_reg_374 <= offset_fu_615_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300)))) then
                ap_reg_ppstg_exitcond_reg_1404_pp0_iter1 <= exitcond_reg_1404;
                ap_reg_ppstg_indvar_reg_395_pp0_iter1 <= indvar_reg_395;
                exitcond_reg_1404 <= exitcond_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (ap_const_lv1_0 = exitcond_reg_1404) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300)))) then
                base_ddr_addr_addr_read_reg_1413 <= base_ddr_addr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = guard_variable_for_ddr_to_axis_1_load_fu_468_p1))) then
                guard_variable_for_ddr_to_axis <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = guard_variable_for_ddr_to_axis_2_load_fu_483_p1))) then
                guard_variable_for_ddr_to_axis_1 <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = guard_variable_for_ddr_to_axis_load_fu_453_p1))) then
                guard_variable_for_ddr_to_axis_2 <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = guard_variable_for_ddr_to_axis_3_load_fu_498_p1))) then
                guard_variable_for_ddr_to_axis_3 <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_lv1_0 = exitcond1_fu_655_p2) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_ARREADY))))) then
                i_1_reg_1393 <= i_1_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300)))) then
                indvar_next_reg_1408 <= indvar_next_fu_706_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                inner_index_load_reg_1345 <= inner_index;
                stereo_enabler_read_reg_1341 <= (0=>stereo_enabler, others=>'-');
                    tmp_1_FRAME_BUFFER_NUMBER_loc_s_reg_1372(7 downto 0) <= tmp_1_FRAME_BUFFER_NUMBER_loc_s_fu_561_p1(7 downto 0);
                tmp_5_reg_1385 <= frame_buffer_dim_FRAME_BUFFER_s_fu_533_p3(31 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY))))))) then
                tmp_10_reg_1418 <= j_reg_407(12 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outstream_channel_2_V_TREADY))))) and (ap_const_lv1_0 = tmp_fu_1064_p3))) then
                tmp_11_reg_1455 <= tmp_11_fu_1072_p1;
                tmp_13_reg_1466 <= j1_reg_428(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY))))) and (ap_const_lv1_0 = tmp_10_fu_717_p3))) then
                tmp_18_reg_1422 <= tmp_18_fu_729_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY))))) and (ap_const_lv1_0 = tmp_10_fu_717_p3) and not((ap_const_lv1_0 = tmp_18_fu_729_p2)))) then
                tmp_52_reg_1436 <= tmp_52_fu_779_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY))))) and (ap_const_lv1_0 = tmp_10_fu_717_p3) and (ap_const_lv1_0 = tmp_18_fu_729_p2))) then
                tmp_71_reg_1426 <= tmp_71_fu_747_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outstream_channel_2_V_TREADY))))))) then
                tmp_reg_1451 <= j1_reg_428(12 downto 12);
            end if;
        end if;
    end process;
    tmp_1_FRAME_BUFFER_NUMBER_loc_s_reg_1372(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it0, tmp_10_reg_1418, tmp_18_reg_1422, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it0, tmp_reg_1451, exitcond1_fu_655_p2, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it2, ap_sig_300, stereo_enabler_read_reg_1341, ap_sig_ioackin_base_ddr_addr_ARREADY, exitcond_fu_700_p2, tmp_10_fu_717_p3, ap_sig_ioackin_outStream_channel_1_V_TREADY, tmp_fu_1064_p3, ap_sig_ioackin_outstream_channel_2_V_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not(((ap_const_lv1_0 = exitcond1_fu_655_p2) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_ARREADY))) and not((ap_const_lv1_0 = exitcond1_fu_655_p2)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((ap_const_lv1_0 = exitcond1_fu_655_p2) and not(((ap_const_lv1_0 = exitcond1_fu_655_p2) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_8;
            when ap_ST_pp0_stg0_fsm_8 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300)) and not((ap_const_lv1_0 = exitcond_fu_700_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_8;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300)) and not((ap_const_lv1_0 = exitcond_fu_700_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_8;
                end if;
            when ap_ST_st12_fsm_9 => 
                if (not((ap_const_lv1_0 = stereo_enabler_read_reg_1341))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_10;
                end if;
            when ap_ST_pp1_stg0_fsm_10 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY))))) and not((ap_const_lv1_0 = tmp_10_fu_717_p3))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_10;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY))))) and not((ap_const_lv1_0 = tmp_10_fu_717_p3)))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_10;
                end if;
            when ap_ST_pp2_stg0_fsm_11 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outstream_channel_2_V_TREADY))))) and not((ap_const_lv1_0 = tmp_fu_1064_p3))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_11;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outstream_channel_2_V_TREADY))))) and not((ap_const_lv1_0 = tmp_fu_1064_p3)))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_11;
                end if;
            when ap_ST_st17_fsm_12 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    BASE_ADDRESS_flag_phi_fu_356_p4_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, guard_variable_for_ddr_to_axis_3_load_fu_498_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
            if (not((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_3_load_fu_498_p1))) then 
                BASE_ADDRESS_flag_phi_fu_356_p4 <= ap_const_lv1_0;
            elsif ((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_3_load_fu_498_p1)) then 
                BASE_ADDRESS_flag_phi_fu_356_p4 <= ap_const_lv1_1;
            else 
                BASE_ADDRESS_flag_phi_fu_356_p4 <= "X";
            end if;
        else 
            BASE_ADDRESS_flag_phi_fu_356_p4 <= "X";
        end if; 
    end process;


    BASE_ADDRESS_loc_phi_fu_367_p4_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, base_address, BASE_ADDRESS_r, guard_variable_for_ddr_to_axis_3_load_fu_498_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
            if (not((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_3_load_fu_498_p1))) then 
                BASE_ADDRESS_loc_phi_fu_367_p4 <= BASE_ADDRESS_r;
            elsif ((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_3_load_fu_498_p1)) then 
                BASE_ADDRESS_loc_phi_fu_367_p4 <= base_address;
            else 
                BASE_ADDRESS_loc_phi_fu_367_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            BASE_ADDRESS_loc_phi_fu_367_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    FRAME_BUFFER_DIM_flag_phi_fu_293_p4_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, guard_variable_for_ddr_to_axis_load_fu_453_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
            if (not((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_load_fu_453_p1))) then 
                FRAME_BUFFER_DIM_flag_phi_fu_293_p4 <= ap_const_lv1_0;
            elsif ((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_load_fu_453_p1)) then 
                FRAME_BUFFER_DIM_flag_phi_fu_293_p4 <= ap_const_lv1_1;
            else 
                FRAME_BUFFER_DIM_flag_phi_fu_293_p4 <= "X";
            end if;
        else 
            FRAME_BUFFER_DIM_flag_phi_fu_293_p4 <= "X";
        end if; 
    end process;


    FRAME_BUFFER_DIM_loc_phi_fu_304_p4_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, frame_buffer_dim, FRAME_BUFFER_DIM_r, guard_variable_for_ddr_to_axis_load_fu_453_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
            if (not((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_load_fu_453_p1))) then 
                FRAME_BUFFER_DIM_loc_phi_fu_304_p4 <= FRAME_BUFFER_DIM_r;
            elsif ((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_load_fu_453_p1)) then 
                FRAME_BUFFER_DIM_loc_phi_fu_304_p4 <= frame_buffer_dim;
            else 
                FRAME_BUFFER_DIM_loc_phi_fu_304_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            FRAME_BUFFER_DIM_loc_phi_fu_304_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    FRAME_BUFFER_NUMBER_flag_phi_fu_335_p4_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, guard_variable_for_ddr_to_axis_2_load_fu_483_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
            if (not((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_2_load_fu_483_p1))) then 
                FRAME_BUFFER_NUMBER_flag_phi_fu_335_p4 <= ap_const_lv1_0;
            elsif ((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_2_load_fu_483_p1)) then 
                FRAME_BUFFER_NUMBER_flag_phi_fu_335_p4 <= ap_const_lv1_1;
            else 
                FRAME_BUFFER_NUMBER_flag_phi_fu_335_p4 <= "X";
            end if;
        else 
            FRAME_BUFFER_NUMBER_flag_phi_fu_335_p4 <= "X";
        end if; 
    end process;


    FRAME_BUFFER_NUMBER_loc_phi_fu_346_p4_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, frame_buffer_number, FRAME_BUFFER_NUMBER_r, guard_variable_for_ddr_to_axis_2_load_fu_483_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
            if (not((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_2_load_fu_483_p1))) then 
                FRAME_BUFFER_NUMBER_loc_phi_fu_346_p4 <= FRAME_BUFFER_NUMBER_r;
            elsif ((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_2_load_fu_483_p1)) then 
                FRAME_BUFFER_NUMBER_loc_phi_fu_346_p4 <= frame_buffer_number;
            else 
                FRAME_BUFFER_NUMBER_loc_phi_fu_346_p4 <= "XXXXXXXX";
            end if;
        else 
            FRAME_BUFFER_NUMBER_loc_phi_fu_346_p4 <= "XXXXXXXX";
        end if; 
    end process;


    FRAME_OFFSET_flag_phi_fu_314_p4_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, guard_variable_for_ddr_to_axis_1_load_fu_468_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
            if (not((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_1_load_fu_468_p1))) then 
                FRAME_OFFSET_flag_phi_fu_314_p4 <= ap_const_lv1_0;
            elsif ((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_1_load_fu_468_p1)) then 
                FRAME_OFFSET_flag_phi_fu_314_p4 <= ap_const_lv1_1;
            else 
                FRAME_OFFSET_flag_phi_fu_314_p4 <= "X";
            end if;
        else 
            FRAME_OFFSET_flag_phi_fu_314_p4 <= "X";
        end if; 
    end process;


    FRAME_OFFSET_loc_phi_fu_325_p4_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, frame_buffer_offset, FRAME_OFFSET, guard_variable_for_ddr_to_axis_1_load_fu_468_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
            if (not((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_1_load_fu_468_p1))) then 
                FRAME_OFFSET_loc_phi_fu_325_p4 <= FRAME_OFFSET;
            elsif ((ap_const_lv1_0 = guard_variable_for_ddr_to_axis_1_load_fu_468_p1)) then 
                FRAME_OFFSET_loc_phi_fu_325_p4 <= frame_buffer_offset;
            else 
                FRAME_OFFSET_loc_phi_fu_325_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            FRAME_OFFSET_loc_phi_fu_325_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    addrCmp1_fu_813_p2 <= "1" when (unsigned(mem_index_gep_fu_797_p2) < unsigned(ap_const_lv14_204)) else "0";
    addrCmp_fu_807_p2 <= "1" when (unsigned(tmp_53_fu_783_p4) < unsigned(ap_const_lv10_3FC)) else "0";
    adjSize55_cast_fu_803_p1 <= std_logic_vector(resize(unsigned(mem_index_gep_fu_797_p2),15));
        adjSize_fu_793_p1 <= std_logic_vector(resize(signed(tmp_53_fu_783_p4),14));


    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_655_p2, ap_sig_ioackin_base_ddr_addr_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_lv1_0 = exitcond1_fu_655_p2) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_ARREADY))) and not((ap_const_lv1_0 = exitcond1_fu_655_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_655_p2, ap_sig_ioackin_base_ddr_addr_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_lv1_0 = exitcond1_fu_655_p2) and (ap_const_logic_0 = ap_sig_ioackin_base_ddr_addr_ARREADY))) and not((ap_const_lv1_0 = exitcond1_fu_655_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_j_1_reg_418pp1_it0 <= "XXXXXXXXXXXXX";

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_118_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_118 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_140_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_140 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_150_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1, tmp_reg_1451)
    begin
                ap_sig_150 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = tmp_reg_1451));
    end process;


    ap_sig_158_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_158 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_163_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_655_p2)
    begin
                ap_sig_163 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_655_p2));
    end process;


    ap_sig_169_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_169 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_30_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_30 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_300_assign_proc : process(exitcond_reg_1404, base_ddr_addr_RVALID)
    begin
                ap_sig_300 <= ((ap_const_lv1_0 = exitcond_reg_1404) and (base_ddr_addr_RVALID = ap_const_logic_0));
    end process;


    ap_sig_374_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_10, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it0, tmp_10_reg_1418, tmp_18_reg_1422, tmp_10_fu_717_p3, ap_sig_ioackin_outStream_channel_1_V_TREADY)
    begin
                ap_sig_374 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY))))) and (ap_const_lv1_0 = tmp_10_fu_717_p3));
    end process;


    ap_sig_403_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_403 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_410_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_410 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_422_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_422 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_570_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_10, ap_reg_ppiten_pp1_it0, tmp_10_fu_717_p3)
    begin
                ap_sig_570 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = tmp_10_fu_717_p3));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_8_assign_proc : process(ap_sig_169)
    begin
        if (ap_sig_169) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp1_stg0_fsm_10_assign_proc : process(ap_sig_118)
    begin
        if (ap_sig_118) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp2_stg0_fsm_11_assign_proc : process(ap_sig_140)
    begin
        if (ap_sig_140) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_9_assign_proc : process(ap_sig_422)
    begin
        if (ap_sig_422) then 
            ap_sig_cseq_ST_st12_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_12_assign_proc : process(ap_sig_403)
    begin
        if (ap_sig_403) then 
            ap_sig_cseq_ST_st17_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_30)
    begin
        if (ap_sig_30) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_158)
    begin
        if (ap_sig_158) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_410)
    begin
        if (ap_sig_410) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_base_ddr_addr_ARREADY_assign_proc : process(base_ddr_addr_ARREADY, ap_reg_ioackin_base_ddr_addr_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_base_ddr_addr_ARREADY)) then 
            ap_sig_ioackin_base_ddr_addr_ARREADY <= base_ddr_addr_ARREADY;
        else 
            ap_sig_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_outStream_channel_1_V_TREADY_assign_proc : process(outStream_channel_1_V_TREADY, ap_reg_ioackin_outStream_channel_1_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_outStream_channel_1_V_TREADY)) then 
            ap_sig_ioackin_outStream_channel_1_V_TREADY <= outStream_channel_1_V_TREADY;
        else 
            ap_sig_ioackin_outStream_channel_1_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_outstream_channel_2_V_TREADY_assign_proc : process(outstream_channel_2_V_TREADY, ap_reg_ioackin_outstream_channel_2_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_outstream_channel_2_V_TREADY)) then 
            ap_sig_ioackin_outstream_channel_2_V_TREADY <= outstream_channel_2_V_TREADY;
        else 
            ap_sig_ioackin_outstream_channel_2_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    base_ddr_addr_ARADDR <= tmp_1_fu_666_p1(32 - 1 downto 0);

    base_ddr_addr_ARVALID_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_655_p2, ap_reg_ioackin_base_ddr_addr_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_655_p2) and (ap_const_logic_0 = ap_reg_ioackin_base_ddr_addr_ARREADY))) then 
            base_ddr_addr_ARVALID <= ap_const_logic_1;
        else 
            base_ddr_addr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    base_ddr_addr_RREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_8, ap_reg_ppiten_pp0_it1, exitcond_reg_1404, ap_sig_300)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_1404) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300)))) then 
            base_ddr_addr_RREADY <= ap_const_logic_1;
        else 
            base_ddr_addr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    base_ddr_addr_blk_n_AR_assign_proc : process(m_axi_base_ddr_addr_ARREADY, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_655_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_655_p2))) then 
            base_ddr_addr_blk_n_AR <= m_axi_base_ddr_addr_ARREADY;
        else 
            base_ddr_addr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    base_ddr_addr_blk_n_R_assign_proc : process(m_axi_base_ddr_addr_RVALID, ap_sig_cseq_ST_pp0_stg0_fsm_8, ap_reg_ppiten_pp0_it1, exitcond_reg_1404)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_1404))) then 
            base_ddr_addr_blk_n_R <= m_axi_base_ddr_addr_RVALID;
        else 
            base_ddr_addr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    buffer_address0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_10, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it0, tmp_10_fu_717_p3, tmp_18_fu_729_p2, gepindex264_cast_fu_761_p1, gepindex2_cast_fu_841_p1, gepindex276_cast_fu_1086_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            buffer_address0 <= gepindex276_cast_fu_1086_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = tmp_10_fu_717_p3) and not((ap_const_lv1_0 = tmp_18_fu_729_p2)))) then 
            buffer_address0 <= gepindex2_cast_fu_841_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = tmp_10_fu_717_p3) and (ap_const_lv1_0 = tmp_18_fu_729_p2))) then 
            buffer_address0 <= gepindex264_cast_fu_761_p1(9 - 1 downto 0);
        else 
            buffer_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    buffer_address1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp0_it2, tmp_6_fu_712_p1, gepindex276_cast_fu_1086_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            buffer_address1 <= tmp_6_fu_712_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            buffer_address1 <= gepindex276_cast_fu_1086_p1(9 - 1 downto 0);
        else 
            buffer_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_10, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it0, tmp_10_reg_1418, tmp_18_reg_1422, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it0, tmp_reg_1451, tmp_10_fu_717_p3, ap_sig_ioackin_outStream_channel_1_V_TREADY, tmp_18_fu_729_p2, ap_sig_ioackin_outstream_channel_2_V_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outstream_channel_2_V_TREADY)))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY))))) and (ap_const_lv1_0 = tmp_10_fu_717_p3) and not((ap_const_lv1_0 = tmp_18_fu_729_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (((ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY))))) and (ap_const_lv1_0 = tmp_10_fu_717_p3) and (ap_const_lv1_0 = tmp_18_fu_729_p2)))) then 
            buffer_ce0 <= ap_const_logic_1;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_ce1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it0, tmp_reg_1451, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_300, ap_sig_ioackin_outStream_channel_1_V_TREADY, ap_sig_ioackin_outstream_channel_2_V_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_sig_ioackin_outstream_channel_2_V_TREADY)))))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300))))) then 
            buffer_ce1 <= ap_const_logic_1;
        else 
            buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_we1_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_300, ap_reg_ppstg_exitcond_reg_1404_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_300)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1404_pp0_iter1)))) then 
            buffer_we1 <= ap_const_logic_1;
        else 
            buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

    end_pos1_fu_1226_p2 <= (start_pos2_fu_1218_p3 or ap_const_lv6_7);
    end_pos2_fu_965_p2 <= (start_pos_fu_958_p3 or ap_const_lv6_7);
    end_pos3_fu_859_p2 <= (start_pos3_fu_852_p3 or ap_const_lv6_7);
    end_pos_fu_1114_p2 <= (start_pos1_fu_1107_p3 or ap_const_lv6_7);
    exitcond1_fu_655_p2 <= "1" when (i_reg_384 = tmp_5_reg_1385) else "0";
    exitcond_fu_700_p2 <= "1" when (indvar_phi_fu_399_p4 = ap_const_lv10_200) else "0";
    frame_buffer_dim_FRAME_BUFFER_s_fu_533_p0 <= (0=>update_intr, others=>'-');
    frame_buffer_dim_FRAME_BUFFER_s_fu_533_p3 <= 
        frame_buffer_dim when (frame_buffer_dim_FRAME_BUFFER_s_fu_533_p0(0) = '1') else 
        FRAME_BUFFER_DIM_loc_phi_fu_304_p4;
    frame_buffer_offset_FRAME_OFFS_fu_579_p0 <= (0=>update_intr, others=>'-');
    frame_buffer_offset_FRAME_OFFS_fu_579_p3 <= 
        frame_buffer_offset when (frame_buffer_offset_FRAME_OFFS_fu_579_p0(0) = '1') else 
        FRAME_OFFSET_loc_phi_fu_325_p4;
    gepindex1_fu_825_p3 <= 
        gepindex_fu_819_p2 when (addrCmp_fu_807_p2(0) = '1') else 
        ap_const_lv15_1FF;
    gepindex264_cast_fu_761_p1 <= std_logic_vector(resize(unsigned(gepindex62_cast_fu_751_p4),64));
    gepindex276_cast_fu_1086_p1 <= std_logic_vector(resize(unsigned(gepindex74_cast_fu_1076_p4),64));
        gepindex2_cast_fu_841_p1 <= std_logic_vector(resize(signed(gepindex2_fu_833_p3),64));

    gepindex2_fu_833_p3 <= 
        gepindex1_fu_825_p3 when (addrCmp1_fu_813_p2(0) = '1') else 
        ap_const_lv15_1FF;
    gepindex62_cast_fu_751_p4 <= j_reg_407(11 downto 3);
    gepindex74_cast_fu_1076_p4 <= j1_reg_428(11 downto 3);
    gepindex_fu_819_p2 <= std_logic_vector(signed(ap_const_lv15_7FFC) + signed(adjSize55_cast_fu_803_p1));
    
    grp_fu_439_p4_proc : process(buffer_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable grp_fu_439_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := buffer_q0;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for grp_fu_439_p4_i in 0 to 64-1 loop
                v0_cpy(grp_fu_439_p4_i) := buffer_q0(64-1-grp_fu_439_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        grp_fu_439_p4 <= resvalue(64-1 downto 0);
    end process;

    guard_variable_for_ddr_to_axis_1_load_fu_468_p1 <= guard_variable_for_ddr_to_axis;
    guard_variable_for_ddr_to_axis_2_load_fu_483_p1 <= guard_variable_for_ddr_to_axis_1;
    guard_variable_for_ddr_to_axis_3_load_fu_498_p1 <= guard_variable_for_ddr_to_axis_3;
    guard_variable_for_ddr_to_axis_load_fu_453_p1 <= guard_variable_for_ddr_to_axis_2;
    i_1_fu_660_p2 <= std_logic_vector(unsigned(i_reg_384) + unsigned(ap_const_lv20_1));
    indvar_next_fu_706_p2 <= std_logic_vector(unsigned(indvar_phi_fu_399_p4) + unsigned(ap_const_lv10_1));

    indvar_phi_fu_399_p4_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_8, ap_reg_ppiten_pp0_it1, exitcond_reg_1404, indvar_reg_395, indvar_next_reg_1408)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_1404))) then 
            indvar_phi_fu_399_p4 <= indvar_next_reg_1408;
        else 
            indvar_phi_fu_399_p4 <= indvar_reg_395;
        end if; 
    end process;


    j_1_phi_fu_421_p4_assign_proc : process(j_reg_407, tmp_18_fu_729_p2, j_3_fu_772_p2, ap_reg_phiprechg_j_1_reg_418pp1_it0, ap_sig_570)
    begin
        if (ap_sig_570) then
            if ((ap_const_lv1_0 = tmp_18_fu_729_p2)) then 
                j_1_phi_fu_421_p4 <= j_reg_407;
            elsif (not((ap_const_lv1_0 = tmp_18_fu_729_p2))) then 
                j_1_phi_fu_421_p4 <= j_3_fu_772_p2;
            else 
                j_1_phi_fu_421_p4 <= ap_reg_phiprechg_j_1_reg_418pp1_it0;
            end if;
        else 
            j_1_phi_fu_421_p4 <= ap_reg_phiprechg_j_1_reg_418pp1_it0;
        end if; 
    end process;

    j_2_fu_1101_p2 <= std_logic_vector(unsigned(ap_const_lv13_2) + unsigned(j1_reg_428));
    j_3_fu_772_p2 <= std_logic_vector(signed(ap_const_lv13_1FFF) + signed(j_reg_407));
    j_4_fu_846_p2 <= std_logic_vector(unsigned(j_1_phi_fu_421_p4) + unsigned(ap_const_lv13_1));
    mem_index_gep_fu_797_p2 <= std_logic_vector(unsigned(ap_const_lv14_4) + unsigned(adjSize_fu_793_p1));
    offset_1_fu_1335_p2 <= std_logic_vector(unsigned(offset1_reg_374) + unsigned(ap_const_lv32_200));
    offset_fu_615_p2 <= std_logic_vector(unsigned(tmp_9_fu_611_p1) + unsigned(tmp_7_BASE_ADDRESS_loc_fu_587_p3));

    outStream_channel_1_V_TDATA_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_10, ap_reg_ppiten_pp1_it1, tmp_10_reg_1418, tmp_18_reg_1422, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1, tmp_reg_1451, tmp_88_fu_953_p1, tmp_70_fu_1059_p1, tmp_34_fu_1208_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = tmp_reg_1451))) then 
            outStream_channel_1_V_TDATA <= tmp_34_fu_1208_p1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)))) then 
            outStream_channel_1_V_TDATA <= tmp_70_fu_1059_p1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422))) then 
            outStream_channel_1_V_TDATA <= tmp_88_fu_953_p1;
        else 
            outStream_channel_1_V_TDATA <= "XXXXXXXX";
        end if; 
    end process;


    outStream_channel_1_V_TDATA_blk_n_assign_proc : process(outStream_channel_1_V_TREADY, ap_sig_cseq_ST_pp1_stg0_fsm_10, ap_reg_ppiten_pp1_it1, tmp_10_reg_1418, tmp_18_reg_1422, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1, tmp_reg_1451)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = tmp_reg_1451)))) then 
            outStream_channel_1_V_TDATA_blk_n <= outStream_channel_1_V_TREADY;
        else 
            outStream_channel_1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    outStream_channel_1_V_TVALID_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_10, ap_reg_ppiten_pp1_it1, tmp_10_reg_1418, tmp_18_reg_1422, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1, tmp_reg_1451, ap_reg_ioackin_outStream_channel_1_V_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = tmp_10_reg_1418) and (ap_const_lv1_0 = tmp_18_reg_1422) and (ap_const_logic_0 = ap_reg_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = tmp_10_reg_1418) and not((ap_const_lv1_0 = tmp_18_reg_1422)) and (ap_const_logic_0 = ap_reg_ioackin_outStream_channel_1_V_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_reg_ioackin_outStream_channel_1_V_TREADY)))) then 
            outStream_channel_1_V_TVALID <= ap_const_logic_1;
        else 
            outStream_channel_1_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    outstream_channel_2_V_TDATA <= tmp_50_fu_1324_p2(8 - 1 downto 0);

    outstream_channel_2_V_TDATA_blk_n_assign_proc : process(outstream_channel_2_V_TREADY, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1, tmp_reg_1451)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = tmp_reg_1451))) then 
            outstream_channel_2_V_TDATA_blk_n <= outstream_channel_2_V_TREADY;
        else 
            outstream_channel_2_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    outstream_channel_2_V_TVALID_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1, tmp_reg_1451, ap_reg_ioackin_outstream_channel_2_V_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = tmp_reg_1451) and (ap_const_logic_0 = ap_reg_ioackin_outstream_channel_2_V_TREADY))) then 
            outstream_channel_2_V_TVALID <= ap_const_logic_1;
        else 
            outstream_channel_2_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_BASE_ADDRESS_flag_fu_565_p1 <= (0=>update_intr, others=>'-');
    p_BASE_ADDRESS_flag_fu_565_p2 <= (BASE_ADDRESS_flag_phi_fu_356_p4 or p_BASE_ADDRESS_flag_fu_565_p1);
    p_FRAME_BUFFER_DIM_flag_fu_527_p1 <= (0=>update_intr, others=>'-');
    p_FRAME_BUFFER_DIM_flag_fu_527_p2 <= (FRAME_BUFFER_DIM_flag_phi_fu_293_p4 or p_FRAME_BUFFER_DIM_flag_fu_527_p1);
    p_FRAME_BUFFER_NUMBER_flag_fu_547_p1 <= (0=>update_intr, others=>'-');
    p_FRAME_BUFFER_NUMBER_flag_fu_547_p2 <= (FRAME_BUFFER_NUMBER_flag_phi_fu_335_p4 or p_FRAME_BUFFER_NUMBER_flag_fu_547_p1);
    p_FRAME_OFFSET_flag_fu_541_p1 <= (0=>update_intr, others=>'-');
    p_FRAME_OFFSET_flag_fu_541_p2 <= (FRAME_OFFSET_flag_phi_fu_314_p4 or p_FRAME_OFFSET_flag_fu_541_p1);
    start_pos1_fu_1107_p3 <= (tmp_13_reg_1466 & ap_const_lv4_0);
    start_pos2_fu_1218_p3 <= (tmp_14_fu_1213_p2 & ap_const_lv3_0);
    start_pos3_fu_852_p3 <= (tmp_71_reg_1426 & ap_const_lv3_0);
    start_pos_fu_958_p3 <= (tmp_52_reg_1436 & ap_const_lv3_0);
    storemerge_fu_686_p3 <= 
        ap_const_lv32_0 when (tmp_3_fu_677_p2(0) = '1') else 
        tmp_4_fu_681_p2;
    tmp_10_fu_717_p3 <= j_reg_407(12 downto 12);
    tmp_11_fu_1072_p1 <= j1_reg_428(3 - 1 downto 0);
    tmp_14_fu_1213_p2 <= (tmp_11_reg_1455 or ap_const_lv3_1);
    tmp_15_fu_1120_p2 <= "1" when (unsigned(start_pos1_fu_1107_p3) > unsigned(end_pos_fu_1114_p2)) else "0";
    tmp_17_fu_1126_p1 <= std_logic_vector(resize(unsigned(start_pos1_fu_1107_p3),7));
    tmp_18_fu_729_p2 <= "1" when (luma_chroma_switch = ap_const_lv32_1) else "0";
    tmp_19_fu_1130_p1 <= std_logic_vector(resize(unsigned(end_pos_fu_1114_p2),7));
    tmp_1_FRAME_BUFFER_NUMBER_loc_fu_553_p0 <= (0=>update_intr, others=>'-');
    tmp_1_FRAME_BUFFER_NUMBER_loc_fu_553_p3 <= 
        frame_buffer_number when (tmp_1_FRAME_BUFFER_NUMBER_loc_fu_553_p0(0) = '1') else 
        FRAME_BUFFER_NUMBER_loc_phi_fu_346_p4;
    tmp_1_FRAME_BUFFER_NUMBER_loc_s_fu_561_p1 <= std_logic_vector(resize(unsigned(tmp_1_FRAME_BUFFER_NUMBER_loc_fu_553_p3),32));
        tmp_1_fu_666_p1 <= std_logic_vector(resize(signed(offset1_reg_374),64));

    tmp_20_fu_735_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(luma_chroma_switch));
    tmp_22_fu_1134_p2 <= std_logic_vector(unsigned(tmp_17_fu_1126_p1) - unsigned(tmp_19_fu_1130_p1));
    tmp_23_fu_1140_p2 <= (tmp_17_fu_1126_p1 xor ap_const_lv7_3F);
    tmp_24_fu_1146_p2 <= std_logic_vector(unsigned(tmp_19_fu_1130_p1) - unsigned(tmp_17_fu_1126_p1));
    tmp_25_fu_1152_p3 <= 
        tmp_22_fu_1134_p2 when (tmp_15_fu_1120_p2(0) = '1') else 
        tmp_24_fu_1146_p2;
    tmp_26_fu_1160_p3 <= 
        grp_fu_439_p4 when (tmp_15_fu_1120_p2(0) = '1') else 
        buffer_q0;
    tmp_27_fu_1168_p3 <= 
        tmp_23_fu_1140_p2 when (tmp_15_fu_1120_p2(0) = '1') else 
        tmp_17_fu_1126_p1;
    tmp_28_fu_1176_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_25_fu_1152_p3));
    tmp_29_fu_1182_p1 <= std_logic_vector(resize(unsigned(tmp_27_fu_1168_p3),64));
    tmp_2_fu_601_p4 <= tmp_s_fu_595_p2(31 downto 3);
    tmp_30_fu_1186_p1 <= std_logic_vector(resize(unsigned(tmp_28_fu_1176_p2),64));
    tmp_31_fu_1190_p2 <= std_logic_vector(shift_right(unsigned(tmp_26_fu_1160_p3),to_integer(unsigned('0' & tmp_29_fu_1182_p1(31-1 downto 0)))));
    tmp_32_fu_1196_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_30_fu_1186_p1(31-1 downto 0)))));
    tmp_33_fu_1202_p2 <= (tmp_31_fu_1190_p2 and tmp_32_fu_1196_p2);
    tmp_34_fu_1208_p1 <= tmp_33_fu_1202_p2(8 - 1 downto 0);
    tmp_35_fu_1232_p2 <= "1" when (unsigned(start_pos2_fu_1218_p3) > unsigned(end_pos1_fu_1226_p2)) else "0";
    tmp_36_fu_1238_p1 <= std_logic_vector(resize(unsigned(start_pos2_fu_1218_p3),7));
    tmp_37_fu_1242_p1 <= std_logic_vector(resize(unsigned(end_pos1_fu_1226_p2),7));
    
    tmp_38_fu_1246_p4_proc : process(buffer_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_38_fu_1246_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := buffer_q1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_38_fu_1246_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_38_fu_1246_p4_i) := buffer_q1(64-1-tmp_38_fu_1246_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_38_fu_1246_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_39_fu_1256_p2 <= std_logic_vector(unsigned(tmp_36_fu_1238_p1) - unsigned(tmp_37_fu_1242_p1));
    tmp_3_fu_677_p2 <= "1" when (inner_index_load_reg_1345 = tmp_1_FRAME_BUFFER_NUMBER_loc_s_reg_1372) else "0";
    tmp_40_fu_1262_p2 <= (tmp_36_fu_1238_p1 xor ap_const_lv7_3F);
    tmp_41_fu_1268_p2 <= std_logic_vector(unsigned(tmp_37_fu_1242_p1) - unsigned(tmp_36_fu_1238_p1));
    tmp_42_fu_1274_p3 <= 
        tmp_39_fu_1256_p2 when (tmp_35_fu_1232_p2(0) = '1') else 
        tmp_41_fu_1268_p2;
    tmp_43_fu_1282_p3 <= 
        tmp_38_fu_1246_p4 when (tmp_35_fu_1232_p2(0) = '1') else 
        buffer_q1;
    tmp_44_fu_1290_p3 <= 
        tmp_40_fu_1262_p2 when (tmp_35_fu_1232_p2(0) = '1') else 
        tmp_36_fu_1238_p1;
    tmp_45_fu_1298_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_42_fu_1274_p3));
    tmp_46_fu_1304_p1 <= std_logic_vector(resize(unsigned(tmp_44_fu_1290_p3),64));
    tmp_47_fu_1308_p1 <= std_logic_vector(resize(unsigned(tmp_45_fu_1298_p2),64));
    tmp_48_fu_1312_p2 <= std_logic_vector(shift_right(unsigned(tmp_43_fu_1282_p3),to_integer(unsigned('0' & tmp_46_fu_1304_p1(31-1 downto 0)))));
    tmp_49_fu_1318_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_47_fu_1308_p1(31-1 downto 0)))));
    tmp_4_fu_681_p2 <= std_logic_vector(signed(inner_index_load_reg_1345) + signed(ap_const_lv32_1));
    tmp_50_fu_1324_p2 <= (tmp_48_fu_1312_p2 and tmp_49_fu_1318_p2);
    tmp_52_fu_779_p1 <= j_3_fu_772_p2(3 - 1 downto 0);
    tmp_53_fu_783_p4 <= j_3_fu_772_p2(12 downto 3);
    tmp_54_fu_971_p2 <= "1" when (unsigned(start_pos_fu_958_p3) > unsigned(end_pos2_fu_965_p2)) else "0";
    tmp_55_fu_977_p1 <= std_logic_vector(resize(unsigned(start_pos_fu_958_p3),7));
    tmp_56_fu_981_p1 <= std_logic_vector(resize(unsigned(end_pos2_fu_965_p2),7));
    tmp_58_fu_985_p2 <= std_logic_vector(unsigned(tmp_55_fu_977_p1) - unsigned(tmp_56_fu_981_p1));
    tmp_59_fu_991_p2 <= (tmp_55_fu_977_p1 xor ap_const_lv7_3F);
    tmp_60_fu_997_p2 <= std_logic_vector(unsigned(tmp_56_fu_981_p1) - unsigned(tmp_55_fu_977_p1));
    tmp_61_fu_1003_p3 <= 
        tmp_58_fu_985_p2 when (tmp_54_fu_971_p2(0) = '1') else 
        tmp_60_fu_997_p2;
    tmp_62_fu_1011_p3 <= 
        grp_fu_439_p4 when (tmp_54_fu_971_p2(0) = '1') else 
        buffer_q0;
    tmp_63_fu_1019_p3 <= 
        tmp_59_fu_991_p2 when (tmp_54_fu_971_p2(0) = '1') else 
        tmp_55_fu_977_p1;
    tmp_64_fu_1027_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_61_fu_1003_p3));
    tmp_65_fu_1033_p1 <= std_logic_vector(resize(unsigned(tmp_63_fu_1019_p3),64));
    tmp_66_fu_1037_p1 <= std_logic_vector(resize(unsigned(tmp_64_fu_1027_p2),64));
    tmp_67_fu_1041_p2 <= std_logic_vector(shift_right(unsigned(tmp_62_fu_1011_p3),to_integer(unsigned('0' & tmp_65_fu_1033_p1(31-1 downto 0)))));
    tmp_68_fu_1047_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_66_fu_1037_p1(31-1 downto 0)))));
    tmp_69_fu_1053_p2 <= (tmp_67_fu_1041_p2 and tmp_68_fu_1047_p2);
    tmp_6_fu_712_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_395_pp0_iter1),64));
    tmp_70_fu_1059_p1 <= tmp_69_fu_1053_p2(8 - 1 downto 0);
    tmp_71_fu_747_p1 <= j_reg_407(3 - 1 downto 0);
    tmp_72_fu_865_p2 <= "1" when (unsigned(start_pos3_fu_852_p3) > unsigned(end_pos3_fu_859_p2)) else "0";
    tmp_73_fu_871_p1 <= std_logic_vector(resize(unsigned(start_pos3_fu_852_p3),7));
    tmp_74_fu_875_p1 <= std_logic_vector(resize(unsigned(end_pos3_fu_859_p2),7));
    tmp_76_fu_879_p2 <= std_logic_vector(unsigned(tmp_73_fu_871_p1) - unsigned(tmp_74_fu_875_p1));
    tmp_77_fu_885_p2 <= (tmp_73_fu_871_p1 xor ap_const_lv7_3F);
    tmp_78_fu_891_p2 <= std_logic_vector(unsigned(tmp_74_fu_875_p1) - unsigned(tmp_73_fu_871_p1));
    tmp_79_fu_897_p3 <= 
        tmp_76_fu_879_p2 when (tmp_72_fu_865_p2(0) = '1') else 
        tmp_78_fu_891_p2;
    tmp_7_BASE_ADDRESS_loc_fu_587_p0 <= (0=>update_intr, others=>'-');
    tmp_7_BASE_ADDRESS_loc_fu_587_p3 <= 
        tmp_8_fu_523_p1 when (tmp_7_BASE_ADDRESS_loc_fu_587_p0(0) = '1') else 
        BASE_ADDRESS_loc_phi_fu_367_p4;
    tmp_7_base_address_fu_571_p0 <= (0=>update_intr, others=>'-');
    tmp_7_base_address_fu_571_p3 <= 
        tmp_8_fu_523_p1 when (tmp_7_base_address_fu_571_p0(0) = '1') else 
        base_address;
    tmp_7_fu_513_p4 <= base_address(31 downto 3);
    tmp_80_fu_905_p3 <= 
        grp_fu_439_p4 when (tmp_72_fu_865_p2(0) = '1') else 
        buffer_q0;
    tmp_81_fu_913_p3 <= 
        tmp_77_fu_885_p2 when (tmp_72_fu_865_p2(0) = '1') else 
        tmp_73_fu_871_p1;
    tmp_82_fu_921_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_79_fu_897_p3));
    tmp_83_fu_927_p1 <= std_logic_vector(resize(unsigned(tmp_81_fu_913_p3),64));
    tmp_84_fu_931_p1 <= std_logic_vector(resize(unsigned(tmp_82_fu_921_p2),64));
    tmp_85_fu_935_p2 <= std_logic_vector(shift_right(unsigned(tmp_80_fu_905_p3),to_integer(unsigned('0' & tmp_83_fu_927_p1(31-1 downto 0)))));
    tmp_86_fu_941_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_84_fu_931_p1(31-1 downto 0)))));
    tmp_87_fu_947_p2 <= (tmp_85_fu_935_p2 and tmp_86_fu_941_p2);
    tmp_88_fu_953_p1 <= tmp_87_fu_947_p2(8 - 1 downto 0);
    tmp_8_fu_523_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_513_p4),32));
    tmp_9_fu_611_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_601_p4),32));
    tmp_fu_1064_p3 <= j1_reg_428(12 downto 12);
    tmp_s_fu_595_p0 <= inner_index;
    tmp_s_fu_595_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_s_fu_595_p0) * signed(frame_buffer_offset_FRAME_OFFS_fu_579_p3))), 32));
end behav;
