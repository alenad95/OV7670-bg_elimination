// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pattern_generator_cross,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.451000,HLS_SYN_LAT=735423,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=262,HLS_SYN_LUT=423,HLS_VERSION=2019_1}" *)

module pattern_generator_cross (
        ap_clk,
        ap_rst_n,
        outputStream_V_TDATA,
        outputStream_V_TVALID,
        outputStream_V_TREADY
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst_n;
output  [7:0] outputStream_V_TDATA;
output   outputStream_V_TVALID;
input   outputStream_V_TREADY;

 reg    ap_rst_n_inv;
reg   [7:0] outputStream_V_1_data_in;
reg   [7:0] outputStream_V_1_data_out;
reg    outputStream_V_1_vld_in;
wire    outputStream_V_1_vld_out;
wire    outputStream_V_1_ack_in;
wire    outputStream_V_1_ack_out;
reg   [7:0] outputStream_V_1_payload_A;
reg   [7:0] outputStream_V_1_payload_B;
reg    outputStream_V_1_sel_rd;
reg    outputStream_V_1_sel_wr;
wire    outputStream_V_1_sel;
wire    outputStream_V_1_load_A;
wire    outputStream_V_1_load_B;
reg   [1:0] outputStream_V_1_state;
wire    outputStream_V_1_state_cmp_full;
reg   [31:0] lineX;
reg   [31:0] lineY;
reg   [0:0] dirX;
reg   [0:0] dirY;
reg    outputStream_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln31_fu_184_p2;
wire   [0:0] and_ln33_fu_202_p2;
wire   [0:0] or_ln35_fu_212_p2;
wire    ap_CS_fsm_state4;
reg   [0:0] and_ln33_reg_335;
reg   [0:0] or_ln35_reg_339;
reg   [31:0] lineX_load_reg_287;
wire    ap_CS_fsm_state1;
reg   [31:0] lineY_load_reg_295;
wire   [8:0] y_fu_141_p2;
reg   [8:0] y_reg_306;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln33_fu_147_p2;
reg   [0:0] icmp_ln33_reg_311;
wire   [0:0] icmp_ln30_fu_135_p2;
wire   [0:0] icmp_ln35_1_fu_153_p2;
reg   [0:0] icmp_ln35_1_reg_316;
wire   [9:0] x_fu_190_p2;
reg   [9:0] x_reg_330;
reg    ap_predicate_op48_write_state3;
reg    ap_predicate_op49_write_state3;
reg    ap_block_state3_io;
reg   [8:0] y_0_reg_79;
reg   [9:0] x_0_reg_90;
reg    ap_predicate_op51_write_state4;
reg    ap_predicate_op53_write_state4;
reg    ap_block_state4_io;
reg   [31:0] empty_3_reg_101;
wire   [0:0] icmp_ln44_fu_158_p2;
reg   [31:0] empty_4_reg_112;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln49_fu_217_p2;
wire   [31:0] add_ln58_fu_251_p2;
wire   [31:0] add_ln62_fu_275_p2;
wire    ap_CS_fsm_state6;
reg    ap_block_state6;
wire   [0:0] icmp_ln46_fu_163_p2;
wire   [0:0] icmp_ln51_fu_222_p2;
wire   [31:0] zext_ln30_fu_131_p1;
wire   [0:0] icmp_ln33_1_fu_196_p2;
wire   [31:0] zext_ln31_fu_180_p1;
wire   [0:0] icmp_ln35_fu_207_p2;
wire   [31:0] select_ln58_fu_243_p3;
wire   [31:0] select_ln62_fu_267_p3;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 outputStream_V_1_sel_rd = 1'b0;
#0 outputStream_V_1_sel_wr = 1'b0;
#0 outputStream_V_1_state = 2'd0;
#0 lineX = 32'd0;
#0 lineY = 32'd0;
#0 dirX = 1'd0;
#0 dirY = 1'd0;
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dirX <= 1'd0;
    end else begin
        if (((icmp_ln30_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            if ((icmp_ln44_fu_158_p2 == 1'd1)) begin
                dirX <= 1'd0;
            end else if (((icmp_ln46_fu_163_p2 == 1'd1) & (icmp_ln44_fu_158_p2 == 1'd0))) begin
                dirX <= 1'd1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dirY <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((icmp_ln49_fu_217_p2 == 1'd1)) begin
                dirY <= 1'd0;
            end else if (((icmp_ln51_fu_222_p2 == 1'd1) & (icmp_ln49_fu_217_p2 == 1'd0))) begin
                dirY <= 1'd1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        lineX <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            lineX <= add_ln58_fu_251_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        lineY <= 32'd0;
    end else begin
        if ((~((outputStream_V_1_state == 2'd1) | ((outputStream_V_1_state == 2'd3) & (outputStream_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state6))) begin
            lineY <= add_ln62_fu_275_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_1_ack_out == 1'b1) & (outputStream_V_1_vld_out == 1'b1))) begin
            outputStream_V_1_sel_rd <= ~outputStream_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outputStream_V_1_ack_in == 1'b1) & (outputStream_V_1_vld_in == 1'b1))) begin
            outputStream_V_1_sel_wr <= ~outputStream_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_1_state == 2'd2) & (outputStream_V_1_vld_in == 1'b0)) | ((outputStream_V_1_state == 2'd3) & (outputStream_V_1_vld_in == 1'b0) & (outputStream_V_1_ack_out == 1'b1)))) begin
            outputStream_V_1_state <= 2'd2;
        end else if ((((outputStream_V_1_state == 2'd1) & (outputStream_V_TREADY == 1'b0)) | ((outputStream_V_1_state == 2'd3) & (outputStream_V_TREADY == 1'b0) & (outputStream_V_1_vld_in == 1'b1)))) begin
            outputStream_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_1_vld_in == 1'b0) & (outputStream_V_1_ack_out == 1'b1)) & ~((outputStream_V_TREADY == 1'b0) & (outputStream_V_1_vld_in == 1'b1)) & (outputStream_V_1_state == 2'd3)) | ((outputStream_V_1_state == 2'd1) & (outputStream_V_1_ack_out == 1'b1)) | ((outputStream_V_1_state == 2'd2) & (outputStream_V_1_vld_in == 1'b1)))) begin
            outputStream_V_1_state <= 2'd3;
        end else begin
            outputStream_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        if ((icmp_ln44_fu_158_p2 == 1'd1)) begin
            empty_3_reg_101 <= 32'd0;
        end else if ((icmp_ln44_fu_158_p2 == 1'd0)) begin
            empty_3_reg_101 <= lineX_load_reg_287;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln49_fu_217_p2 == 1'd1)) begin
            empty_4_reg_112 <= 32'd0;
        end else if ((icmp_ln49_fu_217_p2 == 1'd0)) begin
            empty_4_reg_112 <= lineY_load_reg_295;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_0_reg_90 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_io))) begin
        x_0_reg_90 <= x_reg_330;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io))) begin
        y_0_reg_79 <= y_reg_306;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        y_0_reg_79 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io))) begin
        and_ln33_reg_335 <= and_ln33_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln33_reg_311 <= icmp_ln33_fu_147_p2;
        icmp_ln35_1_reg_316 <= icmp_ln35_1_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        lineX_load_reg_287 <= lineX;
        lineY_load_reg_295 <= lineY;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln33_fu_202_p2) & (icmp_ln31_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io))) begin
        or_ln35_reg_339 <= or_ln35_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((outputStream_V_1_load_A == 1'b1)) begin
        outputStream_V_1_payload_A <= outputStream_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outputStream_V_1_load_B == 1'b1)) begin
        outputStream_V_1_payload_B <= outputStream_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io))) begin
        x_reg_330 <= x_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_reg_306 <= y_fu_141_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((ap_predicate_op49_write_state3 == 1'b1)) begin
            outputStream_V_1_data_in = 8'd255;
        end else if ((ap_predicate_op48_write_state3 == 1'b1)) begin
            outputStream_V_1_data_in = 8'd0;
        end else begin
            outputStream_V_1_data_in = 'bx;
        end
    end else begin
        outputStream_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outputStream_V_1_sel == 1'b1)) begin
        outputStream_V_1_data_out = outputStream_V_1_payload_B;
    end else begin
        outputStream_V_1_data_out = outputStream_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_predicate_op49_write_state3 == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io)) | ((ap_predicate_op48_write_state3 == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io)))) begin
        outputStream_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((or_ln35_fu_212_p2 == 1'd1) & (1'd1 == and_ln33_fu_202_p2) & (icmp_ln31_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((1'd1 == and_ln33_fu_202_p2) & (or_ln35_fu_212_p2 == 1'd0) & (icmp_ln31_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((1'd1 == and_ln33_reg_335) & (or_ln35_reg_339 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((or_ln35_reg_339 == 1'd1) & (1'd1 == and_ln33_reg_335) & (1'b1 == ap_CS_fsm_state4)))) begin
        outputStream_V_TDATA_blk_n = outputStream_V_1_state[1'd1];
    end else begin
        outputStream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln30_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln31_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln31_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_io))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if ((~((outputStream_V_1_state == 2'd1) | ((outputStream_V_1_state == 2'd3) & (outputStream_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln58_fu_251_p2 = (empty_3_reg_101 + select_ln58_fu_243_p3);

assign add_ln62_fu_275_p2 = (empty_4_reg_112 + select_ln62_fu_267_p3);

assign and_ln33_fu_202_p2 = (icmp_ln33_reg_311 & icmp_ln33_1_fu_196_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state3_io = (((ap_predicate_op49_write_state3 == 1'b1) & (outputStream_V_1_ack_in == 1'b0)) | ((ap_predicate_op48_write_state3 == 1'b1) & (outputStream_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state4_io = (((ap_predicate_op53_write_state4 == 1'b1) & (outputStream_V_1_ack_in == 1'b0)) | ((ap_predicate_op51_write_state4 == 1'b1) & (outputStream_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state6 = ((outputStream_V_1_state == 2'd1) | ((outputStream_V_1_state == 2'd3) & (outputStream_V_TREADY == 1'b0)));
end

always @ (*) begin
    ap_predicate_op48_write_state3 = ((1'd1 == and_ln33_fu_202_p2) & (or_ln35_fu_212_p2 == 1'd0) & (icmp_ln31_fu_184_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op49_write_state3 = ((or_ln35_fu_212_p2 == 1'd1) & (1'd1 == and_ln33_fu_202_p2) & (icmp_ln31_fu_184_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op51_write_state4 = ((1'd1 == and_ln33_reg_335) & (or_ln35_reg_339 == 1'd0));
end

always @ (*) begin
    ap_predicate_op53_write_state4 = ((or_ln35_reg_339 == 1'd1) & (1'd1 == and_ln33_reg_335));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln30_fu_135_p2 = ((y_0_reg_79 == 9'd510) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_184_p2 = ((x_0_reg_90 == 10'd720) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_196_p2 = ((x_0_reg_90 < 10'd640) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_147_p2 = ((y_0_reg_79 < 9'd480) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_153_p2 = ((zext_ln30_fu_131_p1 == lineY_load_reg_295) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_207_p2 = ((zext_ln31_fu_180_p1 == lineX_load_reg_287) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_158_p2 = ((lineX_load_reg_287 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_163_p2 = ((lineX_load_reg_287 == 32'd639) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_217_p2 = ((lineY_load_reg_295 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_222_p2 = ((lineY_load_reg_295 == 32'd479) ? 1'b1 : 1'b0);

assign or_ln35_fu_212_p2 = (icmp_ln35_fu_207_p2 | icmp_ln35_1_reg_316);

assign outputStream_V_1_ack_in = outputStream_V_1_state[1'd1];

assign outputStream_V_1_ack_out = outputStream_V_TREADY;

assign outputStream_V_1_load_A = (outputStream_V_1_state_cmp_full & ~outputStream_V_1_sel_wr);

assign outputStream_V_1_load_B = (outputStream_V_1_state_cmp_full & outputStream_V_1_sel_wr);

assign outputStream_V_1_sel = outputStream_V_1_sel_rd;

assign outputStream_V_1_state_cmp_full = ((outputStream_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outputStream_V_1_vld_out = outputStream_V_1_state[1'd0];

assign outputStream_V_TDATA = outputStream_V_1_data_out;

assign outputStream_V_TVALID = outputStream_V_1_state[1'd0];

assign select_ln58_fu_243_p3 = ((dirX[0:0] === 1'b1) ? 32'd4294967295 : 32'd1);

assign select_ln62_fu_267_p3 = ((dirY[0:0] === 1'b1) ? 32'd4294967295 : 32'd1);

assign x_fu_190_p2 = (x_0_reg_90 + 10'd1);

assign y_fu_141_p2 = (y_0_reg_79 + 9'd1);

assign zext_ln30_fu_131_p1 = y_0_reg_79;

assign zext_ln31_fu_180_p1 = x_0_reg_90;

endmodule //pattern_generator_cross
