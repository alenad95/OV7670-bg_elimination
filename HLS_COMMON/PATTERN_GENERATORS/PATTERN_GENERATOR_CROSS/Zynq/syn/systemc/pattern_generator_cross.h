// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pattern_generator_cross_HH_
#define _pattern_generator_cross_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct pattern_generator_cross : public sc_module {
    // Port declarations 5
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<8> > outputStream_V_TDATA;
    sc_out< sc_logic > outputStream_V_TVALID;
    sc_in< sc_logic > outputStream_V_TREADY;


    // Module declarations
    pattern_generator_cross(sc_module_name name);
    SC_HAS_PROCESS(pattern_generator_cross);

    ~pattern_generator_cross();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<8> > outputStream_V_1_data_in;
    sc_signal< sc_lv<8> > outputStream_V_1_data_out;
    sc_signal< sc_logic > outputStream_V_1_vld_in;
    sc_signal< sc_logic > outputStream_V_1_vld_out;
    sc_signal< sc_logic > outputStream_V_1_ack_in;
    sc_signal< sc_logic > outputStream_V_1_ack_out;
    sc_signal< sc_lv<8> > outputStream_V_1_payload_A;
    sc_signal< sc_lv<8> > outputStream_V_1_payload_B;
    sc_signal< sc_logic > outputStream_V_1_sel_rd;
    sc_signal< sc_logic > outputStream_V_1_sel_wr;
    sc_signal< sc_logic > outputStream_V_1_sel;
    sc_signal< sc_logic > outputStream_V_1_load_A;
    sc_signal< sc_logic > outputStream_V_1_load_B;
    sc_signal< sc_lv<2> > outputStream_V_1_state;
    sc_signal< sc_logic > outputStream_V_1_state_cmp_full;
    sc_signal< sc_lv<32> > lineX;
    sc_signal< sc_lv<32> > lineY;
    sc_signal< sc_lv<1> > dirX;
    sc_signal< sc_lv<1> > dirY;
    sc_signal< sc_logic > outputStream_V_TDATA_blk_n;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln31_fu_184_p2;
    sc_signal< sc_lv<1> > and_ln33_fu_202_p2;
    sc_signal< sc_lv<1> > or_ln35_fu_212_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > and_ln33_reg_335;
    sc_signal< sc_lv<1> > or_ln35_reg_339;
    sc_signal< sc_lv<32> > lineX_load_reg_287;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > lineY_load_reg_295;
    sc_signal< sc_lv<9> > y_fu_141_p2;
    sc_signal< sc_lv<9> > y_reg_306;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln33_fu_147_p2;
    sc_signal< sc_lv<1> > icmp_ln33_reg_311;
    sc_signal< sc_lv<1> > icmp_ln30_fu_135_p2;
    sc_signal< sc_lv<1> > icmp_ln35_1_fu_153_p2;
    sc_signal< sc_lv<1> > icmp_ln35_1_reg_316;
    sc_signal< sc_lv<10> > x_fu_190_p2;
    sc_signal< sc_lv<10> > x_reg_330;
    sc_signal< bool > ap_predicate_op48_write_state3;
    sc_signal< bool > ap_predicate_op49_write_state3;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_lv<9> > y_0_reg_79;
    sc_signal< sc_lv<10> > x_0_reg_90;
    sc_signal< bool > ap_predicate_op51_write_state4;
    sc_signal< bool > ap_predicate_op53_write_state4;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< sc_lv<32> > empty_3_reg_101;
    sc_signal< sc_lv<1> > icmp_ln44_fu_158_p2;
    sc_signal< sc_lv<32> > empty_4_reg_112;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln49_fu_217_p2;
    sc_signal< sc_lv<32> > add_ln58_fu_251_p2;
    sc_signal< sc_lv<32> > add_ln62_fu_275_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_state6;
    sc_signal< sc_lv<1> > icmp_ln46_fu_163_p2;
    sc_signal< sc_lv<1> > icmp_ln51_fu_222_p2;
    sc_signal< sc_lv<32> > zext_ln30_fu_131_p1;
    sc_signal< sc_lv<1> > icmp_ln33_1_fu_196_p2;
    sc_signal< sc_lv<32> > zext_ln31_fu_180_p1;
    sc_signal< sc_lv<1> > icmp_ln35_fu_207_p2;
    sc_signal< sc_lv<32> > select_ln58_fu_243_p3;
    sc_signal< sc_lv<32> > select_ln62_fu_267_p3;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<9> ap_const_lv9_1FE;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<9> ap_const_lv9_1E0;
    static const sc_lv<32> ap_const_lv32_27F;
    static const sc_lv<10> ap_const_lv10_2D0;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<10> ap_const_lv10_280;
    static const sc_lv<32> ap_const_lv32_1DF;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln58_fu_251_p2();
    void thread_add_ln62_fu_275_p2();
    void thread_and_ln33_fu_202_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_state3_io();
    void thread_ap_block_state4_io();
    void thread_ap_block_state6();
    void thread_ap_predicate_op48_write_state3();
    void thread_ap_predicate_op49_write_state3();
    void thread_ap_predicate_op51_write_state4();
    void thread_ap_predicate_op53_write_state4();
    void thread_ap_rst_n_inv();
    void thread_icmp_ln30_fu_135_p2();
    void thread_icmp_ln31_fu_184_p2();
    void thread_icmp_ln33_1_fu_196_p2();
    void thread_icmp_ln33_fu_147_p2();
    void thread_icmp_ln35_1_fu_153_p2();
    void thread_icmp_ln35_fu_207_p2();
    void thread_icmp_ln44_fu_158_p2();
    void thread_icmp_ln46_fu_163_p2();
    void thread_icmp_ln49_fu_217_p2();
    void thread_icmp_ln51_fu_222_p2();
    void thread_or_ln35_fu_212_p2();
    void thread_outputStream_V_1_ack_in();
    void thread_outputStream_V_1_ack_out();
    void thread_outputStream_V_1_data_in();
    void thread_outputStream_V_1_data_out();
    void thread_outputStream_V_1_load_A();
    void thread_outputStream_V_1_load_B();
    void thread_outputStream_V_1_sel();
    void thread_outputStream_V_1_state_cmp_full();
    void thread_outputStream_V_1_vld_in();
    void thread_outputStream_V_1_vld_out();
    void thread_outputStream_V_TDATA();
    void thread_outputStream_V_TDATA_blk_n();
    void thread_outputStream_V_TVALID();
    void thread_select_ln58_fu_243_p3();
    void thread_select_ln62_fu_267_p3();
    void thread_x_fu_190_p2();
    void thread_y_fu_141_p2();
    void thread_zext_ln30_fu_131_p1();
    void thread_zext_ln31_fu_180_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
