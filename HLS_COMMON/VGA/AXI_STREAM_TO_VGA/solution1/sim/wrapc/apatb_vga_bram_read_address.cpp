// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "do_read_V"
#define AUTOTB_TVOUT_do_read_V  "../tv/cdatafile/c.vga_bram_read_address.autotvout_do_read_V.dat"
// wrapc file define: "address"
#define AUTOTB_TVOUT_address  "../tv/cdatafile/c.vga_bram_read_address.autotvout_address.dat"
// wrapc file define: "PIXEL_V"
#define AUTOTB_TVIN_PIXEL_V  "../tv/cdatafile/c.vga_bram_read_address.autotvin_PIXEL_V.dat"
// wrapc file define: "R_V"
#define AUTOTB_TVOUT_R_V  "../tv/cdatafile/c.vga_bram_read_address.autotvout_R_V.dat"
// wrapc file define: "G_V"
#define AUTOTB_TVOUT_G_V  "../tv/cdatafile/c.vga_bram_read_address.autotvout_G_V.dat"
// wrapc file define: "B_V"
#define AUTOTB_TVOUT_B_V  "../tv/cdatafile/c.vga_bram_read_address.autotvout_B_V.dat"
// wrapc file define: "V_SYNC_V"
#define AUTOTB_TVOUT_V_SYNC_V  "../tv/cdatafile/c.vga_bram_read_address.autotvout_V_SYNC_V.dat"
// wrapc file define: "H_SYNC_V"
#define AUTOTB_TVOUT_H_SYNC_V  "../tv/cdatafile/c.vga_bram_read_address.autotvout_H_SYNC_V.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "do_read_V"
#define AUTOTB_TVOUT_PC_do_read_V  "../tv/rtldatafile/rtl.vga_bram_read_address.autotvout_do_read_V.dat"
// tvout file define: "address"
#define AUTOTB_TVOUT_PC_address  "../tv/rtldatafile/rtl.vga_bram_read_address.autotvout_address.dat"
// tvout file define: "R_V"
#define AUTOTB_TVOUT_PC_R_V  "../tv/rtldatafile/rtl.vga_bram_read_address.autotvout_R_V.dat"
// tvout file define: "G_V"
#define AUTOTB_TVOUT_PC_G_V  "../tv/rtldatafile/rtl.vga_bram_read_address.autotvout_G_V.dat"
// tvout file define: "B_V"
#define AUTOTB_TVOUT_PC_B_V  "../tv/rtldatafile/rtl.vga_bram_read_address.autotvout_B_V.dat"
// tvout file define: "V_SYNC_V"
#define AUTOTB_TVOUT_PC_V_SYNC_V  "../tv/rtldatafile/rtl.vga_bram_read_address.autotvout_V_SYNC_V.dat"
// tvout file define: "H_SYNC_V"
#define AUTOTB_TVOUT_PC_H_SYNC_V  "../tv/rtldatafile/rtl.vga_bram_read_address.autotvout_H_SYNC_V.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			do_read_V_depth = 0;
			address_depth = 0;
			PIXEL_V_depth = 0;
			R_V_depth = 0;
			G_V_depth = 0;
			B_V_depth = 0;
			V_SYNC_V_depth = 0;
			H_SYNC_V_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{do_read_V " << do_read_V_depth << "}\n";
			total_list << "{address " << address_depth << "}\n";
			total_list << "{PIXEL_V " << PIXEL_V_depth << "}\n";
			total_list << "{R_V " << R_V_depth << "}\n";
			total_list << "{G_V " << G_V_depth << "}\n";
			total_list << "{B_V " << B_V_depth << "}\n";
			total_list << "{V_SYNC_V " << V_SYNC_V_depth << "}\n";
			total_list << "{H_SYNC_V " << H_SYNC_V_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int do_read_V_depth;
		int address_depth;
		int PIXEL_V_depth;
		int R_V_depth;
		int G_V_depth;
		int B_V_depth;
		int V_SYNC_V_depth;
		int H_SYNC_V_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};


#define vga_bram_read_address AESL_ORIG_DUT_vga_bram_read_address
extern void vga_bram_read_address (
ap_uint<1>* do_read,
unsigned int* address,
ap_uint<8> PIXEL,
ap_uint<4>* R,
ap_uint<4>* G,
ap_uint<4>* B,
ap_uint<1>* V_SYNC,
ap_uint<1>* H_SYNC);
#undef vga_bram_read_address

void vga_bram_read_address (
ap_uint<1>* do_read,
unsigned int* address,
ap_uint<8> PIXEL,
ap_uint<4>* R,
ap_uint<4>* G,
ap_uint<4>* B,
ap_uint<1>* V_SYNC,
ap_uint<1>* H_SYNC)
{
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "do_read_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_do_read_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_do_read_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_do_read_V, AESL_token); // data

			sc_bv<1> *do_read_V_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'do_read_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'do_read_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					do_read_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_do_read_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_do_read_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: do_read_V
				{
					// bitslice(0, 0)
					// {
						// celement: do_read.V(0, 0)
						// {
							sc_lv<1>* do_read_V_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: do_read.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(do_read[0]) != NULL) // check the null address if the c port is array or others
								{
									do_read_V_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(do_read_V_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: do_read.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : do_read[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : do_read[0]
								// output_left_conversion : do_read[i_0]
								// output_type_conversion : (do_read_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(do_read[0]) != NULL) // check the null address if the c port is array or others
								{
									do_read[i_0] = (do_read_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] do_read_V_pc_buffer;
		}

		// output port post check: "address"
		aesl_fh.read(AUTOTB_TVOUT_PC_address, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_address, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_address, AESL_token); // data

			sc_bv<32> *address_pc_buffer = new sc_bv<32>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'address', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'address', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					address_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_address, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_address))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: address
				{
					// bitslice(31, 0)
					// {
						// celement: address(31, 0)
						// {
							sc_lv<32>* address_lv0_0_0_1 = new sc_lv<32>[1];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: address(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(address[0]) != NULL) // check the null address if the c port is array or others
								{
									address_lv0_0_0_1[hls_map_index++].range(31, 0) = sc_bv<32>(address_pc_buffer[hls_map_index].range(31, 0));
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: address(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : address[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : address[0]
								// output_left_conversion : address[i_0]
								// output_type_conversion : (address_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(address[0]) != NULL) // check the null address if the c port is array or others
								{
									address[i_0] = (address_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] address_pc_buffer;
		}

		// output port post check: "R_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_R_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_R_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_R_V, AESL_token); // data

			sc_bv<4> *R_V_pc_buffer = new sc_bv<4>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'R_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'R_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					R_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_R_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_R_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: R_V
				{
					// bitslice(3, 0)
					// {
						// celement: R.V(3, 0)
						// {
							sc_lv<4>* R_V_lv0_0_0_1 = new sc_lv<4>[1];
						// }
					// }

					// bitslice(3, 0)
					{
						int hls_map_index = 0;
						// celement: R.V(3, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(R[0]) != NULL) // check the null address if the c port is array or others
								{
									R_V_lv0_0_0_1[hls_map_index++].range(3, 0) = sc_bv<4>(R_V_pc_buffer[hls_map_index].range(3, 0));
								}
							}
						}
					}

					// bitslice(3, 0)
					{
						int hls_map_index = 0;
						// celement: R.V(3, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : R[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : R[0]
								// output_left_conversion : R[i_0]
								// output_type_conversion : (R_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(R[0]) != NULL) // check the null address if the c port is array or others
								{
									R[i_0] = (R_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] R_V_pc_buffer;
		}

		// output port post check: "G_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_G_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_G_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_G_V, AESL_token); // data

			sc_bv<4> *G_V_pc_buffer = new sc_bv<4>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'G_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'G_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					G_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_G_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_G_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: G_V
				{
					// bitslice(3, 0)
					// {
						// celement: G.V(3, 0)
						// {
							sc_lv<4>* G_V_lv0_0_0_1 = new sc_lv<4>[1];
						// }
					// }

					// bitslice(3, 0)
					{
						int hls_map_index = 0;
						// celement: G.V(3, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(G[0]) != NULL) // check the null address if the c port is array or others
								{
									G_V_lv0_0_0_1[hls_map_index++].range(3, 0) = sc_bv<4>(G_V_pc_buffer[hls_map_index].range(3, 0));
								}
							}
						}
					}

					// bitslice(3, 0)
					{
						int hls_map_index = 0;
						// celement: G.V(3, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : G[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : G[0]
								// output_left_conversion : G[i_0]
								// output_type_conversion : (G_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(G[0]) != NULL) // check the null address if the c port is array or others
								{
									G[i_0] = (G_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] G_V_pc_buffer;
		}

		// output port post check: "B_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_B_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_B_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_B_V, AESL_token); // data

			sc_bv<4> *B_V_pc_buffer = new sc_bv<4>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'B_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'B_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					B_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_B_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_B_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: B_V
				{
					// bitslice(3, 0)
					// {
						// celement: B.V(3, 0)
						// {
							sc_lv<4>* B_V_lv0_0_0_1 = new sc_lv<4>[1];
						// }
					// }

					// bitslice(3, 0)
					{
						int hls_map_index = 0;
						// celement: B.V(3, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(B[0]) != NULL) // check the null address if the c port is array or others
								{
									B_V_lv0_0_0_1[hls_map_index++].range(3, 0) = sc_bv<4>(B_V_pc_buffer[hls_map_index].range(3, 0));
								}
							}
						}
					}

					// bitslice(3, 0)
					{
						int hls_map_index = 0;
						// celement: B.V(3, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : B[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : B[0]
								// output_left_conversion : B[i_0]
								// output_type_conversion : (B_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(B[0]) != NULL) // check the null address if the c port is array or others
								{
									B[i_0] = (B_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] B_V_pc_buffer;
		}

		// output port post check: "V_SYNC_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_V_SYNC_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_V_SYNC_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_V_SYNC_V, AESL_token); // data

			sc_bv<1> *V_SYNC_V_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'V_SYNC_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'V_SYNC_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					V_SYNC_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_V_SYNC_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_V_SYNC_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: V_SYNC_V
				{
					// bitslice(0, 0)
					// {
						// celement: V_SYNC.V(0, 0)
						// {
							sc_lv<1>* V_SYNC_V_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: V_SYNC.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(V_SYNC[0]) != NULL) // check the null address if the c port is array or others
								{
									V_SYNC_V_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(V_SYNC_V_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: V_SYNC.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : V_SYNC[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : V_SYNC[0]
								// output_left_conversion : V_SYNC[i_0]
								// output_type_conversion : (V_SYNC_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(V_SYNC[0]) != NULL) // check the null address if the c port is array or others
								{
									V_SYNC[i_0] = (V_SYNC_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] V_SYNC_V_pc_buffer;
		}

		// output port post check: "H_SYNC_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_H_SYNC_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_H_SYNC_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_H_SYNC_V, AESL_token); // data

			sc_bv<1> *H_SYNC_V_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'H_SYNC_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'H_SYNC_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					H_SYNC_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_H_SYNC_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_H_SYNC_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: H_SYNC_V
				{
					// bitslice(0, 0)
					// {
						// celement: H_SYNC.V(0, 0)
						// {
							sc_lv<1>* H_SYNC_V_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: H_SYNC.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(H_SYNC[0]) != NULL) // check the null address if the c port is array or others
								{
									H_SYNC_V_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(H_SYNC_V_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: H_SYNC.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : H_SYNC[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : H_SYNC[0]
								// output_left_conversion : H_SYNC[i_0]
								// output_type_conversion : (H_SYNC_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(H_SYNC[0]) != NULL) // check the null address if the c port is array or others
								{
									H_SYNC[i_0] = (H_SYNC_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] H_SYNC_V_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "do_read_V"
		char* tvout_do_read_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_do_read_V);

		// "address"
		char* tvout_address = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_address);

		// "PIXEL_V"
		char* tvin_PIXEL_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_PIXEL_V);

		// "R_V"
		char* tvout_R_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_R_V);

		// "G_V"
		char* tvout_G_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_G_V);

		// "B_V"
		char* tvout_B_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_B_V);

		// "V_SYNC_V"
		char* tvout_V_SYNC_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_V_SYNC_V);

		// "H_SYNC_V"
		char* tvout_H_SYNC_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_H_SYNC_V);

		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_PIXEL_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_PIXEL_V, tvin_PIXEL_V);

		sc_bv<8> PIXEL_V_tvin_wrapc_buffer;

		// RTL Name: PIXEL_V
		{
			// bitslice(7, 0)
			{
				// celement: PIXEL.V(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : PIXEL
						// sub_1st_elem          : 
						// ori_name_1st_elem     : PIXEL
						// regulate_c_name       : PIXEL_V
						// input_type_conversion : (PIXEL).to_string(2).c_str()
						if (&(PIXEL) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> PIXEL_V_tmp_mem;
							PIXEL_V_tmp_mem = (PIXEL).to_string(2).c_str();
							PIXEL_V_tvin_wrapc_buffer.range(7, 0) = PIXEL_V_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_PIXEL_V, "%s\n", (PIXEL_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_PIXEL_V, tvin_PIXEL_V);
		}

		tcl_file.set_num(1, &tcl_file.PIXEL_V_depth);
		sprintf(tvin_PIXEL_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_PIXEL_V, tvin_PIXEL_V);

// [call_c_dut] ---------->

		AESL_ORIG_DUT_vga_bram_read_address(do_read, address, PIXEL, R, G, B, V_SYNC, H_SYNC);


		// [[transaction]]
		sprintf(tvout_do_read_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_do_read_V, tvout_do_read_V);

		sc_bv<1>* do_read_V_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: do_read_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: do_read.V(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : do_read[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : do_read[0]
						// regulate_c_name       : do_read_V
						// input_type_conversion : (do_read[i_0]).to_string(2).c_str()
						if (&(do_read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> do_read_V_tmp_mem;
							do_read_V_tmp_mem = (do_read[i_0]).to_string(2).c_str();
							do_read_V_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = do_read_V_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_do_read_V, "%s\n", (do_read_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_do_read_V, tvout_do_read_V);
		}

		tcl_file.set_num(1, &tcl_file.do_read_V_depth);
		sprintf(tvout_do_read_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_do_read_V, tvout_do_read_V);

		// release memory allocation
		delete [] do_read_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_address, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_address, tvout_address);

		sc_bv<32>* address_tvout_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: address
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: address(31, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : address[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : address[0]
						// regulate_c_name       : address
						// input_type_conversion : address[i_0]
						if (&(address[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> address_tmp_mem;
							address_tmp_mem = address[i_0];
							address_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = address_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_address, "%s\n", (address_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_address, tvout_address);
		}

		tcl_file.set_num(1, &tcl_file.address_depth);
		sprintf(tvout_address, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_address, tvout_address);

		// release memory allocation
		delete [] address_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_R_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_R_V, tvout_R_V);

		sc_bv<4>* R_V_tvout_wrapc_buffer = new sc_bv<4>[1];

		// RTL Name: R_V
		{
			// bitslice(3, 0)
			{
				int hls_map_index = 0;
				// celement: R.V(3, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : R[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : R[0]
						// regulate_c_name       : R_V
						// input_type_conversion : (R[i_0]).to_string(2).c_str()
						if (&(R[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<4> R_V_tmp_mem;
							R_V_tmp_mem = (R[i_0]).to_string(2).c_str();
							R_V_tvout_wrapc_buffer[hls_map_index++].range(3, 0) = R_V_tmp_mem.range(3, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_R_V, "%s\n", (R_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_R_V, tvout_R_V);
		}

		tcl_file.set_num(1, &tcl_file.R_V_depth);
		sprintf(tvout_R_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_R_V, tvout_R_V);

		// release memory allocation
		delete [] R_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_G_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_G_V, tvout_G_V);

		sc_bv<4>* G_V_tvout_wrapc_buffer = new sc_bv<4>[1];

		// RTL Name: G_V
		{
			// bitslice(3, 0)
			{
				int hls_map_index = 0;
				// celement: G.V(3, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : G[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : G[0]
						// regulate_c_name       : G_V
						// input_type_conversion : (G[i_0]).to_string(2).c_str()
						if (&(G[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<4> G_V_tmp_mem;
							G_V_tmp_mem = (G[i_0]).to_string(2).c_str();
							G_V_tvout_wrapc_buffer[hls_map_index++].range(3, 0) = G_V_tmp_mem.range(3, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_G_V, "%s\n", (G_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_G_V, tvout_G_V);
		}

		tcl_file.set_num(1, &tcl_file.G_V_depth);
		sprintf(tvout_G_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_G_V, tvout_G_V);

		// release memory allocation
		delete [] G_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_B_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_B_V, tvout_B_V);

		sc_bv<4>* B_V_tvout_wrapc_buffer = new sc_bv<4>[1];

		// RTL Name: B_V
		{
			// bitslice(3, 0)
			{
				int hls_map_index = 0;
				// celement: B.V(3, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : B[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : B[0]
						// regulate_c_name       : B_V
						// input_type_conversion : (B[i_0]).to_string(2).c_str()
						if (&(B[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<4> B_V_tmp_mem;
							B_V_tmp_mem = (B[i_0]).to_string(2).c_str();
							B_V_tvout_wrapc_buffer[hls_map_index++].range(3, 0) = B_V_tmp_mem.range(3, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_B_V, "%s\n", (B_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_B_V, tvout_B_V);
		}

		tcl_file.set_num(1, &tcl_file.B_V_depth);
		sprintf(tvout_B_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_B_V, tvout_B_V);

		// release memory allocation
		delete [] B_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_V_SYNC_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_V_SYNC_V, tvout_V_SYNC_V);

		sc_bv<1>* V_SYNC_V_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: V_SYNC_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: V_SYNC.V(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : V_SYNC[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : V_SYNC[0]
						// regulate_c_name       : V_SYNC_V
						// input_type_conversion : (V_SYNC[i_0]).to_string(2).c_str()
						if (&(V_SYNC[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> V_SYNC_V_tmp_mem;
							V_SYNC_V_tmp_mem = (V_SYNC[i_0]).to_string(2).c_str();
							V_SYNC_V_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = V_SYNC_V_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_V_SYNC_V, "%s\n", (V_SYNC_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_V_SYNC_V, tvout_V_SYNC_V);
		}

		tcl_file.set_num(1, &tcl_file.V_SYNC_V_depth);
		sprintf(tvout_V_SYNC_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_V_SYNC_V, tvout_V_SYNC_V);

		// release memory allocation
		delete [] V_SYNC_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_H_SYNC_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_H_SYNC_V, tvout_H_SYNC_V);

		sc_bv<1>* H_SYNC_V_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: H_SYNC_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: H_SYNC.V(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : H_SYNC[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : H_SYNC[0]
						// regulate_c_name       : H_SYNC_V
						// input_type_conversion : (H_SYNC[i_0]).to_string(2).c_str()
						if (&(H_SYNC[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> H_SYNC_V_tmp_mem;
							H_SYNC_V_tmp_mem = (H_SYNC[i_0]).to_string(2).c_str();
							H_SYNC_V_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = H_SYNC_V_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_H_SYNC_V, "%s\n", (H_SYNC_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_H_SYNC_V, tvout_H_SYNC_V);
		}

		tcl_file.set_num(1, &tcl_file.H_SYNC_V_depth);
		sprintf(tvout_H_SYNC_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_H_SYNC_V, tvout_H_SYNC_V);

		// release memory allocation
		delete [] H_SYNC_V_tvout_wrapc_buffer;

		// release memory allocation: "do_read_V"
		delete [] tvout_do_read_V;
		// release memory allocation: "address"
		delete [] tvout_address;
		// release memory allocation: "PIXEL_V"
		delete [] tvin_PIXEL_V;
		// release memory allocation: "R_V"
		delete [] tvout_R_V;
		// release memory allocation: "G_V"
		delete [] tvout_G_V;
		// release memory allocation: "B_V"
		delete [] tvout_B_V;
		// release memory allocation: "V_SYNC_V"
		delete [] tvout_V_SYNC_V;
		// release memory allocation: "H_SYNC_V"
		delete [] tvout_H_SYNC_V;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

