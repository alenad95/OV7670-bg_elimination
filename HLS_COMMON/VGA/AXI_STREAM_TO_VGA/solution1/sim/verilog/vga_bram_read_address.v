// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="vga_bram_read_address,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.249000,HLS_SYN_LAT=420002,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=125,HLS_SYN_LUT=252}" *)

module vga_bram_read_address (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        do_read_V,
        address,
        PIXEL_V,
        R_V,
        G_V,
        B_V,
        V_SYNC_V,
        H_SYNC_V
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv19_0 = 19'b0000000000000000000;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv19_668A0 = 19'b1100110100010100000;
parameter    ap_const_lv19_1 = 19'b1;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv10_320 = 10'b1100100000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv10_22 = 10'b100010;
parameter    ap_const_lv10_203 = 10'b1000000011;
parameter    ap_const_lv10_5F = 10'b1011111;
parameter    ap_const_lv10_8F = 10'b10001111;
parameter    ap_const_lv10_310 = 10'b1100010000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] do_read_V;
output  [31:0] address;
input  [7:0] PIXEL_V;
output  [3:0] R_V;
output  [3:0] G_V;
output  [3:0] B_V;
output  [0:0] V_SYNC_V;
output  [0:0] H_SYNC_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] do_read_V;
reg[31:0] address;
reg[3:0] R_V;
reg[3:0] G_V;
reg[3:0] B_V;
reg[0:0] V_SYNC_V;
reg[0:0] H_SYNC_V;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_19;
wire   [3:0] R_temp_V_fu_193_p1;
reg   [3:0] R_temp_V_reg_336;
wire   [18:0] indvar_flatten_next_fu_208_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_46;
wire   [9:0] y_mid2_fu_234_p3;
wire   [0:0] exitcond_flatten_fu_202_p2;
wire   [9:0] x_1_fu_323_p2;
reg   [18:0] indvar_flatten_reg_147;
reg   [9:0] y_reg_158;
reg   [9:0] x_reg_169;
reg   [3:0] storemerge_phi_fu_183_p4;
wire   [0:0] or_cond2_fu_302_p2;
reg   [31:0] index_1_fu_86;
wire   [31:0] index_fu_312_p2;
reg   [0:0] do_read_V_preg = 1'b0;
reg   [31:0] address_preg = 32'b00000000000000000000000000000000;
reg   [3:0] R_V_preg = 4'b0000;
reg   [3:0] G_V_preg = 4'b0000;
reg   [3:0] B_V_preg = 4'b0000;
wire   [0:0] icmp_fu_252_p2;
reg   [0:0] V_SYNC_V_preg = 1'b0;
wire   [0:0] not_1_fu_277_p2;
reg   [0:0] H_SYNC_V_preg = 1'b0;
wire   [0:0] exitcond3_fu_220_p2;
wire   [9:0] y_1_fu_214_p2;
wire   [8:0] tmp_6_fu_242_p4;
wire   [0:0] tmp_fu_259_p2;
wire   [0:0] tmp_1_fu_265_p2;
wire   [9:0] x_mid2_fu_226_p3;
wire   [0:0] tmp_3_fu_284_p2;
wire   [0:0] tmp_4_fu_290_p2;
wire   [0:0] tmp2_fu_271_p2;
wire   [0:0] tmp1_fu_296_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_174;
reg   [2:0] ap_NS_fsm;
reg    ap_sig_bdd_54;




/// B_V_preg assign process. ///
always @ (posedge ap_clk) begin : ap_ret_B_V_preg
    if (ap_rst == 1'b1) begin
        B_V_preg <= ap_const_lv4_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0))) begin
            B_V_preg <= storemerge_phi_fu_183_p4;
        end
    end
end

/// G_V_preg assign process. ///
always @ (posedge ap_clk) begin : ap_ret_G_V_preg
    if (ap_rst == 1'b1) begin
        G_V_preg <= ap_const_lv4_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0))) begin
            G_V_preg <= storemerge_phi_fu_183_p4;
        end
    end
end

/// H_SYNC_V_preg assign process. ///
always @ (posedge ap_clk) begin : ap_ret_H_SYNC_V_preg
    if (ap_rst == 1'b1) begin
        H_SYNC_V_preg <= ap_const_lv1_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0))) begin
            H_SYNC_V_preg <= not_1_fu_277_p2;
        end
    end
end

/// R_V_preg assign process. ///
always @ (posedge ap_clk) begin : ap_ret_R_V_preg
    if (ap_rst == 1'b1) begin
        R_V_preg <= ap_const_lv4_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0))) begin
            R_V_preg <= storemerge_phi_fu_183_p4;
        end
    end
end

/// V_SYNC_V_preg assign process. ///
always @ (posedge ap_clk) begin : ap_ret_V_SYNC_V_preg
    if (ap_rst == 1'b1) begin
        V_SYNC_V_preg <= ap_const_lv1_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0))) begin
            V_SYNC_V_preg <= icmp_fu_252_p2;
        end
    end
end

/// address_preg assign process. ///
always @ (posedge ap_clk) begin : ap_ret_address_preg
    if (ap_rst == 1'b1) begin
        address_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == or_cond2_fu_302_p2))) begin
            address_preg <= index_1_fu_86;
        end
    end
end

/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// do_read_V_preg assign process. ///
always @ (posedge ap_clk) begin : ap_ret_do_read_V_preg
    if (ap_rst == 1'b1) begin
        do_read_V_preg <= ap_const_lv1_0;
    end else begin
        if (ap_sig_bdd_54) begin
            if (~(ap_const_lv1_0 == or_cond2_fu_302_p2)) begin
                do_read_V_preg <= ap_const_lv1_1;
            end else if ((ap_const_lv1_0 == or_cond2_fu_302_p2)) begin
                do_read_V_preg <= ap_const_lv1_0;
            end
        end
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == or_cond2_fu_302_p2))) begin
        index_1_fu_86 <= index_fu_312_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        index_1_fu_86 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0))) begin
        indvar_flatten_reg_147 <= indvar_flatten_next_fu_208_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        indvar_flatten_reg_147 <= ap_const_lv19_0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0))) begin
        x_reg_169 <= x_1_fu_323_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        x_reg_169 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0))) begin
        y_reg_158 <= y_mid2_fu_234_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        y_reg_158 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        R_temp_V_reg_336 <= R_temp_V_fu_193_p1;
    end
end

/// B_V assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_flatten_fu_202_p2 or storemerge_phi_fu_183_p4 or B_V_preg) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0))) begin
        B_V = storemerge_phi_fu_183_p4;
    end else begin
        B_V = B_V_preg;
    end
end

/// G_V assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_flatten_fu_202_p2 or storemerge_phi_fu_183_p4 or G_V_preg) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0))) begin
        G_V = storemerge_phi_fu_183_p4;
    end else begin
        G_V = G_V_preg;
    end
end

/// H_SYNC_V assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_flatten_fu_202_p2 or not_1_fu_277_p2 or H_SYNC_V_preg) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0))) begin
        H_SYNC_V = not_1_fu_277_p2;
    end else begin
        H_SYNC_V = H_SYNC_V_preg;
    end
end

/// R_V assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_flatten_fu_202_p2 or storemerge_phi_fu_183_p4 or R_V_preg) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0))) begin
        R_V = storemerge_phi_fu_183_p4;
    end else begin
        R_V = R_V_preg;
    end
end

/// V_SYNC_V assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_flatten_fu_202_p2 or icmp_fu_252_p2 or V_SYNC_V_preg) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0))) begin
        V_SYNC_V = icmp_fu_252_p2;
    end else begin
        V_SYNC_V = V_SYNC_V_preg;
    end
end

/// address assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_flatten_fu_202_p2 or or_cond2_fu_302_p2 or index_1_fu_86 or address_preg) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == or_cond2_fu_302_p2))) begin
        address = index_1_fu_86;
    end else begin
        address = address_preg;
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_19) begin
    if (ap_sig_bdd_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_46) begin
    if (ap_sig_bdd_46) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_174) begin
    if (ap_sig_bdd_174) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// do_read_V assign process. ///
always @ (or_cond2_fu_302_p2 or do_read_V_preg or ap_sig_bdd_54) begin
    if (ap_sig_bdd_54) begin
        if (~(ap_const_lv1_0 == or_cond2_fu_302_p2)) begin
            do_read_V = ap_const_lv1_1;
        end else if ((ap_const_lv1_0 == or_cond2_fu_302_p2)) begin
            do_read_V = ap_const_lv1_0;
        end else begin
            do_read_V = do_read_V_preg;
        end
    end else begin
        do_read_V = do_read_V_preg;
    end
end

/// storemerge_phi_fu_183_p4 assign process. ///
always @ (R_temp_V_reg_336 or or_cond2_fu_302_p2 or ap_sig_bdd_54) begin
    if (ap_sig_bdd_54) begin
        if (~(ap_const_lv1_0 == or_cond2_fu_302_p2)) begin
            storemerge_phi_fu_183_p4 = R_temp_V_reg_336;
        end else if ((ap_const_lv1_0 == or_cond2_fu_302_p2)) begin
            storemerge_phi_fu_183_p4 = ap_const_lv4_0;
        end else begin
            storemerge_phi_fu_183_p4 = 'bx;
        end
    end else begin
        storemerge_phi_fu_183_p4 = 'bx;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_flatten_fu_202_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((exitcond_flatten_fu_202_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign R_temp_V_fu_193_p1 = PIXEL_V[3:0];

/// ap_sig_bdd_174 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_174 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_19 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_19 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_46 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_46 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_54 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_flatten_fu_202_p2) begin
    ap_sig_bdd_54 = ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_flatten_fu_202_p2 == ap_const_lv1_0));
end
assign exitcond3_fu_220_p2 = (x_reg_169 == ap_const_lv10_320? 1'b1: 1'b0);
assign exitcond_flatten_fu_202_p2 = (indvar_flatten_reg_147 == ap_const_lv19_668A0? 1'b1: 1'b0);
assign icmp_fu_252_p2 = (tmp_6_fu_242_p4 != ap_const_lv9_0? 1'b1: 1'b0);
assign index_fu_312_p2 = (index_1_fu_86 + ap_const_lv32_1);
assign indvar_flatten_next_fu_208_p2 = (indvar_flatten_reg_147 + ap_const_lv19_1);
assign not_1_fu_277_p2 = (x_mid2_fu_226_p3 > ap_const_lv10_5F? 1'b1: 1'b0);
assign or_cond2_fu_302_p2 = (tmp2_fu_271_p2 & tmp1_fu_296_p2);
assign tmp1_fu_296_p2 = (tmp_3_fu_284_p2 & tmp_4_fu_290_p2);
assign tmp2_fu_271_p2 = (tmp_fu_259_p2 & tmp_1_fu_265_p2);
assign tmp_1_fu_265_p2 = (y_mid2_fu_234_p3 < ap_const_lv10_203? 1'b1: 1'b0);
assign tmp_3_fu_284_p2 = (x_mid2_fu_226_p3 > ap_const_lv10_8F? 1'b1: 1'b0);
assign tmp_4_fu_290_p2 = (x_mid2_fu_226_p3 < ap_const_lv10_310? 1'b1: 1'b0);
assign tmp_6_fu_242_p4 = {{y_mid2_fu_234_p3[ap_const_lv32_9 : ap_const_lv32_1]}};
assign tmp_fu_259_p2 = (y_mid2_fu_234_p3 > ap_const_lv10_22? 1'b1: 1'b0);
assign x_1_fu_323_p2 = (x_mid2_fu_226_p3 + ap_const_lv10_1);
assign x_mid2_fu_226_p3 = ((exitcond3_fu_220_p2[0:0] === 1'b1) ? ap_const_lv10_0 : x_reg_169);
assign y_1_fu_214_p2 = (y_reg_158 + ap_const_lv10_1);
assign y_mid2_fu_234_p3 = ((exitcond3_fu_220_p2[0:0] === 1'b1) ? y_1_fu_214_p2 : y_reg_158);


endmodule //vga_bram_read_address

