// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XDDR_TO_AXIS_READER_H
#define XDDR_TO_AXIS_READER_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/

#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>

#include "xddr_to_axis_reader_hw.h"

/**************************** Type Definitions ******************************/
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;

typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XDdr_to_axis_reader_Config;

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XDdr_to_axis_reader;

/***************** Macros (Inline Functions) Definitions *********************/
#define XDdr_to_axis_reader_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XDdr_to_axis_reader_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1

/************************** Function Prototypes *****************************/

int XDdr_to_axis_reader_Initialize(XDdr_to_axis_reader *InstancePtr, const char* InstanceName);
int XDdr_to_axis_reader_Release(XDdr_to_axis_reader *InstancePtr);

void XDdr_to_axis_reader_Start(XDdr_to_axis_reader *InstancePtr);
u32 XDdr_to_axis_reader_IsDone(XDdr_to_axis_reader *InstancePtr);
u32 XDdr_to_axis_reader_IsIdle(XDdr_to_axis_reader *InstancePtr);
u32 XDdr_to_axis_reader_IsReady(XDdr_to_axis_reader *InstancePtr);
void XDdr_to_axis_reader_EnableAutoRestart(XDdr_to_axis_reader *InstancePtr);
void XDdr_to_axis_reader_DisableAutoRestart(XDdr_to_axis_reader *InstancePtr);

void XDdr_to_axis_reader_Set_base_address(XDdr_to_axis_reader *InstancePtr, u32 Data);
u32 XDdr_to_axis_reader_Get_base_address(XDdr_to_axis_reader *InstancePtr);
void XDdr_to_axis_reader_Set_frame_buffer_dim(XDdr_to_axis_reader *InstancePtr, u32 Data);
u32 XDdr_to_axis_reader_Get_frame_buffer_dim(XDdr_to_axis_reader *InstancePtr);
void XDdr_to_axis_reader_Set_frame_buffer_offset(XDdr_to_axis_reader *InstancePtr, u32 Data);
u32 XDdr_to_axis_reader_Get_frame_buffer_offset(XDdr_to_axis_reader *InstancePtr);
void XDdr_to_axis_reader_Set_frame_buffer_number(XDdr_to_axis_reader *InstancePtr, u32 Data);
u32 XDdr_to_axis_reader_Get_frame_buffer_number(XDdr_to_axis_reader *InstancePtr);
void XDdr_to_axis_reader_Set_update_intr(XDdr_to_axis_reader *InstancePtr, u32 Data);
u32 XDdr_to_axis_reader_Get_update_intr(XDdr_to_axis_reader *InstancePtr);

void XDdr_to_axis_reader_InterruptGlobalEnable(XDdr_to_axis_reader *InstancePtr);
void XDdr_to_axis_reader_InterruptGlobalDisable(XDdr_to_axis_reader *InstancePtr);
void XDdr_to_axis_reader_InterruptEnable(XDdr_to_axis_reader *InstancePtr, u32 Mask);
void XDdr_to_axis_reader_InterruptDisable(XDdr_to_axis_reader *InstancePtr, u32 Mask);
void XDdr_to_axis_reader_InterruptClear(XDdr_to_axis_reader *InstancePtr, u32 Mask);
u32 XDdr_to_axis_reader_InterruptGetEnabled(XDdr_to_axis_reader *InstancePtr);
u32 XDdr_to_axis_reader_InterruptGetStatus(XDdr_to_axis_reader *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
