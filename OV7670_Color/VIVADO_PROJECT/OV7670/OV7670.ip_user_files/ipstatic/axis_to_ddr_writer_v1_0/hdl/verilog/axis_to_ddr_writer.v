// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axis_to_ddr_writer,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=1283,HLS_SYN_LUT=1483}" *)

module axis_to_ddr_writer (
        ap_clk,
        ap_rst_n,
        inputStream_V_TDATA,
        inputStream_V_TVALID,
        inputStream_V_TREADY,
        m_axi_base_ddr_addr_AWVALID,
        m_axi_base_ddr_addr_AWREADY,
        m_axi_base_ddr_addr_AWADDR,
        m_axi_base_ddr_addr_AWID,
        m_axi_base_ddr_addr_AWLEN,
        m_axi_base_ddr_addr_AWSIZE,
        m_axi_base_ddr_addr_AWBURST,
        m_axi_base_ddr_addr_AWLOCK,
        m_axi_base_ddr_addr_AWCACHE,
        m_axi_base_ddr_addr_AWPROT,
        m_axi_base_ddr_addr_AWQOS,
        m_axi_base_ddr_addr_AWREGION,
        m_axi_base_ddr_addr_AWUSER,
        m_axi_base_ddr_addr_WVALID,
        m_axi_base_ddr_addr_WREADY,
        m_axi_base_ddr_addr_WDATA,
        m_axi_base_ddr_addr_WSTRB,
        m_axi_base_ddr_addr_WLAST,
        m_axi_base_ddr_addr_WID,
        m_axi_base_ddr_addr_WUSER,
        m_axi_base_ddr_addr_ARVALID,
        m_axi_base_ddr_addr_ARREADY,
        m_axi_base_ddr_addr_ARADDR,
        m_axi_base_ddr_addr_ARID,
        m_axi_base_ddr_addr_ARLEN,
        m_axi_base_ddr_addr_ARSIZE,
        m_axi_base_ddr_addr_ARBURST,
        m_axi_base_ddr_addr_ARLOCK,
        m_axi_base_ddr_addr_ARCACHE,
        m_axi_base_ddr_addr_ARPROT,
        m_axi_base_ddr_addr_ARQOS,
        m_axi_base_ddr_addr_ARREGION,
        m_axi_base_ddr_addr_ARUSER,
        m_axi_base_ddr_addr_RVALID,
        m_axi_base_ddr_addr_RREADY,
        m_axi_base_ddr_addr_RDATA,
        m_axi_base_ddr_addr_RLAST,
        m_axi_base_ddr_addr_RID,
        m_axi_base_ddr_addr_RUSER,
        m_axi_base_ddr_addr_RRESP,
        m_axi_base_ddr_addr_BVALID,
        m_axi_base_ddr_addr_BREADY,
        m_axi_base_ddr_addr_BRESP,
        m_axi_base_ddr_addr_BID,
        m_axi_base_ddr_addr_BUSER,
        frame_index_V,
        frame_count,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 14'b1;
parameter    ap_ST_st2_fsm_1 = 14'b10;
parameter    ap_ST_st3_fsm_2 = 14'b100;
parameter    ap_ST_st4_fsm_3 = 14'b1000;
parameter    ap_ST_st5_fsm_4 = 14'b10000;
parameter    ap_ST_st6_fsm_5 = 14'b100000;
parameter    ap_ST_st7_fsm_6 = 14'b1000000;
parameter    ap_ST_st8_fsm_7 = 14'b10000000;
parameter    ap_ST_pp1_stg0_fsm_8 = 14'b100000000;
parameter    ap_ST_st12_fsm_9 = 14'b1000000000;
parameter    ap_ST_st13_fsm_10 = 14'b10000000000;
parameter    ap_ST_st14_fsm_11 = 14'b100000000000;
parameter    ap_ST_st15_fsm_12 = 14'b1000000000000;
parameter    ap_ST_st16_fsm_13 = 14'b10000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_ID_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH = 64;
parameter    C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_USER_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_PROT_VALUE = 0;
parameter    C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE = 3;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_200 = 32'b1000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv9_1FF = 9'b111111111;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv13_1000 = 13'b1000000000000;
parameter    ap_const_lv13_1 = 13'b1;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv56_0 = 56'b00000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv10_200 = 10'b1000000000;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter    C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH = (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH / ap_const_int64_8);
parameter    C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] inputStream_V_TDATA;
input   inputStream_V_TVALID;
output   inputStream_V_TREADY;
output   m_axi_base_ddr_addr_AWVALID;
input   m_axi_base_ddr_addr_AWREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1 : 0] m_axi_base_ddr_addr_AWADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_AWID;
output  [7:0] m_axi_base_ddr_addr_AWLEN;
output  [2:0] m_axi_base_ddr_addr_AWSIZE;
output  [1:0] m_axi_base_ddr_addr_AWBURST;
output  [1:0] m_axi_base_ddr_addr_AWLOCK;
output  [3:0] m_axi_base_ddr_addr_AWCACHE;
output  [2:0] m_axi_base_ddr_addr_AWPROT;
output  [3:0] m_axi_base_ddr_addr_AWQOS;
output  [3:0] m_axi_base_ddr_addr_AWREGION;
output  [C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_AWUSER;
output   m_axi_base_ddr_addr_WVALID;
input   m_axi_base_ddr_addr_WREADY;
output  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1 : 0] m_axi_base_ddr_addr_WDATA;
output  [C_M_AXI_BASE_DDR_ADDR_WSTRB_WIDTH - 1 : 0] m_axi_base_ddr_addr_WSTRB;
output   m_axi_base_ddr_addr_WLAST;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_WID;
output  [C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_WUSER;
output   m_axi_base_ddr_addr_ARVALID;
input   m_axi_base_ddr_addr_ARREADY;
output  [C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH - 1 : 0] m_axi_base_ddr_addr_ARADDR;
output  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_ARID;
output  [7:0] m_axi_base_ddr_addr_ARLEN;
output  [2:0] m_axi_base_ddr_addr_ARSIZE;
output  [1:0] m_axi_base_ddr_addr_ARBURST;
output  [1:0] m_axi_base_ddr_addr_ARLOCK;
output  [3:0] m_axi_base_ddr_addr_ARCACHE;
output  [2:0] m_axi_base_ddr_addr_ARPROT;
output  [3:0] m_axi_base_ddr_addr_ARQOS;
output  [3:0] m_axi_base_ddr_addr_ARREGION;
output  [C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_ARUSER;
input   m_axi_base_ddr_addr_RVALID;
output   m_axi_base_ddr_addr_RREADY;
input  [C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH - 1 : 0] m_axi_base_ddr_addr_RDATA;
input   m_axi_base_ddr_addr_RLAST;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_RID;
input  [C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_RUSER;
input  [1:0] m_axi_base_ddr_addr_RRESP;
input   m_axi_base_ddr_addr_BVALID;
output   m_axi_base_ddr_addr_BREADY;
input  [1:0] m_axi_base_ddr_addr_BRESP;
input  [C_M_AXI_BASE_DDR_ADDR_ID_WIDTH - 1 : 0] m_axi_base_ddr_addr_BID;
input  [C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH - 1 : 0] m_axi_base_ddr_addr_BUSER;
output  [7:0] frame_index_V;
output  [31:0] frame_count;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg inputStream_V_TREADY;
reg[7:0] frame_index_V;
reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm = 14'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_32;
reg    ap_ready;
wire   [31:0] base_address;
wire   [31:0] frame_buffer_dim;
wire   [31:0] frame_buffer_offset;
wire   [7:0] frame_buffer_number;
wire    update_intr;
reg   [7:0] inner_index_V = 8'b00000000;
reg   [31:0] FRAME_OFFSET = 32'b1001011000000000000;
reg   [28:0] BASE_ADDRESS_r = 29'b00000000000000000000000000000;
reg   [31:0] FRAME_BUFFER_DIM_r = 32'b1001011000000000000;
reg   [7:0] FRAME_BUFFER_NUMBER_r = 8'b1000;
reg   [31:0] frame_count_inner = 32'b00000000000000000000000000000000;
wire    axis_to_ddr_writer_AXILiteS_s_axi_U_ap_dummy_ce;
reg    base_ddr_addr_AWVALID;
wire    base_ddr_addr_AWREADY;
wire   [31:0] base_ddr_addr_AWADDR;
wire   [0:0] base_ddr_addr_AWID;
wire   [31:0] base_ddr_addr_AWLEN;
wire   [2:0] base_ddr_addr_AWSIZE;
wire   [1:0] base_ddr_addr_AWBURST;
wire   [1:0] base_ddr_addr_AWLOCK;
wire   [3:0] base_ddr_addr_AWCACHE;
wire   [2:0] base_ddr_addr_AWPROT;
wire   [3:0] base_ddr_addr_AWQOS;
wire   [3:0] base_ddr_addr_AWREGION;
wire   [0:0] base_ddr_addr_AWUSER;
reg    base_ddr_addr_WVALID;
wire    base_ddr_addr_WREADY;
wire   [63:0] base_ddr_addr_WDATA;
wire   [7:0] base_ddr_addr_WSTRB;
wire    base_ddr_addr_WLAST;
wire   [0:0] base_ddr_addr_WID;
wire   [0:0] base_ddr_addr_WUSER;
wire    base_ddr_addr_ARVALID;
wire    base_ddr_addr_ARREADY;
wire   [31:0] base_ddr_addr_ARADDR;
wire   [0:0] base_ddr_addr_ARID;
wire   [31:0] base_ddr_addr_ARLEN;
wire   [2:0] base_ddr_addr_ARSIZE;
wire   [1:0] base_ddr_addr_ARBURST;
wire   [1:0] base_ddr_addr_ARLOCK;
wire   [3:0] base_ddr_addr_ARCACHE;
wire   [2:0] base_ddr_addr_ARPROT;
wire   [3:0] base_ddr_addr_ARQOS;
wire   [3:0] base_ddr_addr_ARREGION;
wire   [0:0] base_ddr_addr_ARUSER;
wire    base_ddr_addr_RVALID;
wire    base_ddr_addr_RREADY;
wire   [63:0] base_ddr_addr_RDATA;
wire    base_ddr_addr_RLAST;
wire   [0:0] base_ddr_addr_RID;
wire   [0:0] base_ddr_addr_RUSER;
wire   [1:0] base_ddr_addr_RRESP;
wire    base_ddr_addr_BVALID;
reg    base_ddr_addr_BREADY;
wire   [1:0] base_ddr_addr_BRESP;
wire   [0:0] base_ddr_addr_BID;
wire   [0:0] base_ddr_addr_BUSER;
wire    axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce;
reg   [9:0] indvar_reg_328;
reg   [7:0] t_V_reg_633;
wire   [0:0] update_intr_read_read_fu_162_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_251;
reg   [31:0] tmp_8_reg_665;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_262;
wire   [31:0] offset_fu_413_p2;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_271;
wire   [0:0] tmp_1_fu_436_p2;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_280;
wire   [31:0] idx_1_fu_442_p2;
reg   [31:0] idx_1_reg_679;
wire   [12:0] indvar_flatten_next_fu_513_p2;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_291;
wire   [0:0] exitcond_flatten_fu_507_p2;
reg    ap_sig_bdd_297;
wire   [9:0] j_mid2_fu_531_p3;
wire   [63:0] temp_2_fu_557_p3;
wire   [3:0] i_1_fu_572_p3;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_314;
reg    ap_sig_ioackin_base_ddr_addr_AWREADY;
wire   [0:0] exitcond2_fu_602_p2;
reg   [0:0] exitcond2_reg_715;
reg    ap_sig_cseq_ST_pp1_stg0_fsm_8;
reg    ap_sig_bdd_327;
reg    ap_reg_ppiten_pp1_it0 = 1'b0;
reg    ap_reg_ppiten_pp1_it1 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond2_reg_715_pp1_it1;
reg    ap_sig_ioackin_base_ddr_addr_WREADY;
reg    ap_reg_ppiten_pp1_it2 = 1'b0;
wire   [9:0] indvar_next_fu_608_p2;
wire   [63:0] buffer_q0;
reg   [63:0] buffer_load_reg_729;
wire   [31:0] offset_1_fu_619_p2;
reg   [31:0] offset_1_reg_734;
reg    ap_sig_cseq_ST_st12_fsm_9;
reg    ap_sig_bdd_365;
wire   [8:0] buffer_address0;
reg    buffer_ce0;
wire   [8:0] buffer_address1;
reg    buffer_ce1;
reg    buffer_we1;
wire   [63:0] buffer_d1;
reg   [31:0] i_op_assign_reg_244;
reg   [28:0] i_op_assign_1_reg_253;
reg   [31:0] offset1_reg_263;
reg    ap_sig_cseq_ST_st16_fsm_13;
reg    ap_sig_bdd_393;
reg   [31:0] idx_reg_273;
reg   [12:0] indvar_flatten_reg_284;
reg   [9:0] j_reg_295;
reg   [63:0] temp_reg_306;
reg   [3:0] i_reg_317;
wire   [63:0] tmp_4_fu_586_p1;
wire   [0:0] ifzero_fu_580_p2;
wire   [63:0] tmp_9_fu_614_p1;
wire  signed [63:0] tmp_fu_591_p1;
reg    ap_reg_ioackin_base_ddr_addr_AWREADY = 1'b0;
reg    ap_reg_ioackin_base_ddr_addr_WREADY = 1'b0;
wire   [7:0] p_tmp_6_fu_476_p3;
wire   [31:0] tmp_7_fu_494_p2;
reg   [7:0] frame_index_V_preg = 8'b00000000;
wire   [31:0] grp_fu_393_p0;
wire   [7:0] grp_fu_393_p1;
wire   [39:0] grp_fu_393_p2;
wire   [31:0] i_op_assign_1_cast_fu_409_p1;
wire   [19:0] tmp_s_fu_422_p4;
wire   [31:0] tmp_3_fu_432_p1;
wire   [8:0] tmp_2_cast_fu_452_p1;
wire   [8:0] tmp_4_cast_fu_462_p1;
wire   [8:0] op2_assign_fu_456_p2;
wire   [0:0] tmp_5_fu_465_p2;
wire   [7:0] tmp_6_fu_471_p2;
wire   [0:0] exitcond5_fu_525_p2;
wire   [9:0] j_s_fu_519_p2;
wire   [55:0] tmp_11_fu_539_p4;
wire   [55:0] temp_1_fu_549_p3;
wire   [3:0] i_op_fu_566_p2;
wire    grp_fu_393_ce;
reg   [13:0] ap_NS_fsm;
wire   [39:0] grp_fu_393_p00;
wire   [39:0] grp_fu_393_p10;
reg    ap_sig_bdd_439;
reg    ap_sig_bdd_231;


axis_to_ddr_writer_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
axis_to_ddr_writer_AXILiteS_s_axi_U(
    .AWVALID( s_axi_AXILiteS_AWVALID ),
    .AWREADY( s_axi_AXILiteS_AWREADY ),
    .AWADDR( s_axi_AXILiteS_AWADDR ),
    .WVALID( s_axi_AXILiteS_WVALID ),
    .WREADY( s_axi_AXILiteS_WREADY ),
    .WDATA( s_axi_AXILiteS_WDATA ),
    .WSTRB( s_axi_AXILiteS_WSTRB ),
    .ARVALID( s_axi_AXILiteS_ARVALID ),
    .ARREADY( s_axi_AXILiteS_ARREADY ),
    .ARADDR( s_axi_AXILiteS_ARADDR ),
    .RVALID( s_axi_AXILiteS_RVALID ),
    .RREADY( s_axi_AXILiteS_RREADY ),
    .RDATA( s_axi_AXILiteS_RDATA ),
    .RRESP( s_axi_AXILiteS_RRESP ),
    .BVALID( s_axi_AXILiteS_BVALID ),
    .BREADY( s_axi_AXILiteS_BREADY ),
    .BRESP( s_axi_AXILiteS_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( axis_to_ddr_writer_AXILiteS_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .base_address( base_address ),
    .frame_buffer_dim( frame_buffer_dim ),
    .frame_buffer_offset( frame_buffer_offset ),
    .frame_buffer_number( frame_buffer_number ),
    .update_intr( update_intr )
);

axis_to_ddr_writer_base_ddr_addr_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BASE_DDR_ADDR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_BASE_DDR_ADDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BASE_DDR_ADDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE ))
axis_to_ddr_writer_base_ddr_addr_m_axi_U(
    .AWVALID( m_axi_base_ddr_addr_AWVALID ),
    .AWREADY( m_axi_base_ddr_addr_AWREADY ),
    .AWADDR( m_axi_base_ddr_addr_AWADDR ),
    .AWID( m_axi_base_ddr_addr_AWID ),
    .AWLEN( m_axi_base_ddr_addr_AWLEN ),
    .AWSIZE( m_axi_base_ddr_addr_AWSIZE ),
    .AWBURST( m_axi_base_ddr_addr_AWBURST ),
    .AWLOCK( m_axi_base_ddr_addr_AWLOCK ),
    .AWCACHE( m_axi_base_ddr_addr_AWCACHE ),
    .AWPROT( m_axi_base_ddr_addr_AWPROT ),
    .AWQOS( m_axi_base_ddr_addr_AWQOS ),
    .AWREGION( m_axi_base_ddr_addr_AWREGION ),
    .AWUSER( m_axi_base_ddr_addr_AWUSER ),
    .WVALID( m_axi_base_ddr_addr_WVALID ),
    .WREADY( m_axi_base_ddr_addr_WREADY ),
    .WDATA( m_axi_base_ddr_addr_WDATA ),
    .WSTRB( m_axi_base_ddr_addr_WSTRB ),
    .WLAST( m_axi_base_ddr_addr_WLAST ),
    .WID( m_axi_base_ddr_addr_WID ),
    .WUSER( m_axi_base_ddr_addr_WUSER ),
    .ARVALID( m_axi_base_ddr_addr_ARVALID ),
    .ARREADY( m_axi_base_ddr_addr_ARREADY ),
    .ARADDR( m_axi_base_ddr_addr_ARADDR ),
    .ARID( m_axi_base_ddr_addr_ARID ),
    .ARLEN( m_axi_base_ddr_addr_ARLEN ),
    .ARSIZE( m_axi_base_ddr_addr_ARSIZE ),
    .ARBURST( m_axi_base_ddr_addr_ARBURST ),
    .ARLOCK( m_axi_base_ddr_addr_ARLOCK ),
    .ARCACHE( m_axi_base_ddr_addr_ARCACHE ),
    .ARPROT( m_axi_base_ddr_addr_ARPROT ),
    .ARQOS( m_axi_base_ddr_addr_ARQOS ),
    .ARREGION( m_axi_base_ddr_addr_ARREGION ),
    .ARUSER( m_axi_base_ddr_addr_ARUSER ),
    .RVALID( m_axi_base_ddr_addr_RVALID ),
    .RREADY( m_axi_base_ddr_addr_RREADY ),
    .RDATA( m_axi_base_ddr_addr_RDATA ),
    .RLAST( m_axi_base_ddr_addr_RLAST ),
    .RID( m_axi_base_ddr_addr_RID ),
    .RUSER( m_axi_base_ddr_addr_RUSER ),
    .RRESP( m_axi_base_ddr_addr_RRESP ),
    .BVALID( m_axi_base_ddr_addr_BVALID ),
    .BREADY( m_axi_base_ddr_addr_BREADY ),
    .BRESP( m_axi_base_ddr_addr_BRESP ),
    .BID( m_axi_base_ddr_addr_BID ),
    .BUSER( m_axi_base_ddr_addr_BUSER ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce ),
    .I_ARVALID( base_ddr_addr_ARVALID ),
    .I_ARREADY( base_ddr_addr_ARREADY ),
    .I_ARADDR( base_ddr_addr_ARADDR ),
    .I_ARID( base_ddr_addr_ARID ),
    .I_ARLEN( base_ddr_addr_ARLEN ),
    .I_ARSIZE( base_ddr_addr_ARSIZE ),
    .I_ARLOCK( base_ddr_addr_ARLOCK ),
    .I_ARCACHE( base_ddr_addr_ARCACHE ),
    .I_ARQOS( base_ddr_addr_ARQOS ),
    .I_ARPROT( base_ddr_addr_ARPROT ),
    .I_ARUSER( base_ddr_addr_ARUSER ),
    .I_ARBURST( base_ddr_addr_ARBURST ),
    .I_ARREGION( base_ddr_addr_ARREGION ),
    .I_RVALID( base_ddr_addr_RVALID ),
    .I_RREADY( base_ddr_addr_RREADY ),
    .I_RDATA( base_ddr_addr_RDATA ),
    .I_RID( base_ddr_addr_RID ),
    .I_RUSER( base_ddr_addr_RUSER ),
    .I_RRESP( base_ddr_addr_RRESP ),
    .I_RLAST( base_ddr_addr_RLAST ),
    .I_AWVALID( base_ddr_addr_AWVALID ),
    .I_AWREADY( base_ddr_addr_AWREADY ),
    .I_AWADDR( base_ddr_addr_AWADDR ),
    .I_AWID( base_ddr_addr_AWID ),
    .I_AWLEN( base_ddr_addr_AWLEN ),
    .I_AWSIZE( base_ddr_addr_AWSIZE ),
    .I_AWLOCK( base_ddr_addr_AWLOCK ),
    .I_AWCACHE( base_ddr_addr_AWCACHE ),
    .I_AWQOS( base_ddr_addr_AWQOS ),
    .I_AWPROT( base_ddr_addr_AWPROT ),
    .I_AWUSER( base_ddr_addr_AWUSER ),
    .I_AWBURST( base_ddr_addr_AWBURST ),
    .I_AWREGION( base_ddr_addr_AWREGION ),
    .I_WVALID( base_ddr_addr_WVALID ),
    .I_WREADY( base_ddr_addr_WREADY ),
    .I_WDATA( base_ddr_addr_WDATA ),
    .I_WID( base_ddr_addr_WID ),
    .I_WUSER( base_ddr_addr_WUSER ),
    .I_WLAST( base_ddr_addr_WLAST ),
    .I_WSTRB( base_ddr_addr_WSTRB ),
    .I_BVALID( base_ddr_addr_BVALID ),
    .I_BREADY( base_ddr_addr_BREADY ),
    .I_BRESP( base_ddr_addr_BRESP ),
    .I_BID( base_ddr_addr_BID ),
    .I_BUSER( base_ddr_addr_BUSER )
);

axis_to_ddr_writer_buffer #(
    .DataWidth( 64 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
buffer_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .address0( buffer_address0 ),
    .ce0( buffer_ce0 ),
    .q0( buffer_q0 ),
    .address1( buffer_address1 ),
    .ce1( buffer_ce1 ),
    .we1( buffer_we1 ),
    .d1( buffer_d1 )
);

axis_to_ddr_writer_mul_32ns_8ns_40_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 40 ))
axis_to_ddr_writer_mul_32ns_8ns_40_3_U0(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( grp_fu_393_p0 ),
    .din1( grp_fu_393_p1 ),
    .ce( grp_fu_393_ce ),
    .dout( grp_fu_393_p2 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_base_ddr_addr_AWREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_base_ddr_addr_AWREADY <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_AWREADY)) begin
                ap_reg_ioackin_base_ddr_addr_AWREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == base_ddr_addr_AWREADY)) begin
                ap_reg_ioackin_base_ddr_addr_AWREADY <= ap_const_logic_1;
            end
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_base_ddr_addr_WREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_base_ddr_addr_WREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_439) begin
            if (~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2))) begin
                ap_reg_ioackin_base_ddr_addr_WREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == base_ddr_addr_WREADY)) begin
                ap_reg_ioackin_base_ddr_addr_WREADY <= ap_const_logic_1;
            end
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond2_fu_602_p2))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_AWREADY))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & (ap_const_lv1_0 == exitcond2_fu_602_p2))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_AWREADY)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond2_fu_602_p2)))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp1_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
    end else begin
        if (~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2))) begin
            ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_AWREADY))) begin
            ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_frame_count_inner
    if (ap_rst_n_inv == 1'b1) begin
        frame_count_inner <= ap_const_lv32_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == tmp_1_fu_436_p2))) begin
            frame_count_inner <= tmp_7_fu_494_p2;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_frame_index_V_preg
    if (ap_rst_n_inv == 1'b1) begin
        frame_index_V_preg <= ap_const_lv8_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            frame_index_V_preg <= inner_index_V;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_inner_index_V
    if (ap_rst_n_inv == 1'b1) begin
        inner_index_V <= ap_const_lv8_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == tmp_1_fu_436_p2))) begin
            inner_index_V <= p_tmp_6_fu_476_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_sig_bdd_231) begin
        if ((update_intr_read_read_fu_162_p2 == ap_const_lv1_0)) begin
            i_op_assign_1_reg_253 <= BASE_ADDRESS_r;
        end else if (~(update_intr_read_read_fu_162_p2 == ap_const_lv1_0)) begin
            i_op_assign_1_reg_253 <= {{base_address[ap_const_lv32_1F : ap_const_lv32_3]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_sig_bdd_231) begin
        if ((update_intr_read_read_fu_162_p2 == ap_const_lv1_0)) begin
            i_op_assign_reg_244 <= FRAME_OFFSET;
        end else if (~(update_intr_read_read_fu_162_p2 == ap_const_lv1_0)) begin
            i_op_assign_reg_244 <= frame_buffer_offset;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == tmp_1_fu_436_p2))) begin
        i_reg_317 <= ap_const_lv4_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == exitcond_flatten_fu_507_p2) & ~ap_sig_bdd_297)) begin
        i_reg_317 <= i_1_fu_572_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_13) & ~(base_ddr_addr_BVALID == ap_const_logic_0))) begin
        idx_reg_273 <= idx_1_reg_679;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        idx_reg_273 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == tmp_1_fu_436_p2))) begin
        indvar_flatten_reg_284 <= ap_const_lv13_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == exitcond_flatten_fu_507_p2) & ~ap_sig_bdd_297)) begin
        indvar_flatten_reg_284 <= indvar_flatten_next_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_AWREADY))) begin
        indvar_reg_328 <= ap_const_lv10_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & (ap_const_lv1_0 == exitcond2_fu_602_p2))) begin
        indvar_reg_328 <= indvar_next_fu_608_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == tmp_1_fu_436_p2))) begin
        j_reg_295 <= ap_const_lv10_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == exitcond_flatten_fu_507_p2) & ~ap_sig_bdd_297)) begin
        j_reg_295 <= j_mid2_fu_531_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_13) & ~(base_ddr_addr_BVALID == ap_const_logic_0))) begin
        offset1_reg_263 <= offset_1_reg_734;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        offset1_reg_263 <= offset_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == tmp_1_fu_436_p2))) begin
        temp_reg_306 <= ap_const_lv64_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == exitcond_flatten_fu_507_p2) & ~ap_sig_bdd_297)) begin
        temp_reg_306 <= temp_2_fu_557_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(update_intr_read_read_fu_162_p2 == ap_const_lv1_0))) begin
        BASE_ADDRESS_r <= {{base_address[ap_const_lv32_1F : ap_const_lv32_3]}};
        FRAME_BUFFER_DIM_r <= frame_buffer_dim;
        FRAME_BUFFER_NUMBER_r <= frame_buffer_number;
        FRAME_OFFSET <= frame_buffer_offset;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)))) begin
        ap_reg_ppstg_exitcond2_reg_715_pp1_it1 <= exitcond2_reg_715;
        exitcond2_reg_715 <= exitcond2_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & (ap_const_lv1_0 == exitcond2_reg_715))) begin
        buffer_load_reg_729 <= buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        idx_1_reg_679 <= idx_1_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_9)) begin
        offset_1_reg_734 <= offset_1_fu_619_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        t_V_reg_633 <= inner_index_V;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        tmp_8_reg_665 <= {{grp_fu_393_p2[ap_const_lv32_22 : ap_const_lv32_3]}};
    end
end

always @ (tmp_1_fu_436_p2 or ap_sig_cseq_ST_st6_fsm_5) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == tmp_1_fu_436_p2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (tmp_1_fu_436_p2 or ap_sig_cseq_ST_st6_fsm_5) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == tmp_1_fu_436_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_327) begin
    if (ap_sig_bdd_327) begin
        ap_sig_cseq_ST_pp1_stg0_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp1_stg0_fsm_8 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_365) begin
    if (ap_sig_bdd_365) begin
        ap_sig_cseq_ST_st12_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_9 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_393) begin
    if (ap_sig_bdd_393) begin
        ap_sig_cseq_ST_st16_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_13 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_32) begin
    if (ap_sig_bdd_32) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_251) begin
    if (ap_sig_bdd_251) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_262) begin
    if (ap_sig_bdd_262) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_271) begin
    if (ap_sig_bdd_271) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_280) begin
    if (ap_sig_bdd_280) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_291) begin
    if (ap_sig_bdd_291) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_314) begin
    if (ap_sig_bdd_314) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

always @ (base_ddr_addr_AWREADY or ap_reg_ioackin_base_ddr_addr_AWREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_base_ddr_addr_AWREADY)) begin
        ap_sig_ioackin_base_ddr_addr_AWREADY = base_ddr_addr_AWREADY;
    end else begin
        ap_sig_ioackin_base_ddr_addr_AWREADY = ap_const_logic_1;
    end
end

always @ (base_ddr_addr_WREADY or ap_reg_ioackin_base_ddr_addr_WREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_base_ddr_addr_WREADY)) begin
        ap_sig_ioackin_base_ddr_addr_WREADY = base_ddr_addr_WREADY;
    end else begin
        ap_sig_ioackin_base_ddr_addr_WREADY = ap_const_logic_1;
    end
end

always @ (ap_sig_cseq_ST_st8_fsm_7 or ap_reg_ioackin_base_ddr_addr_AWREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & (ap_const_logic_0 == ap_reg_ioackin_base_ddr_addr_AWREADY))) begin
        base_ddr_addr_AWVALID = ap_const_logic_1;
    end else begin
        base_ddr_addr_AWVALID = ap_const_logic_0;
    end
end

always @ (base_ddr_addr_BVALID or ap_sig_cseq_ST_st16_fsm_13) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_13) & ~(base_ddr_addr_BVALID == ap_const_logic_0))) begin
        base_ddr_addr_BREADY = ap_const_logic_1;
    end else begin
        base_ddr_addr_BREADY = ap_const_logic_0;
    end
end

always @ (ap_reg_ppstg_exitcond2_reg_715_pp1_it1 or ap_reg_ppiten_pp1_it2 or ap_reg_ioackin_base_ddr_addr_WREADY) begin
    if (((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & (ap_const_logic_0 == ap_reg_ioackin_base_ddr_addr_WREADY))) begin
        base_ddr_addr_WVALID = ap_const_logic_1;
    end else begin
        base_ddr_addr_WVALID = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp1_stg0_fsm_8 or ap_reg_ppiten_pp1_it0 or ap_reg_ppstg_exitcond2_reg_715_pp1_it1 or ap_sig_ioackin_base_ddr_addr_WREADY or ap_reg_ppiten_pp1_it2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_8) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)))) begin
        buffer_ce0 = ap_const_logic_1;
    end else begin
        buffer_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st7_fsm_6 or ap_sig_bdd_297) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~ap_sig_bdd_297)) begin
        buffer_ce1 = ap_const_logic_1;
    end else begin
        buffer_ce1 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st7_fsm_6 or exitcond_flatten_fu_507_p2 or ap_sig_bdd_297 or ifzero_fu_580_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == exitcond_flatten_fu_507_p2) & ~ap_sig_bdd_297 & ~(ap_const_lv1_0 == ifzero_fu_580_p2))) begin
        buffer_we1 = ap_const_logic_1;
    end else begin
        buffer_we1 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or inner_index_V or frame_index_V_preg) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        frame_index_V = inner_index_V;
    end else begin
        frame_index_V = frame_index_V_preg;
    end
end

always @ (ap_sig_cseq_ST_st7_fsm_6 or exitcond_flatten_fu_507_p2 or ap_sig_bdd_297) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == exitcond_flatten_fu_507_p2) & ~ap_sig_bdd_297)) begin
        inputStream_V_TREADY = ap_const_logic_1;
    end else begin
        inputStream_V_TREADY = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or base_ddr_addr_BVALID or tmp_1_fu_436_p2 or exitcond_flatten_fu_507_p2 or ap_sig_bdd_297 or ap_sig_ioackin_base_ddr_addr_AWREADY or exitcond2_fu_602_p2 or ap_reg_ppiten_pp1_it0 or ap_reg_ppiten_pp1_it1 or ap_reg_ppstg_exitcond2_reg_715_pp1_it1 or ap_sig_ioackin_base_ddr_addr_WREADY or ap_reg_ppiten_pp1_it2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            if ((ap_const_lv1_0 == tmp_1_fu_436_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : 
        begin
            if (((ap_const_lv1_0 == exitcond_flatten_fu_507_p2) & ~ap_sig_bdd_297)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else if ((~ap_sig_bdd_297 & ~(ap_const_lv1_0 == exitcond_flatten_fu_507_p2))) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st8_fsm_7 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_AWREADY)) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_pp1_stg0_fsm_8 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond2_fu_602_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_8;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_0 == ap_sig_ioackin_base_ddr_addr_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) & ~(ap_const_lv1_0 == exitcond2_fu_602_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_st12_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_8;
            end
        end
        ap_ST_st12_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_10;
        end
        ap_ST_st13_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_11;
        end
        ap_ST_st14_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_12;
        end
        ap_ST_st15_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_13;
        end
        ap_ST_st16_fsm_13 : 
        begin
            if (~(base_ddr_addr_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st16_fsm_13;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end


always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    ap_sig_bdd_231 = ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_251 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_262 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_271 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_280 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_291 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end


always @ (inputStream_V_TVALID or exitcond_flatten_fu_507_p2) begin
    ap_sig_bdd_297 = ((inputStream_V_TVALID == ap_const_logic_0) & (ap_const_lv1_0 == exitcond_flatten_fu_507_p2));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_314 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_32 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_327 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_365 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_393 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end


always @ (ap_reg_ppstg_exitcond2_reg_715_pp1_it1 or ap_reg_ppiten_pp1_it2) begin
    ap_sig_bdd_439 = ((ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_715_pp1_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it2));
end

assign axis_to_ddr_writer_AXILiteS_s_axi_U_ap_dummy_ce = ap_const_logic_1;

assign axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce = ap_const_logic_1;

assign base_ddr_addr_ARADDR = ap_const_lv32_0;

assign base_ddr_addr_ARBURST = ap_const_lv2_0;

assign base_ddr_addr_ARCACHE = ap_const_lv4_0;

assign base_ddr_addr_ARID = ap_const_lv1_0;

assign base_ddr_addr_ARLEN = ap_const_lv32_0;

assign base_ddr_addr_ARLOCK = ap_const_lv2_0;

assign base_ddr_addr_ARPROT = ap_const_lv3_0;

assign base_ddr_addr_ARQOS = ap_const_lv4_0;

assign base_ddr_addr_ARREGION = ap_const_lv4_0;

assign base_ddr_addr_ARSIZE = ap_const_lv3_0;

assign base_ddr_addr_ARUSER = ap_const_lv1_0;

assign base_ddr_addr_ARVALID = ap_const_logic_0;

assign base_ddr_addr_AWADDR = tmp_fu_591_p1;

assign base_ddr_addr_AWBURST = ap_const_lv2_0;

assign base_ddr_addr_AWCACHE = ap_const_lv4_0;

assign base_ddr_addr_AWID = ap_const_lv1_0;

assign base_ddr_addr_AWLEN = ap_const_lv32_200;

assign base_ddr_addr_AWLOCK = ap_const_lv2_0;

assign base_ddr_addr_AWPROT = ap_const_lv3_0;

assign base_ddr_addr_AWQOS = ap_const_lv4_0;

assign base_ddr_addr_AWREGION = ap_const_lv4_0;

assign base_ddr_addr_AWSIZE = ap_const_lv3_0;

assign base_ddr_addr_AWUSER = ap_const_lv1_0;

assign base_ddr_addr_RREADY = ap_const_logic_0;

assign base_ddr_addr_WDATA = buffer_load_reg_729;

assign base_ddr_addr_WID = ap_const_lv1_0;

assign base_ddr_addr_WLAST = ap_const_logic_0;

assign base_ddr_addr_WSTRB = ap_const_lv8_FF;

assign base_ddr_addr_WUSER = ap_const_lv1_0;

assign buffer_address0 = tmp_9_fu_614_p1;

assign buffer_address1 = tmp_4_fu_586_p1;

assign buffer_d1 = {{inputStream_V_TDATA}, {temp_1_fu_549_p3}};

assign exitcond2_fu_602_p2 = (indvar_reg_328 == ap_const_lv10_200? 1'b1: 1'b0);

assign exitcond5_fu_525_p2 = (i_reg_317 == ap_const_lv4_8? 1'b1: 1'b0);

assign exitcond_flatten_fu_507_p2 = (indvar_flatten_reg_284 == ap_const_lv13_1000? 1'b1: 1'b0);

assign frame_count = (frame_count_inner + ap_const_lv32_1);

assign grp_fu_393_ce = ap_const_logic_1;

assign grp_fu_393_p0 = grp_fu_393_p00;

assign grp_fu_393_p00 = i_op_assign_reg_244;

assign grp_fu_393_p1 = grp_fu_393_p10;

assign grp_fu_393_p10 = t_V_reg_633;

assign i_1_fu_572_p3 = ((exitcond5_fu_525_p2[0:0] === 1'b1) ? ap_const_lv4_1 : i_op_fu_566_p2);

assign i_op_assign_1_cast_fu_409_p1 = i_op_assign_1_reg_253;

assign i_op_fu_566_p2 = (i_reg_317 + ap_const_lv4_1);

assign idx_1_fu_442_p2 = (idx_reg_273 + ap_const_lv32_1);

assign ifzero_fu_580_p2 = (i_1_fu_572_p3 == ap_const_lv4_8? 1'b1: 1'b0);

assign indvar_flatten_next_fu_513_p2 = (indvar_flatten_reg_284 + ap_const_lv13_1);

assign indvar_next_fu_608_p2 = (indvar_reg_328 + ap_const_lv10_1);

assign j_mid2_fu_531_p3 = ((exitcond5_fu_525_p2[0:0] === 1'b1) ? j_s_fu_519_p2 : j_reg_295);

assign j_s_fu_519_p2 = (j_reg_295 + ap_const_lv10_1);

assign offset_1_fu_619_p2 = (offset1_reg_263 + ap_const_lv32_200);

assign offset_fu_413_p2 = (tmp_8_reg_665 + i_op_assign_1_cast_fu_409_p1);

assign op2_assign_fu_456_p2 = ($signed(tmp_2_cast_fu_452_p1) + $signed(ap_const_lv9_1FF));

assign p_tmp_6_fu_476_p3 = ((tmp_5_fu_465_p2[0:0] === 1'b1) ? ap_const_lv8_0 : tmp_6_fu_471_p2);

assign temp_1_fu_549_p3 = ((exitcond5_fu_525_p2[0:0] === 1'b1) ? ap_const_lv56_0 : tmp_11_fu_539_p4);

assign temp_2_fu_557_p3 = {{inputStream_V_TDATA}, {temp_1_fu_549_p3}};

assign tmp_11_fu_539_p4 = {{temp_reg_306[ap_const_lv32_3F : ap_const_lv32_8]}};

assign tmp_1_fu_436_p2 = (idx_reg_273 < tmp_3_fu_432_p1? 1'b1: 1'b0);

assign tmp_2_cast_fu_452_p1 = FRAME_BUFFER_NUMBER_r;

assign tmp_3_fu_432_p1 = tmp_s_fu_422_p4;

assign tmp_4_cast_fu_462_p1 = t_V_reg_633;

assign tmp_4_fu_586_p1 = j_mid2_fu_531_p3;

assign tmp_5_fu_465_p2 = (tmp_4_cast_fu_462_p1 == op2_assign_fu_456_p2? 1'b1: 1'b0);

assign tmp_6_fu_471_p2 = (t_V_reg_633 + ap_const_lv8_1);

assign tmp_7_fu_494_p2 = (frame_count_inner + ap_const_lv32_1);

assign tmp_9_fu_614_p1 = indvar_reg_328;

assign tmp_fu_591_p1 = $signed(offset1_reg_263);

assign tmp_s_fu_422_p4 = {{FRAME_BUFFER_DIM_r[ap_const_lv32_1F : ap_const_lv32_C]}};

assign update_intr_read_read_fu_162_p2 = update_intr;


endmodule //axis_to_ddr_writer

