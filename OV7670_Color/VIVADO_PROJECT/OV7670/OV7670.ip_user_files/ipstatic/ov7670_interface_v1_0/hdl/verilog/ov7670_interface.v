// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ov7670_interface,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.011000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=66,HLS_SYN_LUT=185}" *)

module ov7670_interface (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_in_V,
        href_V,
        vsync_V,
        data_out_V,
        line_valid_V,
        frame_valid_V
);

parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_1E0 = 32'b111100000;
parameter    ap_const_lv32_500 = 32'b10100000000;
parameter    ap_const_lv32_1 = 32'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] data_in_V;
input  [0:0] href_V;
input  [0:0] vsync_V;
output  [7:0] data_out_V;
output  [0:0] line_valid_V;
output  [0:0] frame_valid_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] data_out_V;
reg[0:0] line_valid_V;
reg[0:0] frame_valid_V;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_16;
reg   [31:0] count_lines;
reg   [0:0] first;
reg   [31:0] count_readings;
wire   [0:0] brmerge_fu_113_p2;
wire   [0:0] or_cond_fu_137_p2;
wire   [0:0] or_cond1_fu_149_p2;
wire   [31:0] tmp_5_fu_177_p2;
wire   [0:0] href_V_read_read_fu_60_p2;
wire   [0:0] tmp_4_fu_165_p2;
wire   [31:0] tmp_3_fu_189_p2;
wire   [0:0] p_not1_fu_107_p2;
wire   [0:0] tmp_1_fu_131_p2;
wire   [0:0] p_not_fu_125_p2;
wire   [0:0] tmp_2_fu_143_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_125;
reg    ap_sig_128;
reg    ap_sig_60;
reg    ap_sig_131;
reg    ap_sig_75;
reg    ap_sig_65;
reg    ap_sig_35;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'b1;
#0 count_lines = 32'b00000000000000000000000000000000;
#0 first = 1'b1;
#0 count_readings = 32'b00000000000000000000000000000000;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        count_lines <= ap_const_lv32_0;
    end else begin
        if (ap_sig_60) begin
            if (ap_sig_128) begin
                count_lines <= tmp_5_fu_177_p2;
            end else if (ap_sig_125) begin
                count_lines <= ap_const_lv32_0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        count_readings <= ap_const_lv32_0;
    end else begin
        if (ap_sig_75) begin
            if (~(1'b0 == href_V_read_read_fu_60_p2)) begin
                count_readings <= tmp_3_fu_189_p2;
            end else if (ap_sig_131) begin
                count_readings <= ap_const_lv32_0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        first <= 1'b1;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(brmerge_fu_113_p2 == 1'b0))) begin
            first <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_16) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_35) begin
        if (ap_sig_65) begin
            data_out_V = data_in_V;
        end else if ((brmerge_fu_113_p2 == 1'b0)) begin
            data_out_V = ap_const_lv8_0;
        end else begin
            data_out_V = 'bx;
        end
    end else begin
        data_out_V = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(brmerge_fu_113_p2 == 1'b0) & ~(1'b0 == or_cond_fu_137_p2))) begin
        frame_valid_V = 1'b1;
    end else if ((((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & (brmerge_fu_113_p2 == 1'b0)) | ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(brmerge_fu_113_p2 == 1'b0) & (1'b0 == or_cond_fu_137_p2)))) begin
        frame_valid_V = 1'b0;
    end else begin
        frame_valid_V = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(brmerge_fu_113_p2 == 1'b0) & ~(1'b0 == or_cond_fu_137_p2) & ~(1'b0 == href_V_read_read_fu_60_p2))) begin
        line_valid_V = 1'b1;
    end else if ((((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & (brmerge_fu_113_p2 == 1'b0)) | ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(brmerge_fu_113_p2 == 1'b0) & ~(1'b0 == or_cond_fu_137_p2) & (1'b0 == href_V_read_read_fu_60_p2)))) begin
        line_valid_V = 1'b0;
    end else begin
        line_valid_V = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_125 = ((1'b0 == or_cond_fu_137_p2) & (1'b0 == or_cond1_fu_149_p2));
end

always @ (*) begin
    ap_sig_128 = (~(1'b0 == or_cond_fu_137_p2) & (1'b0 == href_V_read_read_fu_60_p2) & ~(1'b0 == tmp_4_fu_165_p2));
end

always @ (*) begin
    ap_sig_131 = ((1'b0 == href_V_read_read_fu_60_p2) & ~(1'b0 == tmp_4_fu_165_p2));
end

always @ (*) begin
    ap_sig_16 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_35 = ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0));
end

always @ (*) begin
    ap_sig_60 = ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(brmerge_fu_113_p2 == 1'b0));
end

always @ (*) begin
    ap_sig_65 = (~(brmerge_fu_113_p2 == 1'b0) & ~(1'b0 == or_cond_fu_137_p2) & ~(1'b0 == href_V_read_read_fu_60_p2));
end

always @ (*) begin
    ap_sig_75 = ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(brmerge_fu_113_p2 == 1'b0) & ~(1'b0 == or_cond_fu_137_p2));
end

assign brmerge_fu_113_p2 = (vsync_V | p_not1_fu_107_p2);

assign href_V_read_read_fu_60_p2 = href_V;

assign or_cond1_fu_149_p2 = (tmp_2_fu_143_p2 & p_not_fu_125_p2);

assign or_cond_fu_137_p2 = (tmp_1_fu_131_p2 & p_not_fu_125_p2);

assign p_not1_fu_107_p2 = (first ^ 1'b1);

assign p_not_fu_125_p2 = (vsync_V ^ 1'b1);

assign tmp_1_fu_131_p2 = ((count_lines < ap_const_lv32_1E0) ? 1'b1 : 1'b0);

assign tmp_2_fu_143_p2 = ((count_lines == ap_const_lv32_1E0) ? 1'b1 : 1'b0);

assign tmp_3_fu_189_p2 = (count_readings + ap_const_lv32_1);

assign tmp_4_fu_165_p2 = ((count_readings == ap_const_lv32_500) ? 1'b1 : 1'b0);

assign tmp_5_fu_177_p2 = (count_lines + ap_const_lv32_1);

endmodule //ov7670_interface
