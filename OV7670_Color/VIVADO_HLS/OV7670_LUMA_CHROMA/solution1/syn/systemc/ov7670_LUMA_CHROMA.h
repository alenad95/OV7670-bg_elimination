// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ov7670_LUMA_CHROMA_HH_
#define _ov7670_LUMA_CHROMA_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct ov7670_LUMA_CHROMA : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > inStream_V_V_TDATA;
    sc_in< sc_logic > inStream_V_V_TVALID;
    sc_out< sc_logic > inStream_V_V_TREADY;
    sc_out< sc_lv<8> > outStream_grayscale_V_V_TDATA;
    sc_out< sc_logic > outStream_grayscale_V_V_TVALID;
    sc_in< sc_logic > outStream_grayscale_V_V_TREADY;
    sc_in< sc_logic > enable_raw_stream;
    sc_out< sc_lv<8> > outStream_LUMA_V_V_TDATA;
    sc_out< sc_logic > outStream_LUMA_V_V_TVALID;
    sc_in< sc_logic > outStream_LUMA_V_V_TREADY;
    sc_out< sc_lv<8> > outStream_CHROMA_V_V_TDATA;
    sc_out< sc_logic > outStream_CHROMA_V_V_TVALID;
    sc_in< sc_logic > outStream_CHROMA_V_V_TREADY;


    // Module declarations
    ov7670_LUMA_CHROMA(sc_module_name name);
    SC_HAS_PROCESS(ov7670_LUMA_CHROMA);

    ~ov7670_LUMA_CHROMA();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_18;
    sc_signal< sc_lv<1> > grayscale_valid;
    sc_signal< sc_logic > inStream_V_V_TDATA_blk_n;
    sc_signal< sc_logic > outStream_grayscale_V_V_TDATA_blk_n;
    sc_signal< sc_lv<1> > grayscale_valid_load_load_fu_76_p1;
    sc_signal< sc_logic > outStream_LUMA_V_V_TDATA_blk_n;
    sc_signal< sc_lv<1> > enable_raw_stream_read_read_fu_40_p2;
    sc_signal< sc_logic > outStream_CHROMA_V_V_TDATA_blk_n;
    sc_signal< sc_lv<1> > tmp_6_fu_80_p2;
    sc_signal< bool > ap_sig_59;
    sc_signal< sc_logic > ap_sig_ioackin_outStream_CHROMA_V_V_TREADY;
    sc_signal< sc_logic > ap_sig_ioackin_outStream_grayscale_V_V_TREADY;
    sc_signal< sc_logic > ap_sig_ioackin_outStream_LUMA_V_V_TREADY;
    sc_signal< sc_logic > ap_reg_ioackin_outStream_CHROMA_V_V_TREADY;
    sc_signal< sc_logic > ap_reg_ioackin_outStream_grayscale_V_V_TREADY;
    sc_signal< sc_logic > ap_reg_ioackin_outStream_LUMA_V_V_TREADY;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< bool > ap_sig_116;
    sc_signal< bool > ap_sig_55;
    sc_signal< bool > ap_sig_119;
    sc_signal< bool > ap_sig_52;
    sc_signal< bool > ap_sig_122;
    sc_signal< bool > ap_sig_46;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_st1_fsm_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_116();
    void thread_ap_sig_119();
    void thread_ap_sig_122();
    void thread_ap_sig_18();
    void thread_ap_sig_46();
    void thread_ap_sig_52();
    void thread_ap_sig_55();
    void thread_ap_sig_59();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_ioackin_outStream_CHROMA_V_V_TREADY();
    void thread_ap_sig_ioackin_outStream_LUMA_V_V_TREADY();
    void thread_ap_sig_ioackin_outStream_grayscale_V_V_TREADY();
    void thread_enable_raw_stream_read_read_fu_40_p2();
    void thread_grayscale_valid_load_load_fu_76_p1();
    void thread_inStream_V_V_TDATA_blk_n();
    void thread_inStream_V_V_TREADY();
    void thread_outStream_CHROMA_V_V_TDATA();
    void thread_outStream_CHROMA_V_V_TDATA_blk_n();
    void thread_outStream_CHROMA_V_V_TVALID();
    void thread_outStream_LUMA_V_V_TDATA();
    void thread_outStream_LUMA_V_V_TDATA_blk_n();
    void thread_outStream_LUMA_V_V_TVALID();
    void thread_outStream_grayscale_V_V_TDATA();
    void thread_outStream_grayscale_V_V_TDATA_blk_n();
    void thread_outStream_grayscale_V_V_TVALID();
    void thread_tmp_6_fu_80_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
