// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ov7670_grayscale,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.370000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3,HLS_SYN_LUT=6}" *)

module ov7670_grayscale (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inStream_V_V_TDATA,
        inStream_V_V_TVALID,
        inStream_V_V_TREADY,
        outStream_V_V_TDATA,
        outStream_V_V_TVALID,
        outStream_V_V_TREADY
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] inStream_V_V_TDATA;
input   inStream_V_V_TVALID;
output   inStream_V_V_TREADY;
output  [7:0] outStream_V_V_TDATA;
output   outStream_V_V_TVALID;
input   outStream_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inStream_V_V_TREADY;
reg outStream_V_V_TVALID;
reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm = 1'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_19;
reg   [0:0] grayscale_valid = 1'b0;
wire   [0:0] tmp_3_fu_48_p2;
reg    ap_sig_bdd_38;
wire   [0:0] grayscale_valid_load_load_fu_44_p1;
reg    ap_sig_ioackin_outStream_V_V_TREADY;
reg    ap_reg_ioackin_outStream_V_V_TREADY = 1'b0;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_bdd_72;
reg    ap_sig_bdd_71;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_outStream_V_V_TREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_outStream_V_V_TREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_71) begin
            if (~(ap_sig_bdd_38 | (~(ap_const_lv1_0 == grayscale_valid_load_load_fu_44_p1) & (ap_const_logic_0 == ap_sig_ioackin_outStream_V_V_TREADY)))) begin
                ap_reg_ioackin_outStream_V_V_TREADY <= ap_const_logic_0;
            end else if (ap_sig_bdd_72) begin
                ap_reg_ioackin_outStream_V_V_TREADY <= ap_const_logic_1;
            end
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_grayscale_valid
    if (ap_rst_n_inv == 1'b1) begin
        grayscale_valid <= ap_const_lv1_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_sig_bdd_38 | (~(ap_const_lv1_0 == grayscale_valid_load_load_fu_44_p1) & (ap_const_logic_0 == ap_sig_ioackin_outStream_V_V_TREADY))))) begin
            grayscale_valid <= tmp_3_fu_48_p2;
        end
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_38 or grayscale_valid_load_load_fu_44_p1 or ap_sig_ioackin_outStream_V_V_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_sig_bdd_38 | (~(ap_const_lv1_0 == grayscale_valid_load_load_fu_44_p1) & (ap_const_logic_0 == ap_sig_ioackin_outStream_V_V_TREADY))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_38 or grayscale_valid_load_load_fu_44_p1 or ap_sig_ioackin_outStream_V_V_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_sig_bdd_38 | (~(ap_const_lv1_0 == grayscale_valid_load_load_fu_44_p1) & (ap_const_logic_0 == ap_sig_ioackin_outStream_V_V_TREADY))))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_19) begin
    if (ap_sig_bdd_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (outStream_V_V_TREADY or ap_reg_ioackin_outStream_V_V_TREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_outStream_V_V_TREADY)) begin
        ap_sig_ioackin_outStream_V_V_TREADY = outStream_V_V_TREADY;
    end else begin
        ap_sig_ioackin_outStream_V_V_TREADY = ap_const_logic_1;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_38 or grayscale_valid_load_load_fu_44_p1 or ap_sig_ioackin_outStream_V_V_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_sig_bdd_38 | (~(ap_const_lv1_0 == grayscale_valid_load_load_fu_44_p1) & (ap_const_logic_0 == ap_sig_ioackin_outStream_V_V_TREADY))))) begin
        inStream_V_V_TREADY = ap_const_logic_1;
    end else begin
        inStream_V_V_TREADY = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_38 or grayscale_valid_load_load_fu_44_p1 or ap_reg_ioackin_outStream_V_V_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == grayscale_valid_load_load_fu_44_p1) & ~ap_sig_bdd_38 & (ap_const_logic_0 == ap_reg_ioackin_outStream_V_V_TREADY))) begin
        outStream_V_V_TVALID = ap_const_logic_1;
    end else begin
        outStream_V_V_TVALID = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or ap_sig_bdd_38 or grayscale_valid_load_load_fu_44_p1 or ap_sig_ioackin_outStream_V_V_TREADY) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_19 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_start or inStream_V_V_TVALID) begin
    ap_sig_bdd_38 = ((inStream_V_V_TVALID == ap_const_logic_0) | (ap_start == ap_const_logic_0));
end


always @ (ap_sig_cseq_ST_st1_fsm_0 or grayscale_valid_load_load_fu_44_p1) begin
    ap_sig_bdd_71 = ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == grayscale_valid_load_load_fu_44_p1));
end


always @ (outStream_V_V_TREADY or ap_sig_bdd_38) begin
    ap_sig_bdd_72 = (~ap_sig_bdd_38 & (ap_const_logic_1 == outStream_V_V_TREADY));
end

assign grayscale_valid_load_load_fu_44_p1 = grayscale_valid;

assign outStream_V_V_TDATA = inStream_V_V_TDATA;

assign tmp_3_fu_48_p2 = (grayscale_valid ^ ap_const_lv1_1);


endmodule //ov7670_grayscale

