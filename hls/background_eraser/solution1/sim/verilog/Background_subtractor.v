// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Background_subtractor,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.197000,HLS_SYN_LAT=37,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=11,HLS_SYN_FF=1077,HLS_SYN_LUT=1997,HLS_VERSION=2019_1}" *)

module Background_subtractor (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_in_V_TDATA,
        stream_in_V_TVALID,
        stream_in_V_TREADY,
        enable_V,
        frame_done_V,
        stream_out_V_TDATA,
        stream_out_V_TVALID,
        stream_out_V_TREADY
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] stream_in_V_TDATA;
input   stream_in_V_TVALID;
output   stream_in_V_TREADY;
input  [0:0] enable_V;
output  [0:0] frame_done_V;
output  [7:0] stream_out_V_TDATA;
output   stream_out_V_TVALID;
input   stream_out_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] frame_done_V;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] stream_in_V_0_data_out;
wire    stream_in_V_0_vld_in;
wire    stream_in_V_0_vld_out;
wire    stream_in_V_0_ack_in;
reg    stream_in_V_0_ack_out;
reg   [15:0] stream_in_V_0_payload_A;
reg   [15:0] stream_in_V_0_payload_B;
reg    stream_in_V_0_sel_rd;
reg    stream_in_V_0_sel_wr;
wire    stream_in_V_0_sel;
wire    stream_in_V_0_load_A;
wire    stream_in_V_0_load_B;
reg   [1:0] stream_in_V_0_state;
wire    stream_in_V_0_state_cmp_full;
reg   [7:0] stream_out_V_1_data_in;
reg   [7:0] stream_out_V_1_data_out;
reg    stream_out_V_1_vld_in;
wire    stream_out_V_1_vld_out;
wire    stream_out_V_1_ack_in;
wire    stream_out_V_1_ack_out;
reg   [7:0] stream_out_V_1_payload_A;
reg   [7:0] stream_out_V_1_payload_B;
reg    stream_out_V_1_sel_rd;
reg    stream_out_V_1_sel_wr;
wire    stream_out_V_1_sel;
wire    stream_out_V_1_load_A;
wire    stream_out_V_1_load_B;
reg   [1:0] stream_out_V_1_state;
wire    stream_out_V_1_state_cmp_full;
reg    stream_in_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln24_fu_126_p2;
reg    stream_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state16;
wire   [0:0] and_ln32_fu_205_p2;
wire    ap_CS_fsm_state17;
reg   [0:0] and_ln32_reg_255;
wire    ap_CS_fsm_state3;
wire   [2:0] j_fu_132_p2;
reg   [2:0] j_reg_218;
reg    ap_block_state2;
reg    ap_predicate_op41_write_state2;
reg    ap_block_state2_io;
wire   [7:0] pixel_new_V_fu_138_p1;
reg   [7:0] pixel_new_V_reg_223;
wire   [63:0] grp_fu_123_p1;
reg   [63:0] diff_reg_233;
wire    ap_CS_fsm_state8;
wire   [63:0] grp_fu_114_p2;
reg   [63:0] tmp_reg_239;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln32_fu_189_p2;
reg   [0:0] icmp_ln32_reg_245;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln32_1_fu_195_p2;
reg   [0:0] icmp_ln32_1_reg_250;
reg    ap_block_state16_io;
reg   [2:0] j_0_reg_103;
reg    ap_predicate_op74_write_state17;
reg    ap_predicate_op76_write_state17;
reg    ap_block_state17_io;
wire    ap_CS_fsm_state9;
wire  signed [31:0] grp_fu_123_p0;
wire   [7:0] pixel_ref_V_fu_143_p4;
wire   [8:0] lhs_V_fu_153_p1;
wire   [8:0] rhs_V_fu_157_p1;
wire   [8:0] ret_V_fu_161_p2;
wire   [63:0] bitcast_ln32_fu_172_p1;
wire   [10:0] tmp_1_fu_175_p4;
wire   [51:0] trunc_ln32_fu_185_p1;
wire   [0:0] or_ln32_fu_201_p2;
wire   [0:0] grp_fu_118_p2;
reg    grp_fu_118_ce;
reg    grp_fu_123_ce;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 stream_in_V_0_sel_rd = 1'b0;
#0 stream_in_V_0_sel_wr = 1'b0;
#0 stream_in_V_0_state = 2'd0;
#0 stream_out_V_1_sel_rd = 1'b0;
#0 stream_out_V_1_sel_wr = 1'b0;
#0 stream_out_V_1_state = 2'd0;
end

Background_subtrabkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Background_subtrabkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(diff_reg_233),
    .din1(diff_reg_233),
    .ce(1'b1),
    .dout(grp_fu_114_p2)
);

Background_subtracud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
Background_subtracud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_reg_239),
    .din1(64'd4591870180066957722),
    .ce(grp_fu_118_ce),
    .opcode(5'd4),
    .dout(grp_fu_118_p2)
);

Background_subtradEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
Background_subtradEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_123_p0),
    .ce(grp_fu_123_ce),
    .dout(grp_fu_123_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_0_ack_out == 1'b1) & (stream_in_V_0_vld_out == 1'b1))) begin
            stream_in_V_0_sel_rd <= ~stream_in_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_0_ack_in == 1'b1) & (stream_in_V_0_vld_in == 1'b1))) begin
            stream_in_V_0_sel_wr <= ~stream_in_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_0_state == 2'd2) & (stream_in_V_0_vld_in == 1'b0)) | ((stream_in_V_0_state == 2'd3) & (stream_in_V_0_vld_in == 1'b0) & (stream_in_V_0_ack_out == 1'b1)))) begin
            stream_in_V_0_state <= 2'd2;
        end else if ((((stream_in_V_0_state == 2'd1) & (stream_in_V_0_ack_out == 1'b0)) | ((stream_in_V_0_state == 2'd3) & (stream_in_V_0_ack_out == 1'b0) & (stream_in_V_0_vld_in == 1'b1)))) begin
            stream_in_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_0_vld_in == 1'b0) & (stream_in_V_0_ack_out == 1'b1)) & ~((stream_in_V_0_ack_out == 1'b0) & (stream_in_V_0_vld_in == 1'b1)) & (stream_in_V_0_state == 2'd3)) | ((stream_in_V_0_state == 2'd1) & (stream_in_V_0_ack_out == 1'b1)) | ((stream_in_V_0_state == 2'd2) & (stream_in_V_0_vld_in == 1'b1)))) begin
            stream_in_V_0_state <= 2'd3;
        end else begin
            stream_in_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_1_ack_out == 1'b1) & (stream_out_V_1_vld_out == 1'b1))) begin
            stream_out_V_1_sel_rd <= ~stream_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_1_ack_in == 1'b1) & (stream_out_V_1_vld_in == 1'b1))) begin
            stream_out_V_1_sel_wr <= ~stream_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_1_state == 2'd2) & (stream_out_V_1_vld_in == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_1_vld_in == 1'b0) & (stream_out_V_1_ack_out == 1'b1)))) begin
            stream_out_V_1_state <= 2'd2;
        end else if ((((stream_out_V_1_state == 2'd1) & (stream_out_V_TREADY == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_TREADY == 1'b0) & (stream_out_V_1_vld_in == 1'b1)))) begin
            stream_out_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_1_vld_in == 1'b0) & (stream_out_V_1_ack_out == 1'b1)) & ~((stream_out_V_TREADY == 1'b0) & (stream_out_V_1_vld_in == 1'b1)) & (stream_out_V_1_state == 2'd3)) | ((stream_out_V_1_state == 2'd1) & (stream_out_V_1_ack_out == 1'b1)) | ((stream_out_V_1_state == 2'd2) & (stream_out_V_1_vld_in == 1'b1)))) begin
            stream_out_V_1_state <= 2'd3;
        end else begin
            stream_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17))) begin
        j_0_reg_103 <= j_reg_218;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_103 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16))) begin
        and_ln32_reg_255 <= and_ln32_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        diff_reg_233 <= grp_fu_123_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        icmp_ln32_1_reg_250 <= icmp_ln32_1_fu_195_p2;
        icmp_ln32_reg_245 <= icmp_ln32_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((icmp_ln24_fu_126_p2 == 1'd0) & (stream_in_V_0_vld_out == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_218 <= j_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((icmp_ln24_fu_126_p2 == 1'd0) & (stream_in_V_0_vld_out == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_TREADY == 1'b0))) & (icmp_ln24_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        pixel_new_V_reg_223 <= pixel_new_V_fu_138_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_0_load_A == 1'b1)) begin
        stream_in_V_0_payload_A <= stream_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_0_load_B == 1'b1)) begin
        stream_in_V_0_payload_B <= stream_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_1_load_A == 1'b1)) begin
        stream_out_V_1_payload_A <= stream_out_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_1_load_B == 1'b1)) begin
        stream_out_V_1_payload_B <= stream_out_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_reg_239 <= grp_fu_114_p2;
    end
end

always @ (*) begin
    if ((~((stream_out_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((icmp_ln24_fu_126_p2 == 1'd0) & (stream_in_V_0_vld_out == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_TREADY == 1'b0))) & (icmp_ln24_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((icmp_ln24_fu_126_p2 == 1'd0) & (stream_in_V_0_vld_out == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_TREADY == 1'b0))) & (icmp_ln24_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_1_state == 2'd1) | ((icmp_ln24_fu_126_p2 == 1'd0) & (stream_in_V_0_vld_out == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_TREADY == 1'b0))) & (icmp_ln24_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        frame_done_V = 1'd1;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        frame_done_V = 1'd0;
    end else begin
        frame_done_V = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16)))) begin
        grp_fu_118_ce = 1'b1;
    end else begin
        grp_fu_118_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (~((stream_out_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((icmp_ln24_fu_126_p2 == 1'd0) & (stream_in_V_0_vld_out == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_123_ce = 1'b1;
    end else begin
        grp_fu_123_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((icmp_ln24_fu_126_p2 == 1'd0) & (stream_in_V_0_vld_out == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_TREADY == 1'b0))) & (icmp_ln24_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        stream_in_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_0_sel == 1'b1)) begin
        stream_in_V_0_data_out = stream_in_V_0_payload_B;
    end else begin
        stream_in_V_0_data_out = stream_in_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        stream_in_V_TDATA_blk_n = stream_in_V_0_state[1'd0];
    end else begin
        stream_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln32_fu_205_p2) & (1'b1 == ap_CS_fsm_state16))) begin
        stream_out_V_1_data_in = 8'd255;
    end else if (((1'd0 == and_ln32_fu_205_p2) & (1'b1 == ap_CS_fsm_state16))) begin
        stream_out_V_1_data_in = pixel_new_V_reg_223;
    end else if ((~((stream_out_V_1_state == 2'd1) | ((icmp_ln24_fu_126_p2 == 1'd0) & (stream_in_V_0_vld_out == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_TREADY == 1'b0))) & (ap_predicate_op41_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        stream_out_V_1_data_in = pixel_new_V_fu_138_p1;
    end else begin
        stream_out_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_V_1_sel == 1'b1)) begin
        stream_out_V_1_data_out = stream_out_V_1_payload_B;
    end else begin
        stream_out_V_1_data_out = stream_out_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'd0 == and_ln32_fu_205_p2) & (1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16)) | ((1'd1 == and_ln32_fu_205_p2) & (1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16)) | (~((stream_out_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((icmp_ln24_fu_126_p2 == 1'd0) & (stream_in_V_0_vld_out == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_TREADY == 1'b0))) & (ap_predicate_op41_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((enable_V == 1'd1) & (1'd0 == and_ln32_reg_255) & (1'b1 == ap_CS_fsm_state17)) | ((1'd1 == and_ln32_reg_255) & (enable_V == 1'd1) & (1'b1 == ap_CS_fsm_state17)) | ((1'd0 == and_ln32_fu_205_p2) & (1'b1 == ap_CS_fsm_state16)) | ((1'd1 == and_ln32_fu_205_p2) & (1'b1 == ap_CS_fsm_state16)) | ((enable_V == 1'd0) & (icmp_ln24_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_TDATA_blk_n = stream_out_V_1_state[1'd1];
    end else begin
        stream_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((stream_out_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((icmp_ln24_fu_126_p2 == 1'd0) & (stream_in_V_0_vld_out == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_TREADY == 1'b0))) & (icmp_ln24_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((stream_out_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((icmp_ln24_fu_126_p2 == 1'd0) & (stream_in_V_0_vld_out == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_TREADY == 1'b0))) & (enable_V == 1'd1) & (icmp_ln24_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((stream_out_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((icmp_ln24_fu_126_p2 == 1'd0) & (stream_in_V_0_vld_out == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_TREADY == 1'b0))) & (enable_V == 1'd0) & (icmp_ln24_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (stream_out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln32_fu_205_p2 = (or_ln32_fu_201_p2 & grp_fu_118_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state16_io = (((1'd0 == and_ln32_fu_205_p2) & (stream_out_V_1_ack_in == 1'b0)) | ((1'd1 == and_ln32_fu_205_p2) & (stream_out_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state17_io = (((ap_predicate_op76_write_state17 == 1'b1) & (stream_out_V_1_ack_in == 1'b0)) | ((ap_predicate_op74_write_state17 == 1'b1) & (stream_out_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state2 = ((stream_out_V_1_state == 2'd1) | ((icmp_ln24_fu_126_p2 == 1'd0) & (stream_in_V_0_vld_out == 1'b0)) | ((stream_out_V_1_state == 2'd3) & (stream_out_V_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = ((ap_predicate_op41_write_state2 == 1'b1) & (stream_out_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_predicate_op41_write_state2 = ((enable_V == 1'd0) & (icmp_ln24_fu_126_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op74_write_state17 = ((enable_V == 1'd1) & (1'd0 == and_ln32_reg_255));
end

always @ (*) begin
    ap_predicate_op76_write_state17 = ((1'd1 == and_ln32_reg_255) & (enable_V == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln32_fu_172_p1 = tmp_reg_239;

assign grp_fu_123_p0 = $signed(ret_V_fu_161_p2);

assign icmp_ln24_fu_126_p2 = ((j_0_reg_103 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_195_p2 = ((trunc_ln32_fu_185_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_189_p2 = ((tmp_1_fu_175_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign j_fu_132_p2 = (j_0_reg_103 + 3'd1);

assign lhs_V_fu_153_p1 = pixel_new_V_fu_138_p1;

assign or_ln32_fu_201_p2 = (icmp_ln32_reg_245 | icmp_ln32_1_reg_250);

assign pixel_new_V_fu_138_p1 = stream_in_V_0_data_out[7:0];

assign pixel_ref_V_fu_143_p4 = {{stream_in_V_0_data_out[15:8]}};

assign ret_V_fu_161_p2 = (lhs_V_fu_153_p1 - rhs_V_fu_157_p1);

assign rhs_V_fu_157_p1 = pixel_ref_V_fu_143_p4;

assign stream_in_V_0_ack_in = stream_in_V_0_state[1'd1];

assign stream_in_V_0_load_A = (stream_in_V_0_state_cmp_full & ~stream_in_V_0_sel_wr);

assign stream_in_V_0_load_B = (stream_in_V_0_state_cmp_full & stream_in_V_0_sel_wr);

assign stream_in_V_0_sel = stream_in_V_0_sel_rd;

assign stream_in_V_0_state_cmp_full = ((stream_in_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_0_vld_in = stream_in_V_TVALID;

assign stream_in_V_0_vld_out = stream_in_V_0_state[1'd0];

assign stream_in_V_TREADY = stream_in_V_0_state[1'd1];

assign stream_out_V_1_ack_in = stream_out_V_1_state[1'd1];

assign stream_out_V_1_ack_out = stream_out_V_TREADY;

assign stream_out_V_1_load_A = (stream_out_V_1_state_cmp_full & ~stream_out_V_1_sel_wr);

assign stream_out_V_1_load_B = (stream_out_V_1_state_cmp_full & stream_out_V_1_sel_wr);

assign stream_out_V_1_sel = stream_out_V_1_sel_rd;

assign stream_out_V_1_state_cmp_full = ((stream_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_1_vld_out = stream_out_V_1_state[1'd0];

assign stream_out_V_TDATA = stream_out_V_1_data_out;

assign stream_out_V_TVALID = stream_out_V_1_state[1'd0];

assign tmp_1_fu_175_p4 = {{bitcast_ln32_fu_172_p1[62:52]}};

assign trunc_ln32_fu_185_p1 = bitcast_ln32_fu_172_p1[51:0];

endmodule //Background_subtractor
