-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Background_subtractor is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_new_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    stream_new_V_TVALID : IN STD_LOGIC;
    stream_new_V_TREADY : OUT STD_LOGIC;
    stream_ref_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    stream_ref_V_TVALID : IN STD_LOGIC;
    stream_ref_V_TREADY : OUT STD_LOGIC;
    enable : IN STD_LOGIC;
    threshold_V : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_done : OUT STD_LOGIC;
    stream_out_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_out_V_TVALID : OUT STD_LOGIC;
    stream_out_V_TREADY : IN STD_LOGIC );
end;


architecture behav of Background_subtractor is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Background_subtractor,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.398750,HLS_SYN_LAT=615361,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=106,HLS_SYN_LUT=353,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stream_new_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_new_V_0_vld_in : STD_LOGIC;
    signal stream_new_V_0_vld_out : STD_LOGIC;
    signal stream_new_V_0_ack_in : STD_LOGIC;
    signal stream_new_V_0_ack_out : STD_LOGIC;
    signal stream_new_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_new_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_new_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_new_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_new_V_0_sel : STD_LOGIC;
    signal stream_new_V_0_load_A : STD_LOGIC;
    signal stream_new_V_0_load_B : STD_LOGIC;
    signal stream_new_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_new_V_0_state_cmp_full : STD_LOGIC;
    signal stream_ref_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_ref_V_0_vld_in : STD_LOGIC;
    signal stream_ref_V_0_vld_out : STD_LOGIC;
    signal stream_ref_V_0_ack_in : STD_LOGIC;
    signal stream_ref_V_0_ack_out : STD_LOGIC;
    signal stream_ref_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_ref_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_ref_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_ref_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_ref_V_0_sel : STD_LOGIC;
    signal stream_ref_V_0_load_A : STD_LOGIC;
    signal stream_ref_V_0_load_B : STD_LOGIC;
    signal stream_ref_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_ref_V_0_state_cmp_full : STD_LOGIC;
    signal stream_out_V_1_data_in : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_out_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_out_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_out_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_out_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_1_sel : STD_LOGIC;
    signal stream_out_V_1_load_A : STD_LOGIC;
    signal stream_out_V_1_load_B : STD_LOGIC;
    signal stream_out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_1_state_cmp_full : STD_LOGIC;
    signal stream_new_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln22_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_ref_V_TDATA_blk_n : STD_LOGIC;
    signal stream_out_V_TDATA_blk_n : STD_LOGIC;
    signal enable_read_read_fu_76_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal enable_read_reg_234 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_238 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_145_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_216 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2 : BOOLEAN;
    signal i_fu_157_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_224 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal ap_predicate_op36_write_state3 : BOOLEAN;
    signal ap_predicate_op47_write_state3 : BOOLEAN;
    signal ap_predicate_op48_write_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal xor_ln22_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op52_write_state4 : BOOLEAN;
    signal ap_predicate_op54_write_state4 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal j_0_reg_104 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_0_reg_115 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln21_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln47_reg_126 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_done_preg : STD_LOGIC := '0';
    signal lhs_V_fu_163_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_fu_167_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_fu_171_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_177_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_op_assign_fu_189_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln887_fu_197_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    pixel_done_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pixel_done_preg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    pixel_done_preg <= phi_ln47_reg_126(0);
                end if; 
            end if;
        end if;
    end process;


    stream_new_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_new_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_new_V_0_ack_out = ap_const_logic_1) and (stream_new_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_new_V_0_sel_rd <= not(stream_new_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_new_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_new_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_new_V_0_ack_in = ap_const_logic_1) and (stream_new_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_new_V_0_sel_wr <= not(stream_new_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_new_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_new_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_new_V_0_state = ap_const_lv2_2) and (stream_new_V_0_vld_in = ap_const_logic_0)) or ((stream_new_V_0_state = ap_const_lv2_3) and (stream_new_V_0_vld_in = ap_const_logic_0) and (stream_new_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_new_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_new_V_0_state = ap_const_lv2_1) and (stream_new_V_0_ack_out = ap_const_logic_0)) or ((stream_new_V_0_state = ap_const_lv2_3) and (stream_new_V_0_ack_out = ap_const_logic_0) and (stream_new_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_new_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_new_V_0_vld_in = ap_const_logic_0) and (stream_new_V_0_ack_out = ap_const_logic_1))) and not(((stream_new_V_0_ack_out = ap_const_logic_0) and (stream_new_V_0_vld_in = ap_const_logic_1))) and (stream_new_V_0_state = ap_const_lv2_3)) or ((stream_new_V_0_state = ap_const_lv2_1) and (stream_new_V_0_ack_out = ap_const_logic_1)) or ((stream_new_V_0_state = ap_const_lv2_2) and (stream_new_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_new_V_0_state <= ap_const_lv2_3;
                else 
                    stream_new_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_1_ack_out = ap_const_logic_1) and (stream_out_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_1_sel_rd <= not(stream_out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_1_ack_in = ap_const_logic_1) and (stream_out_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_1_sel_wr <= not(stream_out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_1_state = ap_const_lv2_2) and (stream_out_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_1_state = ap_const_lv2_3) and (stream_out_V_1_vld_in = ap_const_logic_0) and (stream_out_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_1_state = ap_const_lv2_1) and (stream_out_V_TREADY = ap_const_logic_0)) or ((stream_out_V_1_state = ap_const_lv2_3) and (stream_out_V_TREADY = ap_const_logic_0) and (stream_out_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_1_vld_in = ap_const_logic_0) and (stream_out_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_TREADY = ap_const_logic_0) and (stream_out_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_1_state = ap_const_lv2_3)) or ((stream_out_V_1_state = ap_const_lv2_1) and (stream_out_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_1_state = ap_const_lv2_2) and (stream_out_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_ref_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_ref_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_ref_V_0_ack_out = ap_const_logic_1) and (stream_ref_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_ref_V_0_sel_rd <= not(stream_ref_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_ref_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_ref_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_ref_V_0_vld_in = ap_const_logic_1) and (stream_ref_V_0_ack_in = ap_const_logic_1))) then 
                                        stream_ref_V_0_sel_wr <= not(stream_ref_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_ref_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_ref_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_ref_V_0_state = ap_const_lv2_2) and (stream_ref_V_0_vld_in = ap_const_logic_0)) or ((stream_ref_V_0_state = ap_const_lv2_3) and (stream_ref_V_0_vld_in = ap_const_logic_0) and (stream_ref_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_ref_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_ref_V_0_state = ap_const_lv2_1) and (stream_ref_V_0_ack_out = ap_const_logic_0)) or ((stream_ref_V_0_state = ap_const_lv2_3) and (stream_ref_V_0_ack_out = ap_const_logic_0) and (stream_ref_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_ref_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_ref_V_0_vld_in = ap_const_logic_0) and (stream_ref_V_0_ack_out = ap_const_logic_1))) and not(((stream_ref_V_0_ack_out = ap_const_logic_0) and (stream_ref_V_0_vld_in = ap_const_logic_1))) and (stream_ref_V_0_state = ap_const_lv2_3)) or ((stream_ref_V_0_state = ap_const_lv2_1) and (stream_ref_V_0_ack_out = ap_const_logic_1)) or ((stream_ref_V_0_state = ap_const_lv2_2) and (stream_ref_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_ref_V_0_state <= ap_const_lv2_3;
                else 
                    stream_ref_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_1_state = ap_const_lv2_1) or ((stream_out_V_1_state = ap_const_lv2_3) and (stream_out_V_TREADY = ap_const_logic_0)))) and (icmp_ln21_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_115 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_115 <= i_reg_224;
            end if; 
        end if;
    end process;

    j_0_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)))) and (icmp_ln22_fu_151_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_reg_104 <= j_reg_216;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_104 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_ln47_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_1_state = ap_const_lv2_1) or ((stream_out_V_1_state = ap_const_lv2_3) and (stream_out_V_TREADY = ap_const_logic_0)))) and (icmp_ln21_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln47_reg_126 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln47_reg_126 <= xor_ln22_fu_207_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)))) and (icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                enable_read_reg_234 <= (0=>enable, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_reg_224 <= i_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)))) and (enable_read_read_fu_76_p2 = ap_const_lv1_1) and (icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln887_reg_238 <= icmp_ln887_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_1_state = ap_const_lv2_1) or ((stream_out_V_1_state = ap_const_lv2_3) and (stream_out_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                j_reg_216 <= j_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_new_V_0_load_A = ap_const_logic_1)) then
                stream_new_V_0_payload_A <= stream_new_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_new_V_0_load_B = ap_const_logic_1)) then
                stream_new_V_0_payload_B <= stream_new_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_1_payload_A <= stream_out_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_1_payload_B <= stream_out_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_ref_V_0_load_A = ap_const_logic_1)) then
                stream_ref_V_0_payload_A <= stream_ref_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_ref_V_0_load_B = ap_const_logic_1)) then
                stream_ref_V_0_payload_B <= stream_ref_V_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, stream_new_V_0_vld_out, stream_ref_V_0_vld_out, stream_out_V_TREADY, stream_out_V_1_state, ap_CS_fsm_state3, icmp_ln22_fu_151_p2, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_block_state3_io, ap_block_state4_io, icmp_ln21_fu_139_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((stream_out_V_1_state = ap_const_lv2_1) or ((stream_out_V_1_state = ap_const_lv2_3) and (stream_out_V_TREADY = ap_const_logic_0)))) and (icmp_ln21_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((stream_out_V_1_state = ap_const_lv2_1) or ((stream_out_V_1_state = ap_const_lv2_3) and (stream_out_V_TREADY = ap_const_logic_0)))) and (icmp_ln21_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)))) and (icmp_ln22_fu_151_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)))) and (icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    abscond_fu_183_p2 <= "1" when (signed(ret_V_fu_171_p2) > signed(ap_const_lv9_0)) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state2_assign_proc : process(stream_out_V_TREADY, stream_out_V_1_state)
    begin
                ap_block_state2 <= ((stream_out_V_1_state = ap_const_lv2_1) or ((stream_out_V_1_state = ap_const_lv2_3) and (stream_out_V_TREADY = ap_const_logic_0)));
    end process;


    ap_block_state3_assign_proc : process(stream_new_V_0_vld_out, stream_ref_V_0_vld_out, icmp_ln22_fu_151_p2)
    begin
                ap_block_state3 <= (((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)));
    end process;


    ap_block_state3_io_assign_proc : process(stream_out_V_1_ack_in, ap_predicate_op36_write_state3, ap_predicate_op47_write_state3, ap_predicate_op48_write_state3)
    begin
                ap_block_state3_io <= (((stream_out_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op48_write_state3 = ap_const_boolean_1)) or ((stream_out_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op47_write_state3 = ap_const_boolean_1)) or ((stream_out_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op36_write_state3 = ap_const_boolean_1)));
    end process;


    ap_block_state4_io_assign_proc : process(stream_out_V_1_ack_in, enable_read_reg_234, ap_predicate_op52_write_state4, ap_predicate_op54_write_state4)
    begin
                ap_block_state4_io <= (((stream_out_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op54_write_state4 = ap_const_boolean_1)) or ((stream_out_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op52_write_state4 = ap_const_boolean_1)) or ((enable_read_reg_234 = ap_const_lv1_0) and (stream_out_V_1_ack_in = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(stream_out_V_TREADY, stream_out_V_1_state, ap_CS_fsm_state2, icmp_ln21_fu_139_p2)
    begin
        if ((not(((stream_out_V_1_state = ap_const_lv2_1) or ((stream_out_V_1_state = ap_const_lv2_3) and (stream_out_V_TREADY = ap_const_logic_0)))) and (icmp_ln21_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op36_write_state3_assign_proc : process(icmp_ln22_fu_151_p2, enable_read_read_fu_76_p2)
    begin
                ap_predicate_op36_write_state3 <= ((enable_read_read_fu_76_p2 = ap_const_lv1_0) and (icmp_ln22_fu_151_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op47_write_state3_assign_proc : process(icmp_ln22_fu_151_p2, enable_read_read_fu_76_p2, icmp_ln887_fu_201_p2)
    begin
                ap_predicate_op47_write_state3 <= ((enable_read_read_fu_76_p2 = ap_const_lv1_1) and (icmp_ln887_fu_201_p2 = ap_const_lv1_0) and (icmp_ln22_fu_151_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op48_write_state3_assign_proc : process(icmp_ln22_fu_151_p2, enable_read_read_fu_76_p2, icmp_ln887_fu_201_p2)
    begin
                ap_predicate_op48_write_state3 <= ((icmp_ln887_fu_201_p2 = ap_const_lv1_1) and (enable_read_read_fu_76_p2 = ap_const_lv1_1) and (icmp_ln22_fu_151_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op52_write_state4_assign_proc : process(enable_read_reg_234, icmp_ln887_reg_238)
    begin
                ap_predicate_op52_write_state4 <= ((enable_read_reg_234 = ap_const_lv1_1) and (icmp_ln887_reg_238 = ap_const_lv1_0));
    end process;


    ap_predicate_op54_write_state4_assign_proc : process(enable_read_reg_234, icmp_ln887_reg_238)
    begin
                ap_predicate_op54_write_state4 <= ((icmp_ln887_reg_238 = ap_const_lv1_1) and (enable_read_reg_234 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(stream_out_V_TREADY, stream_out_V_1_state, ap_CS_fsm_state2, icmp_ln21_fu_139_p2)
    begin
        if ((not(((stream_out_V_1_state = ap_const_lv2_1) or ((stream_out_V_1_state = ap_const_lv2_3) and (stream_out_V_TREADY = ap_const_logic_0)))) and (icmp_ln21_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    enable_read_read_fu_76_p2 <= (0=>enable, others=>'-');
    i_fu_157_p2 <= std_logic_vector(unsigned(i_0_reg_115) + unsigned(ap_const_lv10_1));
    i_op_assign_fu_189_p3 <= 
        ret_V_fu_171_p2 when (abscond_fu_183_p2(0) = '1') else 
        neg_fu_177_p2;
    icmp_ln21_fu_139_p2 <= "1" when (j_0_reg_104 = ap_const_lv9_1E0) else "0";
    icmp_ln22_fu_151_p2 <= "1" when (i_0_reg_115 = ap_const_lv10_280) else "0";
    icmp_ln887_fu_201_p2 <= "1" when (signed(i_op_assign_fu_189_p3) < signed(zext_ln887_fu_197_p1)) else "0";
    j_fu_145_p2 <= std_logic_vector(unsigned(j_0_reg_104) + unsigned(ap_const_lv9_1));
    lhs_V_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stream_new_V_0_data_out),9));
    neg_fu_177_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(ret_V_fu_171_p2));

    pixel_done_assign_proc : process(ap_CS_fsm_state4, phi_ln47_reg_126, pixel_done_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pixel_done <= phi_ln47_reg_126(0);
        else 
            pixel_done <= pixel_done_preg;
        end if; 
    end process;

    ret_V_fu_171_p2 <= std_logic_vector(unsigned(lhs_V_fu_163_p1) - unsigned(rhs_V_fu_167_p1));
    rhs_V_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stream_ref_V_0_data_out),9));
    stream_new_V_0_ack_in <= stream_new_V_0_state(1);

    stream_new_V_0_ack_out_assign_proc : process(stream_new_V_0_vld_out, stream_ref_V_0_vld_out, ap_CS_fsm_state3, icmp_ln22_fu_151_p2, ap_block_state3_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)))) and (icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            stream_new_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_new_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_new_V_0_data_out_assign_proc : process(stream_new_V_0_payload_A, stream_new_V_0_payload_B, stream_new_V_0_sel)
    begin
        if ((stream_new_V_0_sel = ap_const_logic_1)) then 
            stream_new_V_0_data_out <= stream_new_V_0_payload_B;
        else 
            stream_new_V_0_data_out <= stream_new_V_0_payload_A;
        end if; 
    end process;

    stream_new_V_0_load_A <= (stream_new_V_0_state_cmp_full and not(stream_new_V_0_sel_wr));
    stream_new_V_0_load_B <= (stream_new_V_0_state_cmp_full and stream_new_V_0_sel_wr);
    stream_new_V_0_sel <= stream_new_V_0_sel_rd;
    stream_new_V_0_state_cmp_full <= '0' when (stream_new_V_0_state = ap_const_lv2_1) else '1';
    stream_new_V_0_vld_in <= stream_new_V_TVALID;
    stream_new_V_0_vld_out <= stream_new_V_0_state(0);

    stream_new_V_TDATA_blk_n_assign_proc : process(stream_new_V_0_state, ap_CS_fsm_state3, icmp_ln22_fu_151_p2)
    begin
        if (((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            stream_new_V_TDATA_blk_n <= stream_new_V_0_state(0);
        else 
            stream_new_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_new_V_TREADY <= stream_new_V_0_state(1);
    stream_out_V_1_ack_in <= stream_out_V_1_state(1);
    stream_out_V_1_ack_out <= stream_out_V_TREADY;

    stream_out_V_1_data_in_assign_proc : process(stream_new_V_0_data_out, stream_new_V_0_vld_out, stream_ref_V_0_vld_out, ap_CS_fsm_state3, icmp_ln22_fu_151_p2, ap_predicate_op36_write_state3, ap_predicate_op47_write_state3, ap_predicate_op48_write_state3)
    begin
        if ((not((((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)))) and (ap_predicate_op48_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            stream_out_V_1_data_in <= ap_const_lv8_FF;
        elsif (((not((((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)))) and (ap_predicate_op47_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)))) and (ap_predicate_op36_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            stream_out_V_1_data_in <= stream_new_V_0_data_out;
        else 
            stream_out_V_1_data_in <= "XXXXXXXX";
        end if; 
    end process;


    stream_out_V_1_data_out_assign_proc : process(stream_out_V_1_payload_A, stream_out_V_1_payload_B, stream_out_V_1_sel)
    begin
        if ((stream_out_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_1_data_out <= stream_out_V_1_payload_B;
        else 
            stream_out_V_1_data_out <= stream_out_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_1_load_A <= (stream_out_V_1_state_cmp_full and not(stream_out_V_1_sel_wr));
    stream_out_V_1_load_B <= (stream_out_V_1_state_cmp_full and stream_out_V_1_sel_wr);
    stream_out_V_1_sel <= stream_out_V_1_sel_rd;
    stream_out_V_1_state_cmp_full <= '0' when (stream_out_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_1_vld_in_assign_proc : process(stream_new_V_0_vld_out, stream_ref_V_0_vld_out, ap_CS_fsm_state3, icmp_ln22_fu_151_p2, ap_predicate_op36_write_state3, ap_predicate_op47_write_state3, ap_predicate_op48_write_state3, ap_block_state3_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)))) and (ap_predicate_op48_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)))) and (ap_predicate_op47_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)))) and (ap_predicate_op36_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            stream_out_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_1_vld_out <= stream_out_V_1_state(0);
    stream_out_V_TDATA <= stream_out_V_1_data_out;

    stream_out_V_TDATA_blk_n_assign_proc : process(stream_out_V_1_state, ap_CS_fsm_state3, icmp_ln22_fu_151_p2, enable_read_read_fu_76_p2, icmp_ln887_fu_201_p2, ap_CS_fsm_state4, enable_read_reg_234, icmp_ln887_reg_238)
    begin
        if ((((enable_read_reg_234 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((enable_read_reg_234 = ap_const_lv1_1) and (icmp_ln887_reg_238 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln887_reg_238 = ap_const_lv1_1) and (enable_read_reg_234 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((enable_read_read_fu_76_p2 = ap_const_lv1_0) and (icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((enable_read_read_fu_76_p2 = ap_const_lv1_1) and (icmp_ln887_fu_201_p2 = ap_const_lv1_0) and (icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln887_fu_201_p2 = ap_const_lv1_1) and (enable_read_read_fu_76_p2 = ap_const_lv1_1) and (icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            stream_out_V_TDATA_blk_n <= stream_out_V_1_state(1);
        else 
            stream_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_V_TVALID <= stream_out_V_1_state(0);
    stream_ref_V_0_ack_in <= stream_ref_V_0_state(1);

    stream_ref_V_0_ack_out_assign_proc : process(stream_new_V_0_vld_out, stream_ref_V_0_vld_out, ap_CS_fsm_state3, icmp_ln22_fu_151_p2, ap_block_state3_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_ref_V_0_vld_out = ap_const_logic_0)) or ((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (stream_new_V_0_vld_out = ap_const_logic_0)))) and (icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            stream_ref_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_ref_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_ref_V_0_data_out_assign_proc : process(stream_ref_V_0_payload_A, stream_ref_V_0_payload_B, stream_ref_V_0_sel)
    begin
        if ((stream_ref_V_0_sel = ap_const_logic_1)) then 
            stream_ref_V_0_data_out <= stream_ref_V_0_payload_B;
        else 
            stream_ref_V_0_data_out <= stream_ref_V_0_payload_A;
        end if; 
    end process;

    stream_ref_V_0_load_A <= (stream_ref_V_0_state_cmp_full and not(stream_ref_V_0_sel_wr));
    stream_ref_V_0_load_B <= (stream_ref_V_0_state_cmp_full and stream_ref_V_0_sel_wr);
    stream_ref_V_0_sel <= stream_ref_V_0_sel_rd;
    stream_ref_V_0_state_cmp_full <= '0' when (stream_ref_V_0_state = ap_const_lv2_1) else '1';
    stream_ref_V_0_vld_in <= stream_ref_V_TVALID;
    stream_ref_V_0_vld_out <= stream_ref_V_0_state(0);

    stream_ref_V_TDATA_blk_n_assign_proc : process(stream_ref_V_0_state, ap_CS_fsm_state3, icmp_ln22_fu_151_p2)
    begin
        if (((icmp_ln22_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            stream_ref_V_TDATA_blk_n <= stream_ref_V_0_state(0);
        else 
            stream_ref_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_ref_V_TREADY <= stream_ref_V_0_state(1);
    xor_ln22_fu_207_p2 <= (phi_ln47_reg_126 xor ap_const_lv1_1);
    zext_ln887_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(threshold_V),9));
end behav;
