// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Background_subtractor.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Background_subtractor::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Background_subtractor::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Background_subtractor::ap_ST_fsm_state1 = "1";
const sc_lv<4> Background_subtractor::ap_ST_fsm_state2 = "10";
const sc_lv<4> Background_subtractor::ap_ST_fsm_state3 = "100";
const sc_lv<4> Background_subtractor::ap_ST_fsm_state4 = "1000";
const sc_lv<32> Background_subtractor::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Background_subtractor::ap_const_boolean_1 = true;
const sc_lv<1> Background_subtractor::ap_const_lv1_0 = "0";
const sc_lv<1> Background_subtractor::ap_const_lv1_1 = "1";
const sc_lv<2> Background_subtractor::ap_const_lv2_0 = "00";
const sc_lv<2> Background_subtractor::ap_const_lv2_2 = "10";
const sc_lv<2> Background_subtractor::ap_const_lv2_3 = "11";
const sc_lv<2> Background_subtractor::ap_const_lv2_1 = "1";
const sc_lv<32> Background_subtractor::ap_const_lv32_2 = "10";
const sc_lv<32> Background_subtractor::ap_const_lv32_3 = "11";
const sc_lv<32> Background_subtractor::ap_const_lv32_1 = "1";
const bool Background_subtractor::ap_const_boolean_0 = false;
const sc_lv<9> Background_subtractor::ap_const_lv9_0 = "000000000";
const sc_lv<10> Background_subtractor::ap_const_lv10_0 = "0000000000";
const sc_lv<8> Background_subtractor::ap_const_lv8_FF = "11111111";
const sc_lv<9> Background_subtractor::ap_const_lv9_1E0 = "111100000";
const sc_lv<9> Background_subtractor::ap_const_lv9_1 = "1";
const sc_lv<10> Background_subtractor::ap_const_lv10_280 = "1010000000";
const sc_lv<10> Background_subtractor::ap_const_lv10_1 = "1";

Background_subtractor::Background_subtractor(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_abscond_fu_183_p2);
    sensitive << ( stream_new_V_0_vld_out );
    sensitive << ( stream_ref_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_151_p2 );
    sensitive << ( enable_read_read_fu_76_p2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ret_V_fu_171_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( stream_out_V_TREADY );
    sensitive << ( stream_out_V_1_state );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( stream_new_V_0_vld_out );
    sensitive << ( stream_ref_V_0_vld_out );
    sensitive << ( icmp_ln22_fu_151_p2 );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( stream_out_V_1_ack_in );
    sensitive << ( ap_predicate_op36_write_state3 );
    sensitive << ( ap_predicate_op47_write_state3 );
    sensitive << ( ap_predicate_op48_write_state3 );

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( stream_out_V_1_ack_in );
    sensitive << ( enable_read_reg_234 );
    sensitive << ( ap_predicate_op52_write_state4 );
    sensitive << ( ap_predicate_op54_write_state4 );

    SC_METHOD(thread_ap_done);
    sensitive << ( stream_out_V_TREADY );
    sensitive << ( stream_out_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln21_fu_139_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op36_write_state3);
    sensitive << ( icmp_ln22_fu_151_p2 );
    sensitive << ( enable_read_read_fu_76_p2 );

    SC_METHOD(thread_ap_predicate_op47_write_state3);
    sensitive << ( icmp_ln22_fu_151_p2 );
    sensitive << ( enable_read_read_fu_76_p2 );
    sensitive << ( icmp_ln887_fu_201_p2 );

    SC_METHOD(thread_ap_predicate_op48_write_state3);
    sensitive << ( icmp_ln22_fu_151_p2 );
    sensitive << ( enable_read_read_fu_76_p2 );
    sensitive << ( icmp_ln887_fu_201_p2 );

    SC_METHOD(thread_ap_predicate_op52_write_state4);
    sensitive << ( enable_read_reg_234 );
    sensitive << ( icmp_ln887_reg_238 );

    SC_METHOD(thread_ap_predicate_op54_write_state4);
    sensitive << ( enable_read_reg_234 );
    sensitive << ( icmp_ln887_reg_238 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( stream_out_V_TREADY );
    sensitive << ( stream_out_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln21_fu_139_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_enable_read_read_fu_76_p2);
    sensitive << ( stream_new_V_0_vld_out );
    sensitive << ( stream_ref_V_0_vld_out );
    sensitive << ( enable );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_151_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_i_fu_157_p2);
    sensitive << ( i_0_reg_115 );

    SC_METHOD(thread_i_op_assign_fu_189_p3);
    sensitive << ( ret_V_fu_171_p2 );
    sensitive << ( abscond_fu_183_p2 );
    sensitive << ( neg_fu_177_p2 );

    SC_METHOD(thread_icmp_ln21_fu_139_p2);
    sensitive << ( stream_out_V_TREADY );
    sensitive << ( stream_out_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( j_0_reg_104 );

    SC_METHOD(thread_icmp_ln22_fu_151_p2);
    sensitive << ( stream_new_V_0_vld_out );
    sensitive << ( stream_ref_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_151_p2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( i_0_reg_115 );

    SC_METHOD(thread_icmp_ln887_fu_201_p2);
    sensitive << ( stream_new_V_0_vld_out );
    sensitive << ( stream_ref_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_151_p2 );
    sensitive << ( enable_read_read_fu_76_p2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( i_op_assign_fu_189_p3 );
    sensitive << ( zext_ln887_fu_197_p1 );

    SC_METHOD(thread_j_fu_145_p2);
    sensitive << ( j_0_reg_104 );

    SC_METHOD(thread_lhs_V_fu_163_p1);
    sensitive << ( stream_new_V_0_data_out );

    SC_METHOD(thread_neg_fu_177_p2);
    sensitive << ( ret_V_fu_171_p2 );

    SC_METHOD(thread_pixel_done);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( phi_ln47_reg_126 );
    sensitive << ( pixel_done_preg );

    SC_METHOD(thread_ret_V_fu_171_p2);
    sensitive << ( lhs_V_fu_163_p1 );
    sensitive << ( rhs_V_fu_167_p1 );

    SC_METHOD(thread_rhs_V_fu_167_p1);
    sensitive << ( stream_ref_V_0_data_out );

    SC_METHOD(thread_stream_new_V_0_ack_in);
    sensitive << ( stream_new_V_0_state );

    SC_METHOD(thread_stream_new_V_0_ack_out);
    sensitive << ( stream_new_V_0_vld_out );
    sensitive << ( stream_ref_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_151_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_stream_new_V_0_data_out);
    sensitive << ( stream_new_V_0_payload_A );
    sensitive << ( stream_new_V_0_payload_B );
    sensitive << ( stream_new_V_0_sel );

    SC_METHOD(thread_stream_new_V_0_load_A);
    sensitive << ( stream_new_V_0_sel_wr );
    sensitive << ( stream_new_V_0_state_cmp_full );

    SC_METHOD(thread_stream_new_V_0_load_B);
    sensitive << ( stream_new_V_0_sel_wr );
    sensitive << ( stream_new_V_0_state_cmp_full );

    SC_METHOD(thread_stream_new_V_0_sel);
    sensitive << ( stream_new_V_0_sel_rd );

    SC_METHOD(thread_stream_new_V_0_state_cmp_full);
    sensitive << ( stream_new_V_0_state );

    SC_METHOD(thread_stream_new_V_0_vld_in);
    sensitive << ( stream_new_V_TVALID );

    SC_METHOD(thread_stream_new_V_0_vld_out);
    sensitive << ( stream_new_V_0_state );

    SC_METHOD(thread_stream_new_V_TDATA_blk_n);
    sensitive << ( stream_new_V_0_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_151_p2 );

    SC_METHOD(thread_stream_new_V_TREADY);
    sensitive << ( stream_new_V_0_state );

    SC_METHOD(thread_stream_out_V_1_ack_in);
    sensitive << ( stream_out_V_1_state );

    SC_METHOD(thread_stream_out_V_1_ack_out);
    sensitive << ( stream_out_V_TREADY );

    SC_METHOD(thread_stream_out_V_1_data_in);
    sensitive << ( stream_new_V_0_data_out );
    sensitive << ( stream_new_V_0_vld_out );
    sensitive << ( stream_ref_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_151_p2 );
    sensitive << ( ap_predicate_op36_write_state3 );
    sensitive << ( ap_predicate_op47_write_state3 );
    sensitive << ( ap_predicate_op48_write_state3 );

    SC_METHOD(thread_stream_out_V_1_data_out);
    sensitive << ( stream_out_V_1_payload_A );
    sensitive << ( stream_out_V_1_payload_B );
    sensitive << ( stream_out_V_1_sel );

    SC_METHOD(thread_stream_out_V_1_load_A);
    sensitive << ( stream_out_V_1_sel_wr );
    sensitive << ( stream_out_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_1_load_B);
    sensitive << ( stream_out_V_1_sel_wr );
    sensitive << ( stream_out_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_1_sel);
    sensitive << ( stream_out_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_1_state_cmp_full);
    sensitive << ( stream_out_V_1_state );

    SC_METHOD(thread_stream_out_V_1_vld_in);
    sensitive << ( stream_new_V_0_vld_out );
    sensitive << ( stream_ref_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_151_p2 );
    sensitive << ( ap_predicate_op36_write_state3 );
    sensitive << ( ap_predicate_op47_write_state3 );
    sensitive << ( ap_predicate_op48_write_state3 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_stream_out_V_1_vld_out);
    sensitive << ( stream_out_V_1_state );

    SC_METHOD(thread_stream_out_V_TDATA);
    sensitive << ( stream_out_V_1_data_out );

    SC_METHOD(thread_stream_out_V_TDATA_blk_n);
    sensitive << ( stream_out_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_151_p2 );
    sensitive << ( enable_read_read_fu_76_p2 );
    sensitive << ( icmp_ln887_fu_201_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( enable_read_reg_234 );
    sensitive << ( icmp_ln887_reg_238 );

    SC_METHOD(thread_stream_out_V_TVALID);
    sensitive << ( stream_out_V_1_state );

    SC_METHOD(thread_stream_ref_V_0_ack_in);
    sensitive << ( stream_ref_V_0_state );

    SC_METHOD(thread_stream_ref_V_0_ack_out);
    sensitive << ( stream_new_V_0_vld_out );
    sensitive << ( stream_ref_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_151_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_stream_ref_V_0_data_out);
    sensitive << ( stream_ref_V_0_payload_A );
    sensitive << ( stream_ref_V_0_payload_B );
    sensitive << ( stream_ref_V_0_sel );

    SC_METHOD(thread_stream_ref_V_0_load_A);
    sensitive << ( stream_ref_V_0_sel_wr );
    sensitive << ( stream_ref_V_0_state_cmp_full );

    SC_METHOD(thread_stream_ref_V_0_load_B);
    sensitive << ( stream_ref_V_0_sel_wr );
    sensitive << ( stream_ref_V_0_state_cmp_full );

    SC_METHOD(thread_stream_ref_V_0_sel);
    sensitive << ( stream_ref_V_0_sel_rd );

    SC_METHOD(thread_stream_ref_V_0_state_cmp_full);
    sensitive << ( stream_ref_V_0_state );

    SC_METHOD(thread_stream_ref_V_0_vld_in);
    sensitive << ( stream_ref_V_TVALID );

    SC_METHOD(thread_stream_ref_V_0_vld_out);
    sensitive << ( stream_ref_V_0_state );

    SC_METHOD(thread_stream_ref_V_TDATA_blk_n);
    sensitive << ( stream_ref_V_0_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_151_p2 );

    SC_METHOD(thread_stream_ref_V_TREADY);
    sensitive << ( stream_ref_V_0_state );

    SC_METHOD(thread_xor_ln22_fu_207_p2);
    sensitive << ( phi_ln47_reg_126 );

    SC_METHOD(thread_zext_ln887_fu_197_p1);
    sensitive << ( threshold_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_new_V_0_vld_out );
    sensitive << ( stream_ref_V_0_vld_out );
    sensitive << ( stream_out_V_TREADY );
    sensitive << ( stream_out_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_151_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );
    sensitive << ( icmp_ln21_fu_139_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    stream_new_V_0_sel_rd = SC_LOGIC_0;
    stream_new_V_0_sel_wr = SC_LOGIC_0;
    stream_new_V_0_state = "00";
    stream_ref_V_0_sel_rd = SC_LOGIC_0;
    stream_ref_V_0_sel_wr = SC_LOGIC_0;
    stream_ref_V_0_state = "00";
    stream_out_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_1_sel_wr = SC_LOGIC_0;
    stream_out_V_1_state = "00";
    pixel_done_preg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Background_subtractor_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, stream_new_V_TDATA, "(port)stream_new_V_TDATA");
    sc_trace(mVcdFile, stream_new_V_TVALID, "(port)stream_new_V_TVALID");
    sc_trace(mVcdFile, stream_new_V_TREADY, "(port)stream_new_V_TREADY");
    sc_trace(mVcdFile, stream_ref_V_TDATA, "(port)stream_ref_V_TDATA");
    sc_trace(mVcdFile, stream_ref_V_TVALID, "(port)stream_ref_V_TVALID");
    sc_trace(mVcdFile, stream_ref_V_TREADY, "(port)stream_ref_V_TREADY");
    sc_trace(mVcdFile, enable, "(port)enable");
    sc_trace(mVcdFile, threshold_V, "(port)threshold_V");
    sc_trace(mVcdFile, pixel_done, "(port)pixel_done");
    sc_trace(mVcdFile, stream_out_V_TDATA, "(port)stream_out_V_TDATA");
    sc_trace(mVcdFile, stream_out_V_TVALID, "(port)stream_out_V_TVALID");
    sc_trace(mVcdFile, stream_out_V_TREADY, "(port)stream_out_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, stream_new_V_0_data_out, "stream_new_V_0_data_out");
    sc_trace(mVcdFile, stream_new_V_0_vld_in, "stream_new_V_0_vld_in");
    sc_trace(mVcdFile, stream_new_V_0_vld_out, "stream_new_V_0_vld_out");
    sc_trace(mVcdFile, stream_new_V_0_ack_in, "stream_new_V_0_ack_in");
    sc_trace(mVcdFile, stream_new_V_0_ack_out, "stream_new_V_0_ack_out");
    sc_trace(mVcdFile, stream_new_V_0_payload_A, "stream_new_V_0_payload_A");
    sc_trace(mVcdFile, stream_new_V_0_payload_B, "stream_new_V_0_payload_B");
    sc_trace(mVcdFile, stream_new_V_0_sel_rd, "stream_new_V_0_sel_rd");
    sc_trace(mVcdFile, stream_new_V_0_sel_wr, "stream_new_V_0_sel_wr");
    sc_trace(mVcdFile, stream_new_V_0_sel, "stream_new_V_0_sel");
    sc_trace(mVcdFile, stream_new_V_0_load_A, "stream_new_V_0_load_A");
    sc_trace(mVcdFile, stream_new_V_0_load_B, "stream_new_V_0_load_B");
    sc_trace(mVcdFile, stream_new_V_0_state, "stream_new_V_0_state");
    sc_trace(mVcdFile, stream_new_V_0_state_cmp_full, "stream_new_V_0_state_cmp_full");
    sc_trace(mVcdFile, stream_ref_V_0_data_out, "stream_ref_V_0_data_out");
    sc_trace(mVcdFile, stream_ref_V_0_vld_in, "stream_ref_V_0_vld_in");
    sc_trace(mVcdFile, stream_ref_V_0_vld_out, "stream_ref_V_0_vld_out");
    sc_trace(mVcdFile, stream_ref_V_0_ack_in, "stream_ref_V_0_ack_in");
    sc_trace(mVcdFile, stream_ref_V_0_ack_out, "stream_ref_V_0_ack_out");
    sc_trace(mVcdFile, stream_ref_V_0_payload_A, "stream_ref_V_0_payload_A");
    sc_trace(mVcdFile, stream_ref_V_0_payload_B, "stream_ref_V_0_payload_B");
    sc_trace(mVcdFile, stream_ref_V_0_sel_rd, "stream_ref_V_0_sel_rd");
    sc_trace(mVcdFile, stream_ref_V_0_sel_wr, "stream_ref_V_0_sel_wr");
    sc_trace(mVcdFile, stream_ref_V_0_sel, "stream_ref_V_0_sel");
    sc_trace(mVcdFile, stream_ref_V_0_load_A, "stream_ref_V_0_load_A");
    sc_trace(mVcdFile, stream_ref_V_0_load_B, "stream_ref_V_0_load_B");
    sc_trace(mVcdFile, stream_ref_V_0_state, "stream_ref_V_0_state");
    sc_trace(mVcdFile, stream_ref_V_0_state_cmp_full, "stream_ref_V_0_state_cmp_full");
    sc_trace(mVcdFile, stream_out_V_1_data_in, "stream_out_V_1_data_in");
    sc_trace(mVcdFile, stream_out_V_1_data_out, "stream_out_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_1_vld_in, "stream_out_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_1_vld_out, "stream_out_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_1_ack_in, "stream_out_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_1_ack_out, "stream_out_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_1_payload_A, "stream_out_V_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_1_payload_B, "stream_out_V_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_1_sel_rd, "stream_out_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_1_sel_wr, "stream_out_V_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_1_sel, "stream_out_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_1_load_A, "stream_out_V_1_load_A");
    sc_trace(mVcdFile, stream_out_V_1_load_B, "stream_out_V_1_load_B");
    sc_trace(mVcdFile, stream_out_V_1_state, "stream_out_V_1_state");
    sc_trace(mVcdFile, stream_out_V_1_state_cmp_full, "stream_out_V_1_state_cmp_full");
    sc_trace(mVcdFile, stream_new_V_TDATA_blk_n, "stream_new_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln22_fu_151_p2, "icmp_ln22_fu_151_p2");
    sc_trace(mVcdFile, stream_ref_V_TDATA_blk_n, "stream_ref_V_TDATA_blk_n");
    sc_trace(mVcdFile, stream_out_V_TDATA_blk_n, "stream_out_V_TDATA_blk_n");
    sc_trace(mVcdFile, enable_read_read_fu_76_p2, "enable_read_read_fu_76_p2");
    sc_trace(mVcdFile, icmp_ln887_fu_201_p2, "icmp_ln887_fu_201_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, enable_read_reg_234, "enable_read_reg_234");
    sc_trace(mVcdFile, icmp_ln887_reg_238, "icmp_ln887_reg_238");
    sc_trace(mVcdFile, j_fu_145_p2, "j_fu_145_p2");
    sc_trace(mVcdFile, j_reg_216, "j_reg_216");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, i_fu_157_p2, "i_fu_157_p2");
    sc_trace(mVcdFile, i_reg_224, "i_reg_224");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, ap_predicate_op36_write_state3, "ap_predicate_op36_write_state3");
    sc_trace(mVcdFile, ap_predicate_op47_write_state3, "ap_predicate_op47_write_state3");
    sc_trace(mVcdFile, ap_predicate_op48_write_state3, "ap_predicate_op48_write_state3");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, xor_ln22_fu_207_p2, "xor_ln22_fu_207_p2");
    sc_trace(mVcdFile, ap_predicate_op52_write_state4, "ap_predicate_op52_write_state4");
    sc_trace(mVcdFile, ap_predicate_op54_write_state4, "ap_predicate_op54_write_state4");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, j_0_reg_104, "j_0_reg_104");
    sc_trace(mVcdFile, i_0_reg_115, "i_0_reg_115");
    sc_trace(mVcdFile, icmp_ln21_fu_139_p2, "icmp_ln21_fu_139_p2");
    sc_trace(mVcdFile, phi_ln47_reg_126, "phi_ln47_reg_126");
    sc_trace(mVcdFile, pixel_done_preg, "pixel_done_preg");
    sc_trace(mVcdFile, lhs_V_fu_163_p1, "lhs_V_fu_163_p1");
    sc_trace(mVcdFile, rhs_V_fu_167_p1, "rhs_V_fu_167_p1");
    sc_trace(mVcdFile, ret_V_fu_171_p2, "ret_V_fu_171_p2");
    sc_trace(mVcdFile, abscond_fu_183_p2, "abscond_fu_183_p2");
    sc_trace(mVcdFile, neg_fu_177_p2, "neg_fu_177_p2");
    sc_trace(mVcdFile, i_op_assign_fu_189_p3, "i_op_assign_fu_189_p3");
    sc_trace(mVcdFile, zext_ln887_fu_197_p1, "zext_ln887_fu_197_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Background_subtractor.hdltvin.dat");
    mHdltvoutHandle.open("Background_subtractor.hdltvout.dat");
}

Background_subtractor::~Background_subtractor() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void Background_subtractor::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_1_state.read()))) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln21_fu_139_p2.read()))) {
        i_0_reg_115 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_block_state4_io.read(), ap_const_boolean_0))) {
        i_0_reg_115 = i_reg_224.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln22_fu_151_p2.read()))) {
        j_0_reg_104 = j_reg_216.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_0_reg_104 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_1_state.read()))) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln21_fu_139_p2.read()))) {
        phi_ln47_reg_126 = ap_const_lv1_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_block_state4_io.read(), ap_const_boolean_0))) {
        phi_ln47_reg_126 = xor_ln22_fu_207_p2.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        pixel_done_preg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            pixel_done_preg =  (sc_logic) (phi_ln47_reg_126.read()[0]);
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_new_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_new_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_new_V_0_vld_out.read()))) {
            stream_new_V_0_sel_rd =  (sc_logic) (~stream_new_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_new_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_new_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_new_V_0_ack_in.read()))) {
            stream_new_V_0_sel_wr =  (sc_logic) (~stream_new_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_new_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_new_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(stream_new_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(stream_new_V_0_state.read(), ap_const_lv2_2)))) {
            stream_new_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_new_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_new_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_new_V_0_state.read(), ap_const_lv2_1)))) {
            stream_new_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_new_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(stream_new_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_new_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_new_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(stream_new_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_new_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_new_V_0_ack_out.read()))))) {
            stream_new_V_0_state = ap_const_lv2_3;
        } else {
            stream_new_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_1_vld_out.read()))) {
            stream_out_V_1_sel_rd =  (sc_logic) (~stream_out_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_1_ack_in.read()))) {
            stream_out_V_1_sel_wr =  (sc_logic) (~stream_out_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_1_state.read())))) {
            stream_out_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_1_state.read())))) {
            stream_out_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_1_ack_out.read()))))) {
            stream_out_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_ref_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_ref_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_ref_V_0_vld_out.read()))) {
            stream_ref_V_0_sel_rd =  (sc_logic) (~stream_ref_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_ref_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_ref_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_ref_V_0_ack_in.read()))) {
            stream_ref_V_0_sel_wr =  (sc_logic) (~stream_ref_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_ref_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_ref_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_ref_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_ref_V_0_state.read())))) {
            stream_ref_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_ref_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_ref_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_ref_V_0_state.read())))) {
            stream_ref_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_ref_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_ref_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_ref_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_ref_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_ref_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_ref_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_ref_V_0_ack_out.read()))))) {
            stream_ref_V_0_state = ap_const_lv2_3;
        } else {
            stream_ref_V_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
        enable_read_reg_234 =  (sc_lv<1>) (enable.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
        i_reg_224 = i_fu_157_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, enable_read_read_fu_76_p2.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
        icmp_ln887_reg_238 = icmp_ln887_fu_201_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_1_state.read()))))) {
        j_reg_216 = j_fu_145_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_new_V_0_load_A.read())) {
        stream_new_V_0_payload_A = stream_new_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_new_V_0_load_B.read())) {
        stream_new_V_0_payload_B = stream_new_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_1_load_A.read())) {
        stream_out_V_1_payload_A = stream_out_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_1_load_B.read())) {
        stream_out_V_1_payload_B = stream_out_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_ref_V_0_load_A.read())) {
        stream_ref_V_0_payload_A = stream_ref_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_ref_V_0_load_B.read())) {
        stream_ref_V_0_payload_B = stream_ref_V_TDATA.read();
    }
}

void Background_subtractor::thread_abscond_fu_183_p2() {
    abscond_fu_183_p2 = (!ret_V_fu_171_p2.read().is_01() || !ap_const_lv9_0.is_01())? sc_lv<1>(): (sc_bigint<9>(ret_V_fu_171_p2.read()) > sc_bigint<9>(ap_const_lv9_0));
}

void Background_subtractor::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Background_subtractor::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Background_subtractor::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Background_subtractor::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Background_subtractor::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_1_state.read())));
}

void Background_subtractor::thread_ap_block_state3() {
    ap_block_state3 = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read())));
}

void Background_subtractor::thread_ap_block_state3_io() {
    ap_block_state3_io = ((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_1_ack_in.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op36_write_state3.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_1_ack_in.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op47_write_state3.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_1_ack_in.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op48_write_state3.read())));
}

void Background_subtractor::thread_ap_block_state4_io() {
    ap_block_state4_io = ((esl_seteq<1,1,1>(ap_const_lv1_0, enable_read_reg_234.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_1_ack_in.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op52_write_state4.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_1_ack_in.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op54_write_state4.read())));
}

void Background_subtractor::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_1_state.read()))) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln21_fu_139_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Background_subtractor::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Background_subtractor::thread_ap_predicate_op36_write_state3() {
    ap_predicate_op36_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, enable_read_read_fu_76_p2.read()));
}

void Background_subtractor::thread_ap_predicate_op47_write_state3() {
    ap_predicate_op47_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, enable_read_read_fu_76_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_201_p2.read()));
}

void Background_subtractor::thread_ap_predicate_op48_write_state3() {
    ap_predicate_op48_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, enable_read_read_fu_76_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_201_p2.read()));
}

void Background_subtractor::thread_ap_predicate_op52_write_state4() {
    ap_predicate_op52_write_state4 = (esl_seteq<1,1,1>(ap_const_lv1_1, enable_read_reg_234.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_reg_238.read()));
}

void Background_subtractor::thread_ap_predicate_op54_write_state4() {
    ap_predicate_op54_write_state4 = (esl_seteq<1,1,1>(ap_const_lv1_1, enable_read_reg_234.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_reg_238.read()));
}

void Background_subtractor::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_1_state.read()))) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln21_fu_139_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Background_subtractor::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Background_subtractor::thread_enable_read_read_fu_76_p2() {
    enable_read_read_fu_76_p2 =  (sc_lv<1>) (enable.read());
}

void Background_subtractor::thread_i_fu_157_p2() {
    i_fu_157_p2 = (!i_0_reg_115.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_0_reg_115.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void Background_subtractor::thread_i_op_assign_fu_189_p3() {
    i_op_assign_fu_189_p3 = (!abscond_fu_183_p2.read()[0].is_01())? sc_lv<9>(): ((abscond_fu_183_p2.read()[0].to_bool())? ret_V_fu_171_p2.read(): neg_fu_177_p2.read());
}

void Background_subtractor::thread_icmp_ln21_fu_139_p2() {
    icmp_ln21_fu_139_p2 = (!j_0_reg_104.read().is_01() || !ap_const_lv9_1E0.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_104.read() == ap_const_lv9_1E0);
}

void Background_subtractor::thread_icmp_ln22_fu_151_p2() {
    icmp_ln22_fu_151_p2 = (!i_0_reg_115.read().is_01() || !ap_const_lv10_280.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_115.read() == ap_const_lv10_280);
}

void Background_subtractor::thread_icmp_ln887_fu_201_p2() {
    icmp_ln887_fu_201_p2 = (!i_op_assign_fu_189_p3.read().is_01() || !zext_ln887_fu_197_p1.read().is_01())? sc_lv<1>(): (sc_bigint<9>(i_op_assign_fu_189_p3.read()) < sc_bigint<9>(zext_ln887_fu_197_p1.read()));
}

void Background_subtractor::thread_j_fu_145_p2() {
    j_fu_145_p2 = (!j_0_reg_104.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(j_0_reg_104.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void Background_subtractor::thread_lhs_V_fu_163_p1() {
    lhs_V_fu_163_p1 = esl_zext<9,8>(stream_new_V_0_data_out.read());
}

void Background_subtractor::thread_neg_fu_177_p2() {
    neg_fu_177_p2 = (!ap_const_lv9_0.is_01() || !ret_V_fu_171_p2.read().is_01())? sc_lv<9>(): (sc_biguint<9>(ap_const_lv9_0) - sc_biguint<9>(ret_V_fu_171_p2.read()));
}

void Background_subtractor::thread_pixel_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pixel_done =  (sc_logic) (phi_ln47_reg_126.read()[0]);
    } else {
        pixel_done = pixel_done_preg.read();
    }
}

void Background_subtractor::thread_ret_V_fu_171_p2() {
    ret_V_fu_171_p2 = (!lhs_V_fu_163_p1.read().is_01() || !rhs_V_fu_167_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(lhs_V_fu_163_p1.read()) - sc_biguint<9>(rhs_V_fu_167_p1.read()));
}

void Background_subtractor::thread_rhs_V_fu_167_p1() {
    rhs_V_fu_167_p1 = esl_zext<9,8>(stream_ref_V_0_data_out.read());
}

void Background_subtractor::thread_stream_new_V_0_ack_in() {
    stream_new_V_0_ack_in = stream_new_V_0_state.read()[1];
}

void Background_subtractor::thread_stream_new_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
        stream_new_V_0_ack_out = ap_const_logic_1;
    } else {
        stream_new_V_0_ack_out = ap_const_logic_0;
    }
}

void Background_subtractor::thread_stream_new_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_new_V_0_sel.read())) {
        stream_new_V_0_data_out = stream_new_V_0_payload_B.read();
    } else {
        stream_new_V_0_data_out = stream_new_V_0_payload_A.read();
    }
}

void Background_subtractor::thread_stream_new_V_0_load_A() {
    stream_new_V_0_load_A = (stream_new_V_0_state_cmp_full.read() & ~stream_new_V_0_sel_wr.read());
}

void Background_subtractor::thread_stream_new_V_0_load_B() {
    stream_new_V_0_load_B = (stream_new_V_0_sel_wr.read() & stream_new_V_0_state_cmp_full.read());
}

void Background_subtractor::thread_stream_new_V_0_sel() {
    stream_new_V_0_sel = stream_new_V_0_sel_rd.read();
}

void Background_subtractor::thread_stream_new_V_0_state_cmp_full() {
    stream_new_V_0_state_cmp_full =  (sc_logic) ((!stream_new_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_new_V_0_state.read() != ap_const_lv2_1))[0];
}

void Background_subtractor::thread_stream_new_V_0_vld_in() {
    stream_new_V_0_vld_in = stream_new_V_TVALID.read();
}

void Background_subtractor::thread_stream_new_V_0_vld_out() {
    stream_new_V_0_vld_out = stream_new_V_0_state.read()[0];
}

void Background_subtractor::thread_stream_new_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()))) {
        stream_new_V_TDATA_blk_n = stream_new_V_0_state.read()[0];
    } else {
        stream_new_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Background_subtractor::thread_stream_new_V_TREADY() {
    stream_new_V_TREADY = stream_new_V_0_state.read()[1];
}

void Background_subtractor::thread_stream_out_V_1_ack_in() {
    stream_out_V_1_ack_in = stream_out_V_1_state.read()[1];
}

void Background_subtractor::thread_stream_out_V_1_ack_out() {
    stream_out_V_1_ack_out = stream_out_V_TREADY.read();
}

void Background_subtractor::thread_stream_out_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op48_write_state3.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read()))))) {
        stream_out_V_1_data_in = ap_const_lv8_FF;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op36_write_state3.read()) && 
                 !((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read())))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op47_write_state3.read()) && 
                 !((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read())))))) {
        stream_out_V_1_data_in = stream_new_V_0_data_out.read();
    } else {
        stream_out_V_1_data_in = "XXXXXXXX";
    }
}

void Background_subtractor::thread_stream_out_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_1_sel.read())) {
        stream_out_V_1_data_out = stream_out_V_1_payload_B.read();
    } else {
        stream_out_V_1_data_out = stream_out_V_1_payload_A.read();
    }
}

void Background_subtractor::thread_stream_out_V_1_load_A() {
    stream_out_V_1_load_A = (stream_out_V_1_state_cmp_full.read() & ~stream_out_V_1_sel_wr.read());
}

void Background_subtractor::thread_stream_out_V_1_load_B() {
    stream_out_V_1_load_B = (stream_out_V_1_sel_wr.read() & stream_out_V_1_state_cmp_full.read());
}

void Background_subtractor::thread_stream_out_V_1_sel() {
    stream_out_V_1_sel = stream_out_V_1_sel_rd.read();
}

void Background_subtractor::thread_stream_out_V_1_state_cmp_full() {
    stream_out_V_1_state_cmp_full =  (sc_logic) ((!stream_out_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_1_state.read() != ap_const_lv2_1))[0];
}

void Background_subtractor::thread_stream_out_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op36_write_state3.read()) && 
          !((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op47_write_state3.read()) && 
          !((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op48_write_state3.read()) && 
          !((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))))) {
        stream_out_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_1_vld_in = ap_const_logic_0;
    }
}

void Background_subtractor::thread_stream_out_V_1_vld_out() {
    stream_out_V_1_vld_out = stream_out_V_1_state.read()[0];
}

void Background_subtractor::thread_stream_out_V_TDATA() {
    stream_out_V_TDATA = stream_out_V_1_data_out.read();
}

void Background_subtractor::thread_stream_out_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, enable_read_read_fu_76_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_201_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, enable_read_reg_234.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_reg_238.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, enable_read_read_fu_76_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_201_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, enable_read_reg_234.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_reg_238.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, enable_read_read_fu_76_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, enable_read_reg_234.read())))) {
        stream_out_V_TDATA_blk_n = stream_out_V_1_state.read()[1];
    } else {
        stream_out_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Background_subtractor::thread_stream_out_V_TVALID() {
    stream_out_V_TVALID = stream_out_V_1_state.read()[0];
}

void Background_subtractor::thread_stream_ref_V_0_ack_in() {
    stream_ref_V_0_ack_in = stream_ref_V_0_state.read()[1];
}

void Background_subtractor::thread_stream_ref_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
        stream_ref_V_0_ack_out = ap_const_logic_1;
    } else {
        stream_ref_V_0_ack_out = ap_const_logic_0;
    }
}

void Background_subtractor::thread_stream_ref_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_ref_V_0_sel.read())) {
        stream_ref_V_0_data_out = stream_ref_V_0_payload_B.read();
    } else {
        stream_ref_V_0_data_out = stream_ref_V_0_payload_A.read();
    }
}

void Background_subtractor::thread_stream_ref_V_0_load_A() {
    stream_ref_V_0_load_A = (stream_ref_V_0_state_cmp_full.read() & ~stream_ref_V_0_sel_wr.read());
}

void Background_subtractor::thread_stream_ref_V_0_load_B() {
    stream_ref_V_0_load_B = (stream_ref_V_0_sel_wr.read() & stream_ref_V_0_state_cmp_full.read());
}

void Background_subtractor::thread_stream_ref_V_0_sel() {
    stream_ref_V_0_sel = stream_ref_V_0_sel_rd.read();
}

void Background_subtractor::thread_stream_ref_V_0_state_cmp_full() {
    stream_ref_V_0_state_cmp_full =  (sc_logic) ((!stream_ref_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_ref_V_0_state.read() != ap_const_lv2_1))[0];
}

void Background_subtractor::thread_stream_ref_V_0_vld_in() {
    stream_ref_V_0_vld_in = stream_ref_V_TVALID.read();
}

void Background_subtractor::thread_stream_ref_V_0_vld_out() {
    stream_ref_V_0_vld_out = stream_ref_V_0_state.read()[0];
}

void Background_subtractor::thread_stream_ref_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()))) {
        stream_ref_V_TDATA_blk_n = stream_ref_V_0_state.read()[0];
    } else {
        stream_ref_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Background_subtractor::thread_stream_ref_V_TREADY() {
    stream_ref_V_TREADY = stream_ref_V_0_state.read()[1];
}

void Background_subtractor::thread_xor_ln22_fu_207_p2() {
    xor_ln22_fu_207_p2 = (phi_ln47_reg_126.read() ^ ap_const_lv1_1);
}

void Background_subtractor::thread_zext_ln887_fu_197_p1() {
    zext_ln887_fu_197_p1 = esl_zext<9,8>(threshold_V.read());
}

void Background_subtractor::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_1_state.read()))) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln21_fu_139_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_1_state.read()))) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln21_fu_139_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln22_fu_151_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_new_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_151_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_ref_V_0_vld_out.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_block_state4_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

void Background_subtractor::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_new_V_TDATA\" :  \"" << stream_new_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_new_V_TVALID\" :  \"" << stream_new_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_new_V_TREADY\" :  \"" << stream_new_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_ref_V_TDATA\" :  \"" << stream_ref_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_ref_V_TVALID\" :  \"" << stream_ref_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_ref_V_TREADY\" :  \"" << stream_ref_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"enable\" :  \"" << enable.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"threshold_V\" :  \"" << threshold_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pixel_done\" :  \"" << pixel_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_V_TDATA\" :  \"" << stream_out_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_V_TVALID\" :  \"" << stream_out_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_out_V_TREADY\" :  \"" << stream_out_V_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

